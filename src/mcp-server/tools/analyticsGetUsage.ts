/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { analyticsGetUsage } from "../../funcs/analyticsGetUsage.js";
import * as models from "../../models/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  fromDate: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  toDate: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  granularity: z.nullable(models.Granularity$inboundSchema).optional(),
  fields: z.nullable(z.array(z.string())).optional(),
  groupBy: z.nullable(z.array(z.string())).optional(),
};

export const tool$analyticsGetUsage: ToolDefinition<typeof args> = {
  name: "analytics-get-usage",
  description: `Usage`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await analyticsGetUsage(
      client,
      args.fromDate,
      args.toDate,
      args.granularity,
      args.fields,
      args.groupBy,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
