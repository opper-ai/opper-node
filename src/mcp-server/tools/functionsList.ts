/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { functionsList } from "../../funcs/functionsList.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  name: z.nullable(z.string()).optional(),
  sort: z.nullable(z.string()).optional(),
  offset: z.nullable(z.number().int()).optional(),
  limit: z.nullable(z.number().int()).optional(),
};

export const tool$functionsList: ToolDefinition<typeof args> = {
  name: "functions-list",
  description: `List Functions

List existing functions with the most recent revision in the current project`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await functionsList(
      client,
      args.name,
      args.sort,
      args.offset,
      args.limit,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
