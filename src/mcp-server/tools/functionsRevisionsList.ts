/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { functionsRevisionsList } from "../../funcs/functionsRevisionsList.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  functionId: z.string(),
  offset: z.nullable(z.number().int()).optional(),
  limit: z.nullable(z.number().int()).optional(),
};

export const tool$functionsRevisionsList: ToolDefinition<typeof args> = {
  name: "functions-revisions-list",
  description: `List Function Revisions

Get all revisions for a function with pagination

Returns a list of revisions for the function with the given function id
revisions are sorted by created_at in descending order ergo the latest revision is the first one`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await functionsRevisionsList(
      client,
      args.functionId,
      args.offset,
      args.limit,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
