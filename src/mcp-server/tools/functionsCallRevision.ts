/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { functionsCallRevision } from "../../funcs/functionsCallRevision.js";
import * as models from "../../models/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  functionId: z.string(),
  revisionId: z.string(),
  appApiPublicV2FunctionsCallFunctionRequest:
    models.AppApiPublicV2FunctionsCallFunctionRequest$inboundSchema,
};

export const tool$functionsCallRevision: ToolDefinition<typeof args> = {
  name: "functions-call-revision",
  description: `Call Function Revision

Call a function`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await functionsCallRevision(
      client,
      args.functionId,
      args.revisionId,
      args.appApiPublicV2FunctionsCallFunctionRequest,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
