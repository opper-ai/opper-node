/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { stream } from "../../funcs/stream.js";
import * as models from "../../models/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: models.AppApiPublicV2FunctionCallCallFunctionRequest$inboundSchema,
};

export const tool$stream: ToolDefinition<typeof args> = {
  name: "stream",
  description: `Function Stream

Stream a function call execution in real-time using Server-Sent Events (SSE).

This endpoint returns a continuous stream of ServerSentEvent objects as the function executes,
allowing for real-time streaming of responses. The response follows the Server-Sent Events
specification with proper event structure for SDK compatibility.

Each ServerSentEvent contains:
- \`id\`: Optional event identifier
- \`event\`: Optional event type
- \`data\`: StreamingChunk with actual content
- \`retry\`: Optional retry interval

The StreamingChunk data payload includes:
- \`delta\`: Incremental text content (if any)
- \`span_id\`: Unique identifier for the execution span (when available)

Note: When streaming is enabled, any output_schema will be ignored as structured output
cannot be streamed. The response will be unstructured text content.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await stream(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value.result;

    return formatResult(value, apiCall);
  },
};
