// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type SearchContextSize string

const (
	SearchContextSizeLow    SearchContextSize = "low"
	SearchContextSizeMedium SearchContextSize = "medium"
	SearchContextSizeHigh   SearchContextSize = "high"
)

func (e SearchContextSize) ToPointer() *SearchContextSize {
	return &e
}
func (e *SearchContextSize) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "low":
		fallthrough
	case "medium":
		fallthrough
	case "high":
		*e = SearchContextSize(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchContextSize: %v", v)
	}
}

type WebSearchOptions struct {
	SearchContextSize *SearchContextSize            `json:"search_context_size,omitempty"`
	UserLocation      *WebSearchOptionsUserLocation `json:"user_location,omitempty"`
}

func (o *WebSearchOptions) GetSearchContextSize() *SearchContextSize {
	if o == nil {
		return nil
	}
	return o.SearchContextSize
}

func (o *WebSearchOptions) GetUserLocation() *WebSearchOptionsUserLocation {
	if o == nil {
		return nil
	}
	return o.UserLocation
}
