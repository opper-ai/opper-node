// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
)

type ChatCompletionMessage struct {
	Content              *string                         `json:"content,omitempty"`
	Refusal              *string                         `json:"refusal,omitempty"`
	role                 string                          `const:"assistant" json:"role"`
	Annotations          []Annotation                    `json:"annotations,omitempty"`
	Audio                *ChatCompletionAudio            `json:"audio,omitempty"`
	FunctionCall         *FunctionCallOutput             `json:"function_call,omitempty"`
	ToolCalls            []ChatCompletionMessageToolCall `json:"tool_calls,omitempty"`
	AdditionalProperties map[string]any                  `additionalProperties:"true" json:"-"`
}

func (c ChatCompletionMessage) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ChatCompletionMessage) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ChatCompletionMessage) GetContent() *string {
	if o == nil {
		return nil
	}
	return o.Content
}

func (o *ChatCompletionMessage) GetRefusal() *string {
	if o == nil {
		return nil
	}
	return o.Refusal
}

func (o *ChatCompletionMessage) GetRole() string {
	return "assistant"
}

func (o *ChatCompletionMessage) GetAnnotations() []Annotation {
	if o == nil {
		return nil
	}
	return o.Annotations
}

func (o *ChatCompletionMessage) GetAudio() *ChatCompletionAudio {
	if o == nil {
		return nil
	}
	return o.Audio
}

func (o *ChatCompletionMessage) GetFunctionCall() *FunctionCallOutput {
	if o == nil {
		return nil
	}
	return o.FunctionCall
}

func (o *ChatCompletionMessage) GetToolCalls() []ChatCompletionMessageToolCall {
	if o == nil {
		return nil
	}
	return o.ToolCalls
}

func (o *ChatCompletionMessage) GetAdditionalProperties() map[string]any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}
