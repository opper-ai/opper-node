// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
)

type QueryKnowledgeBaseRequest struct {
	// Query string
	Query string `json:"query"`
	// Number of documents to retrieve from the knowledge base before filtering
	PrefilterLimit *int64 `default:"10" json:"prefilter_limit"`
	// Number of documents to return
	TopK *int64 `default:"3" json:"top_k"`
	// Per-field filters to apply to the query combined with AND
	Filters []Filter `json:"filters,omitempty"`
	// Whether to rerank the results
	Rerank *bool `default:"true" json:"rerank"`
	// Parent span id
	ParentSpanID *string `json:"parent_span_id,omitempty"`
}

func (q QueryKnowledgeBaseRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(q, "", false)
}

func (q *QueryKnowledgeBaseRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &q, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *QueryKnowledgeBaseRequest) GetQuery() string {
	if o == nil {
		return ""
	}
	return o.Query
}

func (o *QueryKnowledgeBaseRequest) GetPrefilterLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.PrefilterLimit
}

func (o *QueryKnowledgeBaseRequest) GetTopK() *int64 {
	if o == nil {
		return nil
	}
	return o.TopK
}

func (o *QueryKnowledgeBaseRequest) GetFilters() []Filter {
	if o == nil {
		return nil
	}
	return o.Filters
}

func (o *QueryKnowledgeBaseRequest) GetRerank() *bool {
	if o == nil {
		return nil
	}
	return o.Rerank
}

func (o *QueryKnowledgeBaseRequest) GetParentSpanID() *string {
	if o == nil {
		return nil
	}
	return o.ParentSpanID
}
