// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type Value1Type string

const (
	Value1TypeStr     Value1Type = "str"
	Value1TypeInteger Value1Type = "integer"
	Value1TypeNumber  Value1Type = "number"
)

type Value1 struct {
	Str     *string  `queryParam:"inline"`
	Integer *int64   `queryParam:"inline"`
	Number  *float64 `queryParam:"inline"`

	Type Value1Type
}

func CreateValue1Str(str string) Value1 {
	typ := Value1TypeStr

	return Value1{
		Str:  &str,
		Type: typ,
	}
}

func CreateValue1Integer(integer int64) Value1 {
	typ := Value1TypeInteger

	return Value1{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateValue1Number(number float64) Value1 {
	typ := Value1TypeNumber

	return Value1{
		Number: &number,
		Type:   typ,
	}
}

func (u *Value1) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = Value1TypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = Value1TypeInteger
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = Value1TypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Value1", string(data))
}

func (u Value1) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type Value1: all fields are null")
}

type Value2Type string

const (
	Value2TypeStr           Value2Type = "str"
	Value2TypeInteger       Value2Type = "integer"
	Value2TypeNumber        Value2Type = "number"
	Value2TypeArrayOfValue1 Value2Type = "arrayOfValue1"
)

// Value2 - The value to filter on
type Value2 struct {
	Str           *string  `queryParam:"inline"`
	Integer       *int64   `queryParam:"inline"`
	Number        *float64 `queryParam:"inline"`
	ArrayOfValue1 []Value1 `queryParam:"inline"`

	Type Value2Type
}

func CreateValue2Str(str string) Value2 {
	typ := Value2TypeStr

	return Value2{
		Str:  &str,
		Type: typ,
	}
}

func CreateValue2Integer(integer int64) Value2 {
	typ := Value2TypeInteger

	return Value2{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateValue2Number(number float64) Value2 {
	typ := Value2TypeNumber

	return Value2{
		Number: &number,
		Type:   typ,
	}
}

func CreateValue2ArrayOfValue1(arrayOfValue1 []Value1) Value2 {
	typ := Value2TypeArrayOfValue1

	return Value2{
		ArrayOfValue1: arrayOfValue1,
		Type:          typ,
	}
}

func (u *Value2) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = Value2TypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = Value2TypeInteger
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = Value2TypeNumber
		return nil
	}

	var arrayOfValue1 []Value1 = []Value1{}
	if err := utils.UnmarshalJSON(data, &arrayOfValue1, "", true, true); err == nil {
		u.ArrayOfValue1 = arrayOfValue1
		u.Type = Value2TypeArrayOfValue1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Value2", string(data))
}

func (u Value2) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.ArrayOfValue1 != nil {
		return utils.MarshalJSON(u.ArrayOfValue1, "", true)
	}

	return nil, errors.New("could not marshal union type Value2: all fields are null")
}

type Filter struct {
	// The field to filter on
	Field     string `json:"field"`
	Operation Op     `json:"operation"`
	// The value to filter on
	Value Value2 `json:"value"`
}

func (o *Filter) GetField() string {
	if o == nil {
		return ""
	}
	return o.Field
}

func (o *Filter) GetOperation() Op {
	if o == nil {
		return Op("")
	}
	return o.Operation
}

func (o *Filter) GetValue() Value2 {
	if o == nil {
		return Value2{}
	}
	return o.Value
}
