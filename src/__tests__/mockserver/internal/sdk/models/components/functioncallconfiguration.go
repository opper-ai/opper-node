// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
)

type FunctionCallConfiguration struct {
	// The number of few-shot examples to use for the call. The examples are selected using nearest neighbor search of the function's dataset for items that are similar to the input.
	InvocationFewShotCount *int64 `default:"0" json:"invocation.few_shot.count"`
	// Whether to enable evaluation for the call. Evaluation is a beta feature and is enabled by default.
	BetaEvaluationEnabled *bool `default:"true" json:"beta.evaluation.enabled"`
	// The maximum number of attempts to make when generating a response matching the output schema if provided.
	InvocationStructuredGenerationMaxAttempts *int64 `default:"5" json:"invocation.structured_generation.max_attempts"`
	// The time to live for the cache in seconds. If 0, the cache is disabled.
	InvocationCacheTTL *int64 `default:"0" json:"invocation.cache.ttl"`
}

func (f FunctionCallConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FunctionCallConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *FunctionCallConfiguration) GetInvocationFewShotCount() *int64 {
	if o == nil {
		return nil
	}
	return o.InvocationFewShotCount
}

func (o *FunctionCallConfiguration) GetBetaEvaluationEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.BetaEvaluationEnabled
}

func (o *FunctionCallConfiguration) GetInvocationStructuredGenerationMaxAttempts() *int64 {
	if o == nil {
		return nil
	}
	return o.InvocationStructuredGenerationMaxAttempts
}

func (o *FunctionCallConfiguration) GetInvocationCacheTTL() *int64 {
	if o == nil {
		return nil
	}
	return o.InvocationCacheTTL
}
