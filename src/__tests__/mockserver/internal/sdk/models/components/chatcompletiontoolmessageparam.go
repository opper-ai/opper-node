// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type ChatCompletionToolMessageParamContentType string

const (
	ChatCompletionToolMessageParamContentTypeStr                                       ChatCompletionToolMessageParamContentType = "str"
	ChatCompletionToolMessageParamContentTypeArrayOfChatCompletionContentPartTextParam ChatCompletionToolMessageParamContentType = "arrayOfChatCompletionContentPartTextParam"
)

type ChatCompletionToolMessageParamContent struct {
	Str                                       *string                              `queryParam:"inline"`
	ArrayOfChatCompletionContentPartTextParam []ChatCompletionContentPartTextParam `queryParam:"inline"`

	Type ChatCompletionToolMessageParamContentType
}

func CreateChatCompletionToolMessageParamContentStr(str string) ChatCompletionToolMessageParamContent {
	typ := ChatCompletionToolMessageParamContentTypeStr

	return ChatCompletionToolMessageParamContent{
		Str:  &str,
		Type: typ,
	}
}

func CreateChatCompletionToolMessageParamContentArrayOfChatCompletionContentPartTextParam(arrayOfChatCompletionContentPartTextParam []ChatCompletionContentPartTextParam) ChatCompletionToolMessageParamContent {
	typ := ChatCompletionToolMessageParamContentTypeArrayOfChatCompletionContentPartTextParam

	return ChatCompletionToolMessageParamContent{
		ArrayOfChatCompletionContentPartTextParam: arrayOfChatCompletionContentPartTextParam,
		Type: typ,
	}
}

func (u *ChatCompletionToolMessageParamContent) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ChatCompletionToolMessageParamContentTypeStr
		return nil
	}

	var arrayOfChatCompletionContentPartTextParam []ChatCompletionContentPartTextParam = []ChatCompletionContentPartTextParam{}
	if err := utils.UnmarshalJSON(data, &arrayOfChatCompletionContentPartTextParam, "", true, true); err == nil {
		u.ArrayOfChatCompletionContentPartTextParam = arrayOfChatCompletionContentPartTextParam
		u.Type = ChatCompletionToolMessageParamContentTypeArrayOfChatCompletionContentPartTextParam
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ChatCompletionToolMessageParamContent", string(data))
}

func (u ChatCompletionToolMessageParamContent) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfChatCompletionContentPartTextParam != nil {
		return utils.MarshalJSON(u.ArrayOfChatCompletionContentPartTextParam, "", true)
	}

	return nil, errors.New("could not marshal union type ChatCompletionToolMessageParamContent: all fields are null")
}

type ChatCompletionToolMessageParam struct {
	Content    ChatCompletionToolMessageParamContent `json:"content"`
	role       string                                `const:"tool" json:"role"`
	ToolCallID string                                `json:"tool_call_id"`
}

func (c ChatCompletionToolMessageParam) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ChatCompletionToolMessageParam) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ChatCompletionToolMessageParam) GetContent() ChatCompletionToolMessageParamContent {
	if o == nil {
		return ChatCompletionToolMessageParamContent{}
	}
	return o.Content
}

func (o *ChatCompletionToolMessageParam) GetRole() string {
	return "tool"
}

func (o *ChatCompletionToolMessageParam) GetToolCallID() string {
	if o == nil {
		return ""
	}
	return o.ToolCallID
}
