// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type InputType string

const (
	InputTypeStr        InputType = "str"
	InputTypeArrayOfStr InputType = "arrayOfStr"
)

// Input - The input to embed, can be a single string or a list of strings
type Input struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type InputType
}

func CreateInputStr(str string) Input {
	typ := InputTypeStr

	return Input{
		Str:  &str,
		Type: typ,
	}
}

func CreateInputArrayOfStr(arrayOfStr []string) Input {
	typ := InputTypeArrayOfStr

	return Input{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *Input) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = InputTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = InputTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Input", string(data))
}

func (u Input) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type Input: all fields are null")
}

type CreateEmbeddingRequest struct {
	// The model to use for the embedding, if not provided, `EmbeddingModel(hosting_provider='Azure', location='EU', identifier='azure/text-embedding-3-large', name='azure/text-embedding-3-large-1536', dimensions=1536, max_tokens=8191, credentials='azure-se', is_default=True, is_public=True, extra={'api_base': 'https://opperopenaiservice.openai.azure.com', 'api_version': '2023-05-15', 'dimensions': 1536})` will be used
	Model *TModel `json:"model,omitempty"`
	// The input to embed, can be a single string or a list of strings
	Input Input `json:"input"`
}

func (o *CreateEmbeddingRequest) GetModel() *TModel {
	if o == nil {
		return nil
	}
	return o.Model
}

func (o *CreateEmbeddingRequest) GetInput() Input {
	if o == nil {
		return Input{}
	}
	return o.Input
}
