// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type TModel1Type string

const (
	TModel1TypeStr   TModel1Type = "str"
	TModel1TypeModel TModel1Type = "Model"
)

type TModel1 struct {
	Str   *string `queryParam:"inline"`
	Model *Model  `queryParam:"inline"`

	Type TModel1Type
}

func CreateTModel1Str(str string) TModel1 {
	typ := TModel1TypeStr

	return TModel1{
		Str:  &str,
		Type: typ,
	}
}

func CreateTModel1Model(model Model) TModel1 {
	typ := TModel1TypeModel

	return TModel1{
		Model: &model,
		Type:  typ,
	}
}

func (u *TModel1) UnmarshalJSON(data []byte) error {

	var model Model = Model{}
	if err := utils.UnmarshalJSON(data, &model, "", true, true); err == nil {
		u.Model = &model
		u.Type = TModel1TypeModel
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = TModel1TypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TModel1", string(data))
}

func (u TModel1) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Model != nil {
		return utils.MarshalJSON(u.Model, "", true)
	}

	return nil, errors.New("could not marshal union type TModel1: all fields are null")
}

type TModelType string

const (
	TModelTypeStr            TModelType = "str"
	TModelTypeModel          TModelType = "Model"
	TModelTypeArrayOfTModel1 TModelType = "arrayOfTModel1"
)

type TModel struct {
	Str            *string   `queryParam:"inline"`
	Model          *Model    `queryParam:"inline"`
	ArrayOfTModel1 []TModel1 `queryParam:"inline"`

	Type TModelType
}

func CreateTModelStr(str string) TModel {
	typ := TModelTypeStr

	return TModel{
		Str:  &str,
		Type: typ,
	}
}

func CreateTModelModel(model Model) TModel {
	typ := TModelTypeModel

	return TModel{
		Model: &model,
		Type:  typ,
	}
}

func CreateTModelArrayOfTModel1(arrayOfTModel1 []TModel1) TModel {
	typ := TModelTypeArrayOfTModel1

	return TModel{
		ArrayOfTModel1: arrayOfTModel1,
		Type:           typ,
	}
}

func (u *TModel) UnmarshalJSON(data []byte) error {

	var model Model = Model{}
	if err := utils.UnmarshalJSON(data, &model, "", true, true); err == nil {
		u.Model = &model
		u.Type = TModelTypeModel
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = TModelTypeStr
		return nil
	}

	var arrayOfTModel1 []TModel1 = []TModel1{}
	if err := utils.UnmarshalJSON(data, &arrayOfTModel1, "", true, true); err == nil {
		u.ArrayOfTModel1 = arrayOfTModel1
		u.Type = TModelTypeArrayOfTModel1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TModel", string(data))
}

func (u TModel) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Model != nil {
		return utils.MarshalJSON(u.Model, "", true)
	}

	if u.ArrayOfTModel1 != nil {
		return utils.MarshalJSON(u.ArrayOfTModel1, "", true)
	}

	return nil, errors.New("could not marshal union type TModel: all fields are null")
}
