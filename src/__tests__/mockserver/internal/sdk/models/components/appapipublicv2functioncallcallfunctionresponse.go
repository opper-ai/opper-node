// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type JSONPayloadType string

const (
	JSONPayloadTypeMapOfAny   JSONPayloadType = "mapOfAny"
	JSONPayloadTypeArrayOfAny JSONPayloadType = "arrayOfAny"
	JSONPayloadTypeAny        JSONPayloadType = "any"
)

// JSONPayload - Result of the task if the call uses an output schema
type JSONPayload struct {
	MapOfAny   map[string]any `queryParam:"inline"`
	ArrayOfAny []any          `queryParam:"inline"`
	Any        any            `queryParam:"inline"`

	Type JSONPayloadType
}

func CreateJSONPayloadMapOfAny(mapOfAny map[string]any) JSONPayload {
	typ := JSONPayloadTypeMapOfAny

	return JSONPayload{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateJSONPayloadArrayOfAny(arrayOfAny []any) JSONPayload {
	typ := JSONPayloadTypeArrayOfAny

	return JSONPayload{
		ArrayOfAny: arrayOfAny,
		Type:       typ,
	}
}

func CreateJSONPayloadAny(anyT any) JSONPayload {
	typ := JSONPayloadTypeAny

	return JSONPayload{
		Any:  anyT,
		Type: typ,
	}
}

func (u *JSONPayload) UnmarshalJSON(data []byte) error {

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = JSONPayloadTypeMapOfAny
		return nil
	}

	var arrayOfAny []any = []any{}
	if err := utils.UnmarshalJSON(data, &arrayOfAny, "", true, true); err == nil {
		u.ArrayOfAny = arrayOfAny
		u.Type = JSONPayloadTypeArrayOfAny
		return nil
	}

	var anyVar any = nil
	if err := utils.UnmarshalJSON(data, &anyVar, "", true, true); err == nil {
		u.Any = anyVar
		u.Type = JSONPayloadTypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for JSONPayload", string(data))
}

func (u JSONPayload) MarshalJSON() ([]byte, error) {
	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfAny != nil {
		return utils.MarshalJSON(u.ArrayOfAny, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type JSONPayload: all fields are null")
}

type AppAPIPublicV2FunctionCallCallFunctionResponse struct {
	// The ID of the span of the call
	SpanID string `json:"span_id"`
	// Result of the task if the call does not use an output schema
	Message *string `json:"message,omitempty"`
	// Result of the task if the call uses an output schema
	JSONPayload *JSONPayload   `json:"json_payload,omitempty"`
	Audio       map[string]any `json:"audio,omitempty"`
	// True if the result was returned from a cached results
	Cached *bool `json:"cached,omitempty"`
	// The images generated by the call. Only available for image models. Depending on the configuration, the response can either be a list of image urls or a base64 encoded images.
	Images []string `json:"images,omitempty"`
}

func (o *AppAPIPublicV2FunctionCallCallFunctionResponse) GetSpanID() string {
	if o == nil {
		return ""
	}
	return o.SpanID
}

func (o *AppAPIPublicV2FunctionCallCallFunctionResponse) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *AppAPIPublicV2FunctionCallCallFunctionResponse) GetJSONPayload() *JSONPayload {
	if o == nil {
		return nil
	}
	return o.JSONPayload
}

func (o *AppAPIPublicV2FunctionCallCallFunctionResponse) GetAudio() map[string]any {
	if o == nil {
		return nil
	}
	return o.Audio
}

func (o *AppAPIPublicV2FunctionCallCallFunctionResponse) GetCached() *bool {
	if o == nil {
		return nil
	}
	return o.Cached
}

func (o *AppAPIPublicV2FunctionCallCallFunctionResponse) GetImages() []string {
	if o == nil {
		return nil
	}
	return o.Images
}
