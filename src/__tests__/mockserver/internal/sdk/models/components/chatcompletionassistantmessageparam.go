// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type ChatCompletionAssistantMessageParamContent1Type string

const (
	ChatCompletionAssistantMessageParamContent1TypeChatCompletionContentPartTextParam    ChatCompletionAssistantMessageParamContent1Type = "ChatCompletionContentPartTextParam"
	ChatCompletionAssistantMessageParamContent1TypeChatCompletionContentPartRefusalParam ChatCompletionAssistantMessageParamContent1Type = "ChatCompletionContentPartRefusalParam"
)

type ChatCompletionAssistantMessageParamContent1 struct {
	ChatCompletionContentPartTextParam    *ChatCompletionContentPartTextParam    `queryParam:"inline"`
	ChatCompletionContentPartRefusalParam *ChatCompletionContentPartRefusalParam `queryParam:"inline"`

	Type ChatCompletionAssistantMessageParamContent1Type
}

func CreateChatCompletionAssistantMessageParamContent1ChatCompletionContentPartTextParam(chatCompletionContentPartTextParam ChatCompletionContentPartTextParam) ChatCompletionAssistantMessageParamContent1 {
	typ := ChatCompletionAssistantMessageParamContent1TypeChatCompletionContentPartTextParam

	return ChatCompletionAssistantMessageParamContent1{
		ChatCompletionContentPartTextParam: &chatCompletionContentPartTextParam,
		Type:                               typ,
	}
}

func CreateChatCompletionAssistantMessageParamContent1ChatCompletionContentPartRefusalParam(chatCompletionContentPartRefusalParam ChatCompletionContentPartRefusalParam) ChatCompletionAssistantMessageParamContent1 {
	typ := ChatCompletionAssistantMessageParamContent1TypeChatCompletionContentPartRefusalParam

	return ChatCompletionAssistantMessageParamContent1{
		ChatCompletionContentPartRefusalParam: &chatCompletionContentPartRefusalParam,
		Type:                                  typ,
	}
}

func (u *ChatCompletionAssistantMessageParamContent1) UnmarshalJSON(data []byte) error {

	var chatCompletionContentPartTextParam ChatCompletionContentPartTextParam = ChatCompletionContentPartTextParam{}
	if err := utils.UnmarshalJSON(data, &chatCompletionContentPartTextParam, "", true, true); err == nil {
		u.ChatCompletionContentPartTextParam = &chatCompletionContentPartTextParam
		u.Type = ChatCompletionAssistantMessageParamContent1TypeChatCompletionContentPartTextParam
		return nil
	}

	var chatCompletionContentPartRefusalParam ChatCompletionContentPartRefusalParam = ChatCompletionContentPartRefusalParam{}
	if err := utils.UnmarshalJSON(data, &chatCompletionContentPartRefusalParam, "", true, true); err == nil {
		u.ChatCompletionContentPartRefusalParam = &chatCompletionContentPartRefusalParam
		u.Type = ChatCompletionAssistantMessageParamContent1TypeChatCompletionContentPartRefusalParam
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ChatCompletionAssistantMessageParamContent1", string(data))
}

func (u ChatCompletionAssistantMessageParamContent1) MarshalJSON() ([]byte, error) {
	if u.ChatCompletionContentPartTextParam != nil {
		return utils.MarshalJSON(u.ChatCompletionContentPartTextParam, "", true)
	}

	if u.ChatCompletionContentPartRefusalParam != nil {
		return utils.MarshalJSON(u.ChatCompletionContentPartRefusalParam, "", true)
	}

	return nil, errors.New("could not marshal union type ChatCompletionAssistantMessageParamContent1: all fields are null")
}

type ChatCompletionAssistantMessageParamContent2Type string

const (
	ChatCompletionAssistantMessageParamContent2TypeStr                                                ChatCompletionAssistantMessageParamContent2Type = "str"
	ChatCompletionAssistantMessageParamContent2TypeArrayOfChatCompletionAssistantMessageParamContent1 ChatCompletionAssistantMessageParamContent2Type = "arrayOfChatCompletionAssistantMessageParamContent1"
)

type ChatCompletionAssistantMessageParamContent2 struct {
	Str                                                *string                                       `queryParam:"inline"`
	ArrayOfChatCompletionAssistantMessageParamContent1 []ChatCompletionAssistantMessageParamContent1 `queryParam:"inline"`

	Type ChatCompletionAssistantMessageParamContent2Type
}

func CreateChatCompletionAssistantMessageParamContent2Str(str string) ChatCompletionAssistantMessageParamContent2 {
	typ := ChatCompletionAssistantMessageParamContent2TypeStr

	return ChatCompletionAssistantMessageParamContent2{
		Str:  &str,
		Type: typ,
	}
}

func CreateChatCompletionAssistantMessageParamContent2ArrayOfChatCompletionAssistantMessageParamContent1(arrayOfChatCompletionAssistantMessageParamContent1 []ChatCompletionAssistantMessageParamContent1) ChatCompletionAssistantMessageParamContent2 {
	typ := ChatCompletionAssistantMessageParamContent2TypeArrayOfChatCompletionAssistantMessageParamContent1

	return ChatCompletionAssistantMessageParamContent2{
		ArrayOfChatCompletionAssistantMessageParamContent1: arrayOfChatCompletionAssistantMessageParamContent1,
		Type: typ,
	}
}

func (u *ChatCompletionAssistantMessageParamContent2) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ChatCompletionAssistantMessageParamContent2TypeStr
		return nil
	}

	var arrayOfChatCompletionAssistantMessageParamContent1 []ChatCompletionAssistantMessageParamContent1 = []ChatCompletionAssistantMessageParamContent1{}
	if err := utils.UnmarshalJSON(data, &arrayOfChatCompletionAssistantMessageParamContent1, "", true, true); err == nil {
		u.ArrayOfChatCompletionAssistantMessageParamContent1 = arrayOfChatCompletionAssistantMessageParamContent1
		u.Type = ChatCompletionAssistantMessageParamContent2TypeArrayOfChatCompletionAssistantMessageParamContent1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ChatCompletionAssistantMessageParamContent2", string(data))
}

func (u ChatCompletionAssistantMessageParamContent2) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfChatCompletionAssistantMessageParamContent1 != nil {
		return utils.MarshalJSON(u.ArrayOfChatCompletionAssistantMessageParamContent1, "", true)
	}

	return nil, errors.New("could not marshal union type ChatCompletionAssistantMessageParamContent2: all fields are null")
}

type ChatCompletionAssistantMessageParam struct {
	role         string                                       `const:"assistant" json:"role"`
	Audio        *Audio                                       `json:"audio,omitempty"`
	Content      *ChatCompletionAssistantMessageParamContent2 `json:"content,omitempty"`
	FunctionCall *FunctionCallInput                           `json:"function_call,omitempty"`
	Name         *string                                      `json:"name,omitempty"`
	Refusal      *string                                      `json:"refusal,omitempty"`
	ToolCalls    []ChatCompletionMessageToolCallParam         `json:"tool_calls,omitempty"`
}

func (c ChatCompletionAssistantMessageParam) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ChatCompletionAssistantMessageParam) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ChatCompletionAssistantMessageParam) GetRole() string {
	return "assistant"
}

func (o *ChatCompletionAssistantMessageParam) GetAudio() *Audio {
	if o == nil {
		return nil
	}
	return o.Audio
}

func (o *ChatCompletionAssistantMessageParam) GetContent() *ChatCompletionAssistantMessageParamContent2 {
	if o == nil {
		return nil
	}
	return o.Content
}

func (o *ChatCompletionAssistantMessageParam) GetFunctionCall() *FunctionCallInput {
	if o == nil {
		return nil
	}
	return o.FunctionCall
}

func (o *ChatCompletionAssistantMessageParam) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ChatCompletionAssistantMessageParam) GetRefusal() *string {
	if o == nil {
		return nil
	}
	return o.Refusal
}

func (o *ChatCompletionAssistantMessageParam) GetToolCalls() []ChatCompletionMessageToolCallParam {
	if o == nil {
		return nil
	}
	return o.ToolCalls
}
