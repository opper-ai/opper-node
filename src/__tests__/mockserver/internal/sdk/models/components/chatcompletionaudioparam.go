// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type ChatCompletionAudioParamFormat string

const (
	ChatCompletionAudioParamFormatWav   ChatCompletionAudioParamFormat = "wav"
	ChatCompletionAudioParamFormatAac   ChatCompletionAudioParamFormat = "aac"
	ChatCompletionAudioParamFormatMp3   ChatCompletionAudioParamFormat = "mp3"
	ChatCompletionAudioParamFormatFlac  ChatCompletionAudioParamFormat = "flac"
	ChatCompletionAudioParamFormatOpus  ChatCompletionAudioParamFormat = "opus"
	ChatCompletionAudioParamFormatPcm16 ChatCompletionAudioParamFormat = "pcm16"
)

func (e ChatCompletionAudioParamFormat) ToPointer() *ChatCompletionAudioParamFormat {
	return &e
}
func (e *ChatCompletionAudioParamFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "wav":
		fallthrough
	case "aac":
		fallthrough
	case "mp3":
		fallthrough
	case "flac":
		fallthrough
	case "opus":
		fallthrough
	case "pcm16":
		*e = ChatCompletionAudioParamFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChatCompletionAudioParamFormat: %v", v)
	}
}

type VoiceEnum string

const (
	VoiceEnumAlloy   VoiceEnum = "alloy"
	VoiceEnumAsh     VoiceEnum = "ash"
	VoiceEnumBallad  VoiceEnum = "ballad"
	VoiceEnumCoral   VoiceEnum = "coral"
	VoiceEnumEcho    VoiceEnum = "echo"
	VoiceEnumFable   VoiceEnum = "fable"
	VoiceEnumOnyx    VoiceEnum = "onyx"
	VoiceEnumNova    VoiceEnum = "nova"
	VoiceEnumSage    VoiceEnum = "sage"
	VoiceEnumShimmer VoiceEnum = "shimmer"
	VoiceEnumVerse   VoiceEnum = "verse"
)

func (e VoiceEnum) ToPointer() *VoiceEnum {
	return &e
}
func (e *VoiceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alloy":
		fallthrough
	case "ash":
		fallthrough
	case "ballad":
		fallthrough
	case "coral":
		fallthrough
	case "echo":
		fallthrough
	case "fable":
		fallthrough
	case "onyx":
		fallthrough
	case "nova":
		fallthrough
	case "sage":
		fallthrough
	case "shimmer":
		fallthrough
	case "verse":
		*e = VoiceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VoiceEnum: %v", v)
	}
}

type VoiceType string

const (
	VoiceTypeStr       VoiceType = "str"
	VoiceTypeVoiceEnum VoiceType = "Voice_enum"
)

type Voice struct {
	Str       *string    `queryParam:"inline"`
	VoiceEnum *VoiceEnum `queryParam:"inline"`

	Type VoiceType
}

func CreateVoiceStr(str string) Voice {
	typ := VoiceTypeStr

	return Voice{
		Str:  &str,
		Type: typ,
	}
}

func CreateVoiceVoiceEnum(voiceEnum VoiceEnum) Voice {
	typ := VoiceTypeVoiceEnum

	return Voice{
		VoiceEnum: &voiceEnum,
		Type:      typ,
	}
}

func (u *Voice) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = VoiceTypeStr
		return nil
	}

	var voiceEnum VoiceEnum = VoiceEnum("")
	if err := utils.UnmarshalJSON(data, &voiceEnum, "", true, true); err == nil {
		u.VoiceEnum = &voiceEnum
		u.Type = VoiceTypeVoiceEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Voice", string(data))
}

func (u Voice) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.VoiceEnum != nil {
		return utils.MarshalJSON(u.VoiceEnum, "", true)
	}

	return nil, errors.New("could not marshal union type Voice: all fields are null")
}

type ChatCompletionAudioParam struct {
	Format ChatCompletionAudioParamFormat `json:"format"`
	Voice  Voice                          `json:"voice"`
}

func (o *ChatCompletionAudioParam) GetFormat() ChatCompletionAudioParamFormat {
	if o == nil {
		return ChatCompletionAudioParamFormat("")
	}
	return o.Format
}

func (o *ChatCompletionAudioParam) GetVoice() Voice {
	if o == nil {
		return Voice{}
	}
	return o.Voice
}
