// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type ChatCompletionStreamingMessageType string

const (
	ChatCompletionStreamingMessageTypeChatCompletionDeveloperMessageParam ChatCompletionStreamingMessageType = "ChatCompletionDeveloperMessageParam"
	ChatCompletionStreamingMessageTypeChatCompletionSystemMessageParam    ChatCompletionStreamingMessageType = "ChatCompletionSystemMessageParam"
	ChatCompletionStreamingMessageTypeChatCompletionUserMessageParam      ChatCompletionStreamingMessageType = "ChatCompletionUserMessageParam"
	ChatCompletionStreamingMessageTypeChatCompletionAssistantMessageParam ChatCompletionStreamingMessageType = "ChatCompletionAssistantMessageParam"
	ChatCompletionStreamingMessageTypeChatCompletionToolMessageParam      ChatCompletionStreamingMessageType = "ChatCompletionToolMessageParam"
	ChatCompletionStreamingMessageTypeChatCompletionFunctionMessageParam  ChatCompletionStreamingMessageType = "ChatCompletionFunctionMessageParam"
)

type ChatCompletionStreamingMessage struct {
	ChatCompletionDeveloperMessageParam *ChatCompletionDeveloperMessageParam `queryParam:"inline"`
	ChatCompletionSystemMessageParam    *ChatCompletionSystemMessageParam    `queryParam:"inline"`
	ChatCompletionUserMessageParam      *ChatCompletionUserMessageParam      `queryParam:"inline"`
	ChatCompletionAssistantMessageParam *ChatCompletionAssistantMessageParam `queryParam:"inline"`
	ChatCompletionToolMessageParam      *ChatCompletionToolMessageParam      `queryParam:"inline"`
	ChatCompletionFunctionMessageParam  *ChatCompletionFunctionMessageParam  `queryParam:"inline"`

	Type ChatCompletionStreamingMessageType
}

func CreateChatCompletionStreamingMessageChatCompletionDeveloperMessageParam(chatCompletionDeveloperMessageParam ChatCompletionDeveloperMessageParam) ChatCompletionStreamingMessage {
	typ := ChatCompletionStreamingMessageTypeChatCompletionDeveloperMessageParam

	return ChatCompletionStreamingMessage{
		ChatCompletionDeveloperMessageParam: &chatCompletionDeveloperMessageParam,
		Type:                                typ,
	}
}

func CreateChatCompletionStreamingMessageChatCompletionSystemMessageParam(chatCompletionSystemMessageParam ChatCompletionSystemMessageParam) ChatCompletionStreamingMessage {
	typ := ChatCompletionStreamingMessageTypeChatCompletionSystemMessageParam

	return ChatCompletionStreamingMessage{
		ChatCompletionSystemMessageParam: &chatCompletionSystemMessageParam,
		Type:                             typ,
	}
}

func CreateChatCompletionStreamingMessageChatCompletionUserMessageParam(chatCompletionUserMessageParam ChatCompletionUserMessageParam) ChatCompletionStreamingMessage {
	typ := ChatCompletionStreamingMessageTypeChatCompletionUserMessageParam

	return ChatCompletionStreamingMessage{
		ChatCompletionUserMessageParam: &chatCompletionUserMessageParam,
		Type:                           typ,
	}
}

func CreateChatCompletionStreamingMessageChatCompletionAssistantMessageParam(chatCompletionAssistantMessageParam ChatCompletionAssistantMessageParam) ChatCompletionStreamingMessage {
	typ := ChatCompletionStreamingMessageTypeChatCompletionAssistantMessageParam

	return ChatCompletionStreamingMessage{
		ChatCompletionAssistantMessageParam: &chatCompletionAssistantMessageParam,
		Type:                                typ,
	}
}

func CreateChatCompletionStreamingMessageChatCompletionToolMessageParam(chatCompletionToolMessageParam ChatCompletionToolMessageParam) ChatCompletionStreamingMessage {
	typ := ChatCompletionStreamingMessageTypeChatCompletionToolMessageParam

	return ChatCompletionStreamingMessage{
		ChatCompletionToolMessageParam: &chatCompletionToolMessageParam,
		Type:                           typ,
	}
}

func CreateChatCompletionStreamingMessageChatCompletionFunctionMessageParam(chatCompletionFunctionMessageParam ChatCompletionFunctionMessageParam) ChatCompletionStreamingMessage {
	typ := ChatCompletionStreamingMessageTypeChatCompletionFunctionMessageParam

	return ChatCompletionStreamingMessage{
		ChatCompletionFunctionMessageParam: &chatCompletionFunctionMessageParam,
		Type:                               typ,
	}
}

func (u *ChatCompletionStreamingMessage) UnmarshalJSON(data []byte) error {

	var chatCompletionDeveloperMessageParam ChatCompletionDeveloperMessageParam = ChatCompletionDeveloperMessageParam{}
	if err := utils.UnmarshalJSON(data, &chatCompletionDeveloperMessageParam, "", true, true); err == nil {
		u.ChatCompletionDeveloperMessageParam = &chatCompletionDeveloperMessageParam
		u.Type = ChatCompletionStreamingMessageTypeChatCompletionDeveloperMessageParam
		return nil
	}

	var chatCompletionSystemMessageParam ChatCompletionSystemMessageParam = ChatCompletionSystemMessageParam{}
	if err := utils.UnmarshalJSON(data, &chatCompletionSystemMessageParam, "", true, true); err == nil {
		u.ChatCompletionSystemMessageParam = &chatCompletionSystemMessageParam
		u.Type = ChatCompletionStreamingMessageTypeChatCompletionSystemMessageParam
		return nil
	}

	var chatCompletionUserMessageParam ChatCompletionUserMessageParam = ChatCompletionUserMessageParam{}
	if err := utils.UnmarshalJSON(data, &chatCompletionUserMessageParam, "", true, true); err == nil {
		u.ChatCompletionUserMessageParam = &chatCompletionUserMessageParam
		u.Type = ChatCompletionStreamingMessageTypeChatCompletionUserMessageParam
		return nil
	}

	var chatCompletionToolMessageParam ChatCompletionToolMessageParam = ChatCompletionToolMessageParam{}
	if err := utils.UnmarshalJSON(data, &chatCompletionToolMessageParam, "", true, true); err == nil {
		u.ChatCompletionToolMessageParam = &chatCompletionToolMessageParam
		u.Type = ChatCompletionStreamingMessageTypeChatCompletionToolMessageParam
		return nil
	}

	var chatCompletionFunctionMessageParam ChatCompletionFunctionMessageParam = ChatCompletionFunctionMessageParam{}
	if err := utils.UnmarshalJSON(data, &chatCompletionFunctionMessageParam, "", true, true); err == nil {
		u.ChatCompletionFunctionMessageParam = &chatCompletionFunctionMessageParam
		u.Type = ChatCompletionStreamingMessageTypeChatCompletionFunctionMessageParam
		return nil
	}

	var chatCompletionAssistantMessageParam ChatCompletionAssistantMessageParam = ChatCompletionAssistantMessageParam{}
	if err := utils.UnmarshalJSON(data, &chatCompletionAssistantMessageParam, "", true, true); err == nil {
		u.ChatCompletionAssistantMessageParam = &chatCompletionAssistantMessageParam
		u.Type = ChatCompletionStreamingMessageTypeChatCompletionAssistantMessageParam
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ChatCompletionStreamingMessage", string(data))
}

func (u ChatCompletionStreamingMessage) MarshalJSON() ([]byte, error) {
	if u.ChatCompletionDeveloperMessageParam != nil {
		return utils.MarshalJSON(u.ChatCompletionDeveloperMessageParam, "", true)
	}

	if u.ChatCompletionSystemMessageParam != nil {
		return utils.MarshalJSON(u.ChatCompletionSystemMessageParam, "", true)
	}

	if u.ChatCompletionUserMessageParam != nil {
		return utils.MarshalJSON(u.ChatCompletionUserMessageParam, "", true)
	}

	if u.ChatCompletionAssistantMessageParam != nil {
		return utils.MarshalJSON(u.ChatCompletionAssistantMessageParam, "", true)
	}

	if u.ChatCompletionToolMessageParam != nil {
		return utils.MarshalJSON(u.ChatCompletionToolMessageParam, "", true)
	}

	if u.ChatCompletionFunctionMessageParam != nil {
		return utils.MarshalJSON(u.ChatCompletionFunctionMessageParam, "", true)
	}

	return nil, errors.New("could not marshal union type ChatCompletionStreamingMessage: all fields are null")
}

type ChatCompletionStreamingFunctionCallEnum string

const (
	ChatCompletionStreamingFunctionCallEnumNone ChatCompletionStreamingFunctionCallEnum = "none"
	ChatCompletionStreamingFunctionCallEnumAuto ChatCompletionStreamingFunctionCallEnum = "auto"
)

func (e ChatCompletionStreamingFunctionCallEnum) ToPointer() *ChatCompletionStreamingFunctionCallEnum {
	return &e
}
func (e *ChatCompletionStreamingFunctionCallEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "auto":
		*e = ChatCompletionStreamingFunctionCallEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChatCompletionStreamingFunctionCallEnum: %v", v)
	}
}

type ChatCompletionStreamingFunctionCallUnionType string

const (
	ChatCompletionStreamingFunctionCallUnionTypeChatCompletionStreamingFunctionCallEnum ChatCompletionStreamingFunctionCallUnionType = "ChatCompletionStreaming_Function Call_enum"
	ChatCompletionStreamingFunctionCallUnionTypeChatCompletionFunctionCallOptionParam   ChatCompletionStreamingFunctionCallUnionType = "ChatCompletionFunctionCallOptionParam"
)

type ChatCompletionStreamingFunctionCallUnion struct {
	ChatCompletionStreamingFunctionCallEnum *ChatCompletionStreamingFunctionCallEnum `queryParam:"inline"`
	ChatCompletionFunctionCallOptionParam   *ChatCompletionFunctionCallOptionParam   `queryParam:"inline"`

	Type ChatCompletionStreamingFunctionCallUnionType
}

func CreateChatCompletionStreamingFunctionCallUnionChatCompletionStreamingFunctionCallEnum(chatCompletionStreamingFunctionCallEnum ChatCompletionStreamingFunctionCallEnum) ChatCompletionStreamingFunctionCallUnion {
	typ := ChatCompletionStreamingFunctionCallUnionTypeChatCompletionStreamingFunctionCallEnum

	return ChatCompletionStreamingFunctionCallUnion{
		ChatCompletionStreamingFunctionCallEnum: &chatCompletionStreamingFunctionCallEnum,
		Type:                                    typ,
	}
}

func CreateChatCompletionStreamingFunctionCallUnionChatCompletionFunctionCallOptionParam(chatCompletionFunctionCallOptionParam ChatCompletionFunctionCallOptionParam) ChatCompletionStreamingFunctionCallUnion {
	typ := ChatCompletionStreamingFunctionCallUnionTypeChatCompletionFunctionCallOptionParam

	return ChatCompletionStreamingFunctionCallUnion{
		ChatCompletionFunctionCallOptionParam: &chatCompletionFunctionCallOptionParam,
		Type:                                  typ,
	}
}

func (u *ChatCompletionStreamingFunctionCallUnion) UnmarshalJSON(data []byte) error {

	var chatCompletionFunctionCallOptionParam ChatCompletionFunctionCallOptionParam = ChatCompletionFunctionCallOptionParam{}
	if err := utils.UnmarshalJSON(data, &chatCompletionFunctionCallOptionParam, "", true, true); err == nil {
		u.ChatCompletionFunctionCallOptionParam = &chatCompletionFunctionCallOptionParam
		u.Type = ChatCompletionStreamingFunctionCallUnionTypeChatCompletionFunctionCallOptionParam
		return nil
	}

	var chatCompletionStreamingFunctionCallEnum ChatCompletionStreamingFunctionCallEnum = ChatCompletionStreamingFunctionCallEnum("")
	if err := utils.UnmarshalJSON(data, &chatCompletionStreamingFunctionCallEnum, "", true, true); err == nil {
		u.ChatCompletionStreamingFunctionCallEnum = &chatCompletionStreamingFunctionCallEnum
		u.Type = ChatCompletionStreamingFunctionCallUnionTypeChatCompletionStreamingFunctionCallEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ChatCompletionStreamingFunctionCallUnion", string(data))
}

func (u ChatCompletionStreamingFunctionCallUnion) MarshalJSON() ([]byte, error) {
	if u.ChatCompletionStreamingFunctionCallEnum != nil {
		return utils.MarshalJSON(u.ChatCompletionStreamingFunctionCallEnum, "", true)
	}

	if u.ChatCompletionFunctionCallOptionParam != nil {
		return utils.MarshalJSON(u.ChatCompletionFunctionCallOptionParam, "", true)
	}

	return nil, errors.New("could not marshal union type ChatCompletionStreamingFunctionCallUnion: all fields are null")
}

type ChatCompletionStreamingModality string

const (
	ChatCompletionStreamingModalityText  ChatCompletionStreamingModality = "text"
	ChatCompletionStreamingModalityAudio ChatCompletionStreamingModality = "audio"
)

func (e ChatCompletionStreamingModality) ToPointer() *ChatCompletionStreamingModality {
	return &e
}
func (e *ChatCompletionStreamingModality) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		fallthrough
	case "audio":
		*e = ChatCompletionStreamingModality(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChatCompletionStreamingModality: %v", v)
	}
}

type ChatCompletionStreamingReasoningEffort string

const (
	ChatCompletionStreamingReasoningEffortLow    ChatCompletionStreamingReasoningEffort = "low"
	ChatCompletionStreamingReasoningEffortMedium ChatCompletionStreamingReasoningEffort = "medium"
	ChatCompletionStreamingReasoningEffortHigh   ChatCompletionStreamingReasoningEffort = "high"
)

func (e ChatCompletionStreamingReasoningEffort) ToPointer() *ChatCompletionStreamingReasoningEffort {
	return &e
}
func (e *ChatCompletionStreamingReasoningEffort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "low":
		fallthrough
	case "medium":
		fallthrough
	case "high":
		*e = ChatCompletionStreamingReasoningEffort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChatCompletionStreamingReasoningEffort: %v", v)
	}
}

type ChatCompletionStreamingResponseFormatType string

const (
	ChatCompletionStreamingResponseFormatTypeResponseFormatText       ChatCompletionStreamingResponseFormatType = "ResponseFormatText"
	ChatCompletionStreamingResponseFormatTypeResponseFormatJSONSchema ChatCompletionStreamingResponseFormatType = "ResponseFormatJSONSchema"
	ChatCompletionStreamingResponseFormatTypeResponseFormatJSONObject ChatCompletionStreamingResponseFormatType = "ResponseFormatJSONObject"
)

type ChatCompletionStreamingResponseFormat struct {
	ResponseFormatText       *ResponseFormatText       `queryParam:"inline"`
	ResponseFormatJSONSchema *ResponseFormatJSONSchema `queryParam:"inline"`
	ResponseFormatJSONObject *ResponseFormatJSONObject `queryParam:"inline"`

	Type ChatCompletionStreamingResponseFormatType
}

func CreateChatCompletionStreamingResponseFormatResponseFormatText(responseFormatText ResponseFormatText) ChatCompletionStreamingResponseFormat {
	typ := ChatCompletionStreamingResponseFormatTypeResponseFormatText

	return ChatCompletionStreamingResponseFormat{
		ResponseFormatText: &responseFormatText,
		Type:               typ,
	}
}

func CreateChatCompletionStreamingResponseFormatResponseFormatJSONSchema(responseFormatJSONSchema ResponseFormatJSONSchema) ChatCompletionStreamingResponseFormat {
	typ := ChatCompletionStreamingResponseFormatTypeResponseFormatJSONSchema

	return ChatCompletionStreamingResponseFormat{
		ResponseFormatJSONSchema: &responseFormatJSONSchema,
		Type:                     typ,
	}
}

func CreateChatCompletionStreamingResponseFormatResponseFormatJSONObject(responseFormatJSONObject ResponseFormatJSONObject) ChatCompletionStreamingResponseFormat {
	typ := ChatCompletionStreamingResponseFormatTypeResponseFormatJSONObject

	return ChatCompletionStreamingResponseFormat{
		ResponseFormatJSONObject: &responseFormatJSONObject,
		Type:                     typ,
	}
}

func (u *ChatCompletionStreamingResponseFormat) UnmarshalJSON(data []byte) error {

	var responseFormatText ResponseFormatText = ResponseFormatText{}
	if err := utils.UnmarshalJSON(data, &responseFormatText, "", true, true); err == nil {
		u.ResponseFormatText = &responseFormatText
		u.Type = ChatCompletionStreamingResponseFormatTypeResponseFormatText
		return nil
	}

	var responseFormatJSONObject ResponseFormatJSONObject = ResponseFormatJSONObject{}
	if err := utils.UnmarshalJSON(data, &responseFormatJSONObject, "", true, true); err == nil {
		u.ResponseFormatJSONObject = &responseFormatJSONObject
		u.Type = ChatCompletionStreamingResponseFormatTypeResponseFormatJSONObject
		return nil
	}

	var responseFormatJSONSchema ResponseFormatJSONSchema = ResponseFormatJSONSchema{}
	if err := utils.UnmarshalJSON(data, &responseFormatJSONSchema, "", true, true); err == nil {
		u.ResponseFormatJSONSchema = &responseFormatJSONSchema
		u.Type = ChatCompletionStreamingResponseFormatTypeResponseFormatJSONSchema
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ChatCompletionStreamingResponseFormat", string(data))
}

func (u ChatCompletionStreamingResponseFormat) MarshalJSON() ([]byte, error) {
	if u.ResponseFormatText != nil {
		return utils.MarshalJSON(u.ResponseFormatText, "", true)
	}

	if u.ResponseFormatJSONSchema != nil {
		return utils.MarshalJSON(u.ResponseFormatJSONSchema, "", true)
	}

	if u.ResponseFormatJSONObject != nil {
		return utils.MarshalJSON(u.ResponseFormatJSONObject, "", true)
	}

	return nil, errors.New("could not marshal union type ChatCompletionStreamingResponseFormat: all fields are null")
}

type ChatCompletionStreamingServiceTier string

const (
	ChatCompletionStreamingServiceTierAuto    ChatCompletionStreamingServiceTier = "auto"
	ChatCompletionStreamingServiceTierDefault ChatCompletionStreamingServiceTier = "default"
	ChatCompletionStreamingServiceTierFlex    ChatCompletionStreamingServiceTier = "flex"
)

func (e ChatCompletionStreamingServiceTier) ToPointer() *ChatCompletionStreamingServiceTier {
	return &e
}
func (e *ChatCompletionStreamingServiceTier) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auto":
		fallthrough
	case "default":
		fallthrough
	case "flex":
		*e = ChatCompletionStreamingServiceTier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChatCompletionStreamingServiceTier: %v", v)
	}
}

type ChatCompletionStreamingStopType string

const (
	ChatCompletionStreamingStopTypeStr        ChatCompletionStreamingStopType = "str"
	ChatCompletionStreamingStopTypeArrayOfStr ChatCompletionStreamingStopType = "arrayOfStr"
)

type ChatCompletionStreamingStop struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type ChatCompletionStreamingStopType
}

func CreateChatCompletionStreamingStopStr(str string) ChatCompletionStreamingStop {
	typ := ChatCompletionStreamingStopTypeStr

	return ChatCompletionStreamingStop{
		Str:  &str,
		Type: typ,
	}
}

func CreateChatCompletionStreamingStopArrayOfStr(arrayOfStr []string) ChatCompletionStreamingStop {
	typ := ChatCompletionStreamingStopTypeArrayOfStr

	return ChatCompletionStreamingStop{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *ChatCompletionStreamingStop) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ChatCompletionStreamingStopTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = ChatCompletionStreamingStopTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ChatCompletionStreamingStop", string(data))
}

func (u ChatCompletionStreamingStop) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type ChatCompletionStreamingStop: all fields are null")
}

type ChatCompletionStreamingToolChoiceEnum string

const (
	ChatCompletionStreamingToolChoiceEnumNone     ChatCompletionStreamingToolChoiceEnum = "none"
	ChatCompletionStreamingToolChoiceEnumAuto     ChatCompletionStreamingToolChoiceEnum = "auto"
	ChatCompletionStreamingToolChoiceEnumRequired ChatCompletionStreamingToolChoiceEnum = "required"
)

func (e ChatCompletionStreamingToolChoiceEnum) ToPointer() *ChatCompletionStreamingToolChoiceEnum {
	return &e
}
func (e *ChatCompletionStreamingToolChoiceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "auto":
		fallthrough
	case "required":
		*e = ChatCompletionStreamingToolChoiceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChatCompletionStreamingToolChoiceEnum: %v", v)
	}
}

type ChatCompletionStreamingToolChoiceUnionType string

const (
	ChatCompletionStreamingToolChoiceUnionTypeChatCompletionStreamingToolChoiceEnum ChatCompletionStreamingToolChoiceUnionType = "ChatCompletionStreaming_Tool Choice_enum"
	ChatCompletionStreamingToolChoiceUnionTypeChatCompletionNamedToolChoiceParam    ChatCompletionStreamingToolChoiceUnionType = "ChatCompletionNamedToolChoiceParam"
)

type ChatCompletionStreamingToolChoiceUnion struct {
	ChatCompletionStreamingToolChoiceEnum *ChatCompletionStreamingToolChoiceEnum `queryParam:"inline"`
	ChatCompletionNamedToolChoiceParam    *ChatCompletionNamedToolChoiceParam    `queryParam:"inline"`

	Type ChatCompletionStreamingToolChoiceUnionType
}

func CreateChatCompletionStreamingToolChoiceUnionChatCompletionStreamingToolChoiceEnum(chatCompletionStreamingToolChoiceEnum ChatCompletionStreamingToolChoiceEnum) ChatCompletionStreamingToolChoiceUnion {
	typ := ChatCompletionStreamingToolChoiceUnionTypeChatCompletionStreamingToolChoiceEnum

	return ChatCompletionStreamingToolChoiceUnion{
		ChatCompletionStreamingToolChoiceEnum: &chatCompletionStreamingToolChoiceEnum,
		Type:                                  typ,
	}
}

func CreateChatCompletionStreamingToolChoiceUnionChatCompletionNamedToolChoiceParam(chatCompletionNamedToolChoiceParam ChatCompletionNamedToolChoiceParam) ChatCompletionStreamingToolChoiceUnion {
	typ := ChatCompletionStreamingToolChoiceUnionTypeChatCompletionNamedToolChoiceParam

	return ChatCompletionStreamingToolChoiceUnion{
		ChatCompletionNamedToolChoiceParam: &chatCompletionNamedToolChoiceParam,
		Type:                               typ,
	}
}

func (u *ChatCompletionStreamingToolChoiceUnion) UnmarshalJSON(data []byte) error {

	var chatCompletionNamedToolChoiceParam ChatCompletionNamedToolChoiceParam = ChatCompletionNamedToolChoiceParam{}
	if err := utils.UnmarshalJSON(data, &chatCompletionNamedToolChoiceParam, "", true, true); err == nil {
		u.ChatCompletionNamedToolChoiceParam = &chatCompletionNamedToolChoiceParam
		u.Type = ChatCompletionStreamingToolChoiceUnionTypeChatCompletionNamedToolChoiceParam
		return nil
	}

	var chatCompletionStreamingToolChoiceEnum ChatCompletionStreamingToolChoiceEnum = ChatCompletionStreamingToolChoiceEnum("")
	if err := utils.UnmarshalJSON(data, &chatCompletionStreamingToolChoiceEnum, "", true, true); err == nil {
		u.ChatCompletionStreamingToolChoiceEnum = &chatCompletionStreamingToolChoiceEnum
		u.Type = ChatCompletionStreamingToolChoiceUnionTypeChatCompletionStreamingToolChoiceEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ChatCompletionStreamingToolChoiceUnion", string(data))
}

func (u ChatCompletionStreamingToolChoiceUnion) MarshalJSON() ([]byte, error) {
	if u.ChatCompletionStreamingToolChoiceEnum != nil {
		return utils.MarshalJSON(u.ChatCompletionStreamingToolChoiceEnum, "", true)
	}

	if u.ChatCompletionNamedToolChoiceParam != nil {
		return utils.MarshalJSON(u.ChatCompletionNamedToolChoiceParam, "", true)
	}

	return nil, errors.New("could not marshal union type ChatCompletionStreamingToolChoiceUnion: all fields are null")
}

type ChatCompletionStreaming struct {
	Messages            []ChatCompletionStreamingMessage                `json:"messages"`
	Model               *TModel                                         `json:"model,omitempty"`
	Audio               *ChatCompletionAudioParam                       `json:"audio,omitempty"`
	FrequencyPenalty    *float64                                        `json:"frequency_penalty,omitempty"`
	FunctionCall        *ChatCompletionStreamingFunctionCallUnion       `json:"function_call,omitempty"`
	Functions           []OpenaiTypesChatCompletionCreateParamsFunction `json:"functions,omitempty"`
	LogitBias           map[string]int64                                `json:"logit_bias,omitempty"`
	Logprobs            *bool                                           `json:"logprobs,omitempty"`
	MaxCompletionTokens *int64                                          `json:"max_completion_tokens,omitempty"`
	MaxTokens           *int64                                          `json:"max_tokens,omitempty"`
	Metadata            map[string]string                               `json:"metadata,omitempty"`
	Modalities          []ChatCompletionStreamingModality               `json:"modalities,omitempty"`
	N                   *int64                                          `json:"n,omitempty"`
	ParallelToolCalls   *bool                                           `json:"parallel_tool_calls,omitempty"`
	Prediction          *ChatCompletionPredictionContentParam           `json:"prediction,omitempty"`
	PresencePenalty     *float64                                        `json:"presence_penalty,omitempty"`
	ReasoningEffort     *ChatCompletionStreamingReasoningEffort         `json:"reasoning_effort,omitempty"`
	ResponseFormat      *ChatCompletionStreamingResponseFormat          `json:"response_format,omitempty"`
	Seed                *int64                                          `json:"seed,omitempty"`
	ServiceTier         *ChatCompletionStreamingServiceTier             `json:"service_tier,omitempty"`
	Stop                *ChatCompletionStreamingStop                    `json:"stop,omitempty"`
	Store               *bool                                           `json:"store,omitempty"`
	StreamOptions       *ChatCompletionStreamOptionsParam               `json:"stream_options,omitempty"`
	Temperature         *float64                                        `json:"temperature,omitempty"`
	ToolChoice          *ChatCompletionStreamingToolChoiceUnion         `json:"tool_choice,omitempty"`
	Tools               []ChatCompletionToolParam                       `json:"tools,omitempty"`
	TopLogprobs         *int64                                          `json:"top_logprobs,omitempty"`
	TopP                *float64                                        `json:"top_p,omitempty"`
	User                *string                                         `json:"user,omitempty"`
	WebSearchOptions    *WebSearchOptions                               `json:"web_search_options,omitempty"`
	stream              bool                                            `const:"true" json:"stream"`
	Tags                map[string]any                                  `json:"tags,omitempty"`
	ParentSpanID        *string                                         `json:"parent_span_id,omitempty"`
}

func (c ChatCompletionStreaming) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ChatCompletionStreaming) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ChatCompletionStreaming) GetMessages() []ChatCompletionStreamingMessage {
	if o == nil {
		return []ChatCompletionStreamingMessage{}
	}
	return o.Messages
}

func (o *ChatCompletionStreaming) GetModel() *TModel {
	if o == nil {
		return nil
	}
	return o.Model
}

func (o *ChatCompletionStreaming) GetAudio() *ChatCompletionAudioParam {
	if o == nil {
		return nil
	}
	return o.Audio
}

func (o *ChatCompletionStreaming) GetFrequencyPenalty() *float64 {
	if o == nil {
		return nil
	}
	return o.FrequencyPenalty
}

func (o *ChatCompletionStreaming) GetFunctionCall() *ChatCompletionStreamingFunctionCallUnion {
	if o == nil {
		return nil
	}
	return o.FunctionCall
}

func (o *ChatCompletionStreaming) GetFunctions() []OpenaiTypesChatCompletionCreateParamsFunction {
	if o == nil {
		return nil
	}
	return o.Functions
}

func (o *ChatCompletionStreaming) GetLogitBias() map[string]int64 {
	if o == nil {
		return nil
	}
	return o.LogitBias
}

func (o *ChatCompletionStreaming) GetLogprobs() *bool {
	if o == nil {
		return nil
	}
	return o.Logprobs
}

func (o *ChatCompletionStreaming) GetMaxCompletionTokens() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxCompletionTokens
}

func (o *ChatCompletionStreaming) GetMaxTokens() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxTokens
}

func (o *ChatCompletionStreaming) GetMetadata() map[string]string {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *ChatCompletionStreaming) GetModalities() []ChatCompletionStreamingModality {
	if o == nil {
		return nil
	}
	return o.Modalities
}

func (o *ChatCompletionStreaming) GetN() *int64 {
	if o == nil {
		return nil
	}
	return o.N
}

func (o *ChatCompletionStreaming) GetParallelToolCalls() *bool {
	if o == nil {
		return nil
	}
	return o.ParallelToolCalls
}

func (o *ChatCompletionStreaming) GetPrediction() *ChatCompletionPredictionContentParam {
	if o == nil {
		return nil
	}
	return o.Prediction
}

func (o *ChatCompletionStreaming) GetPresencePenalty() *float64 {
	if o == nil {
		return nil
	}
	return o.PresencePenalty
}

func (o *ChatCompletionStreaming) GetReasoningEffort() *ChatCompletionStreamingReasoningEffort {
	if o == nil {
		return nil
	}
	return o.ReasoningEffort
}

func (o *ChatCompletionStreaming) GetResponseFormat() *ChatCompletionStreamingResponseFormat {
	if o == nil {
		return nil
	}
	return o.ResponseFormat
}

func (o *ChatCompletionStreaming) GetSeed() *int64 {
	if o == nil {
		return nil
	}
	return o.Seed
}

func (o *ChatCompletionStreaming) GetServiceTier() *ChatCompletionStreamingServiceTier {
	if o == nil {
		return nil
	}
	return o.ServiceTier
}

func (o *ChatCompletionStreaming) GetStop() *ChatCompletionStreamingStop {
	if o == nil {
		return nil
	}
	return o.Stop
}

func (o *ChatCompletionStreaming) GetStore() *bool {
	if o == nil {
		return nil
	}
	return o.Store
}

func (o *ChatCompletionStreaming) GetStreamOptions() *ChatCompletionStreamOptionsParam {
	if o == nil {
		return nil
	}
	return o.StreamOptions
}

func (o *ChatCompletionStreaming) GetTemperature() *float64 {
	if o == nil {
		return nil
	}
	return o.Temperature
}

func (o *ChatCompletionStreaming) GetToolChoice() *ChatCompletionStreamingToolChoiceUnion {
	if o == nil {
		return nil
	}
	return o.ToolChoice
}

func (o *ChatCompletionStreaming) GetTools() []ChatCompletionToolParam {
	if o == nil {
		return nil
	}
	return o.Tools
}

func (o *ChatCompletionStreaming) GetTopLogprobs() *int64 {
	if o == nil {
		return nil
	}
	return o.TopLogprobs
}

func (o *ChatCompletionStreaming) GetTopP() *float64 {
	if o == nil {
		return nil
	}
	return o.TopP
}

func (o *ChatCompletionStreaming) GetUser() *string {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *ChatCompletionStreaming) GetWebSearchOptions() *WebSearchOptions {
	if o == nil {
		return nil
	}
	return o.WebSearchOptions
}

func (o *ChatCompletionStreaming) GetStream() bool {
	return true
}

func (o *ChatCompletionStreaming) GetTags() map[string]any {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *ChatCompletionStreaming) GetParentSpanID() *string {
	if o == nil {
		return nil
	}
	return o.ParentSpanID
}
