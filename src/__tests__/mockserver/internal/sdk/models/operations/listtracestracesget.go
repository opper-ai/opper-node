// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type ListTracesTracesGetRequest struct {
	// The name of the trace to filter by, the name of a trace is the name of the root span of the trace
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// The offset to start the list from
	Offset *int64 `default:"0" queryParam:"style=form,explode=true,name=offset"`
	// The number of traces to return
	Limit *int64 `default:"100" queryParam:"style=form,explode=true,name=limit"`
}

func (l ListTracesTracesGetRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListTracesTracesGetRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListTracesTracesGetRequest) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ListTracesTracesGetRequest) GetOffset() *int64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *ListTracesTracesGetRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

type ListTracesTracesGetResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful Response
	PaginatedResponseListTracesResponse *components.PaginatedResponseListTracesResponse
}

func (o *ListTracesTracesGetResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListTracesTracesGetResponse) GetPaginatedResponseListTracesResponse() *components.PaginatedResponseListTracesResponse {
	if o == nil {
		return nil
	}
	return o.PaginatedResponseListTracesResponse
}
