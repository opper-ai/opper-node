// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types/stream"
)

type StreamFunctionRevisionFunctionsFunctionIDCallStreamRevisionIDPostRequest struct {
	// The id of the function to call
	FunctionID string `pathParam:"style=simple,explode=false,name=function_id"`
	// The id of the revision to call
	RevisionID                                 string                                                `pathParam:"style=simple,explode=false,name=revision_id"`
	AppAPIPublicV2FunctionsCallFunctionRequest components.AppAPIPublicV2FunctionsCallFunctionRequest `request:"mediaType=application/json"`
}

func (o *StreamFunctionRevisionFunctionsFunctionIDCallStreamRevisionIDPostRequest) GetFunctionID() string {
	if o == nil {
		return ""
	}
	return o.FunctionID
}

func (o *StreamFunctionRevisionFunctionsFunctionIDCallStreamRevisionIDPostRequest) GetRevisionID() string {
	if o == nil {
		return ""
	}
	return o.RevisionID
}

func (o *StreamFunctionRevisionFunctionsFunctionIDCallStreamRevisionIDPostRequest) GetAppAPIPublicV2FunctionsCallFunctionRequest() components.AppAPIPublicV2FunctionsCallFunctionRequest {
	if o == nil {
		return components.AppAPIPublicV2FunctionsCallFunctionRequest{}
	}
	return o.AppAPIPublicV2FunctionsCallFunctionRequest
}

// StreamFunctionRevisionFunctionsFunctionIDCallStreamRevisionIDPostData - The actual data payload containing streaming chunk information
type StreamFunctionRevisionFunctionsFunctionIDCallStreamRevisionIDPostData struct {
	// Incremental text content generated by the model
	Delta *string `json:"delta,omitempty"`
	// Unique identifier for the execution span
	SpanID *string `json:"span_id,omitempty"`
}

func (o *StreamFunctionRevisionFunctionsFunctionIDCallStreamRevisionIDPostData) GetDelta() *string {
	if o == nil {
		return nil
	}
	return o.Delta
}

func (o *StreamFunctionRevisionFunctionsFunctionIDCallStreamRevisionIDPostData) GetSpanID() *string {
	if o == nil {
		return nil
	}
	return o.SpanID
}

// StreamFunctionRevisionFunctionsFunctionIDCallStreamRevisionIDPostResponseBody - Server-Sent Event following the SSE specification
type StreamFunctionRevisionFunctionsFunctionIDCallStreamRevisionIDPostResponseBody struct {
	// Event ID for the SSE event
	ID *string `json:"id,omitempty"`
	// Event type for the SSE event
	Event *string `json:"event,omitempty"`
	// The actual data payload containing streaming chunk information
	Data StreamFunctionRevisionFunctionsFunctionIDCallStreamRevisionIDPostData `json:"data"`
	// Retry interval in milliseconds for the SSE connection
	Retry *int64 `json:"retry,omitempty"`
}

func (o *StreamFunctionRevisionFunctionsFunctionIDCallStreamRevisionIDPostResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *StreamFunctionRevisionFunctionsFunctionIDCallStreamRevisionIDPostResponseBody) GetEvent() *string {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *StreamFunctionRevisionFunctionsFunctionIDCallStreamRevisionIDPostResponseBody) GetData() StreamFunctionRevisionFunctionsFunctionIDCallStreamRevisionIDPostData {
	if o == nil {
		return StreamFunctionRevisionFunctionsFunctionIDCallStreamRevisionIDPostData{}
	}
	return o.Data
}

func (o *StreamFunctionRevisionFunctionsFunctionIDCallStreamRevisionIDPostResponseBody) GetRetry() *int64 {
	if o == nil {
		return nil
	}
	return o.Retry
}

func (o StreamFunctionRevisionFunctionsFunctionIDCallStreamRevisionIDPostResponseBody) GetEventEncoding(event string) (string, error) {
	return "application/json", nil
}

type StreamFunctionRevisionFunctionsFunctionIDCallStreamRevisionIDPostResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Server-Sent Events stream of function execution chunks
	Object  *stream.EventStream[StreamFunctionRevisionFunctionsFunctionIDCallStreamRevisionIDPostResponseBody]
	Headers map[string][]string
}

func (o *StreamFunctionRevisionFunctionsFunctionIDCallStreamRevisionIDPostResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *StreamFunctionRevisionFunctionsFunctionIDCallStreamRevisionIDPostResponse) GetObject() *stream.EventStream[StreamFunctionRevisionFunctionsFunctionIDCallStreamRevisionIDPostResponseBody] {
	if o == nil {
		return nil
	}
	return o.Object
}

func (o *StreamFunctionRevisionFunctionsFunctionIDCallStreamRevisionIDPostResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}
