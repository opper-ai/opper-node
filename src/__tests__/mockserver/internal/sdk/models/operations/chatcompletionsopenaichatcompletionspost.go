// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type PayloadType string

const (
	PayloadTypeChatCompletionNonStreaming PayloadType = "ChatCompletionNonStreaming"
	PayloadTypeChatCompletionStreaming    PayloadType = "ChatCompletionStreaming"
)

type Payload struct {
	ChatCompletionNonStreaming *components.ChatCompletionNonStreaming `queryParam:"inline"`
	ChatCompletionStreaming    *components.ChatCompletionStreaming    `queryParam:"inline"`

	Type PayloadType
}

func CreatePayloadChatCompletionNonStreaming(chatCompletionNonStreaming components.ChatCompletionNonStreaming) Payload {
	typ := PayloadTypeChatCompletionNonStreaming

	return Payload{
		ChatCompletionNonStreaming: &chatCompletionNonStreaming,
		Type:                       typ,
	}
}

func CreatePayloadChatCompletionStreaming(chatCompletionStreaming components.ChatCompletionStreaming) Payload {
	typ := PayloadTypeChatCompletionStreaming

	return Payload{
		ChatCompletionStreaming: &chatCompletionStreaming,
		Type:                    typ,
	}
}

func (u *Payload) UnmarshalJSON(data []byte) error {

	var chatCompletionNonStreaming components.ChatCompletionNonStreaming = components.ChatCompletionNonStreaming{}
	if err := utils.UnmarshalJSON(data, &chatCompletionNonStreaming, "", true, true); err == nil {
		u.ChatCompletionNonStreaming = &chatCompletionNonStreaming
		u.Type = PayloadTypeChatCompletionNonStreaming
		return nil
	}

	var chatCompletionStreaming components.ChatCompletionStreaming = components.ChatCompletionStreaming{}
	if err := utils.UnmarshalJSON(data, &chatCompletionStreaming, "", true, true); err == nil {
		u.ChatCompletionStreaming = &chatCompletionStreaming
		u.Type = PayloadTypeChatCompletionStreaming
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Payload", string(data))
}

func (u Payload) MarshalJSON() ([]byte, error) {
	if u.ChatCompletionNonStreaming != nil {
		return utils.MarshalJSON(u.ChatCompletionNonStreaming, "", true)
	}

	if u.ChatCompletionStreaming != nil {
		return utils.MarshalJSON(u.ChatCompletionStreaming, "", true)
	}

	return nil, errors.New("could not marshal union type Payload: all fields are null")
}

type ChatCompletionsOpenaiChatCompletionsPostResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful Response
	ChatCompletion *components.ChatCompletion
}

func (o *ChatCompletionsOpenaiChatCompletionsPostResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ChatCompletionsOpenaiChatCompletionsPostResponse) GetChatCompletion() *components.ChatCompletion {
	if o == nil {
		return nil
	}
	return o.ChatCompletion
}
