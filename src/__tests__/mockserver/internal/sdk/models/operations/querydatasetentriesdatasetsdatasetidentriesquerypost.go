// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type QueryDatasetEntriesDatasetsDatasetIDEntriesQueryPostRequest struct {
	// The id of the dataset
	DatasetID string `pathParam:"style=simple,explode=false,name=dataset_id"`
	// The query to search for
	Query string `queryParam:"style=form,explode=true,name=query"`
	// The limit of the entries to get
	Limit *int64 `default:"5" queryParam:"style=form,explode=true,name=limit"`
}

func (q QueryDatasetEntriesDatasetsDatasetIDEntriesQueryPostRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(q, "", false)
}

func (q *QueryDatasetEntriesDatasetsDatasetIDEntriesQueryPostRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &q, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *QueryDatasetEntriesDatasetsDatasetIDEntriesQueryPostRequest) GetDatasetID() string {
	if o == nil {
		return ""
	}
	return o.DatasetID
}

func (o *QueryDatasetEntriesDatasetsDatasetIDEntriesQueryPostRequest) GetQuery() string {
	if o == nil {
		return ""
	}
	return o.Query
}

func (o *QueryDatasetEntriesDatasetsDatasetIDEntriesQueryPostRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

type QueryDatasetEntriesDatasetsDatasetIDEntriesQueryPostResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful Response
	ResponseQueryDatasetEntriesDatasetsDatasetIDEntriesQueryPost []components.QueryDatasetEntriesResponse
}

func (o *QueryDatasetEntriesDatasetsDatasetIDEntriesQueryPostResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *QueryDatasetEntriesDatasetsDatasetIDEntriesQueryPostResponse) GetResponseQueryDatasetEntriesDatasetsDatasetIDEntriesQueryPost() []components.QueryDatasetEntriesResponse {
	if o == nil {
		return nil
	}
	return o.ResponseQueryDatasetEntriesDatasetsDatasetIDEntriesQueryPost
}
