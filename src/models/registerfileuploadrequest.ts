/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  TextProcessingConfiguration,
  TextProcessingConfiguration$inboundSchema,
  TextProcessingConfiguration$Outbound,
  TextProcessingConfiguration$outboundSchema,
} from "./textprocessingconfiguration.js";

export type RegisterFileUploadRequest = {
  /**
   * The filename of the file to register
   */
  filename: string;
  /**
   * The id of the file to register
   */
  fileId: string;
  /**
   * The content type of the file to register
   */
  contentType: string;
  /**
   * The configuration for the file to register
   */
  configuration?: TextProcessingConfiguration | null | undefined;
};

/** @internal */
export const RegisterFileUploadRequest$inboundSchema: z.ZodType<
  RegisterFileUploadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  filename: z.string(),
  file_id: z.string(),
  content_type: z.string(),
  configuration: z.nullable(TextProcessingConfiguration$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
    "content_type": "contentType",
  });
});

/** @internal */
export type RegisterFileUploadRequest$Outbound = {
  filename: string;
  file_id: string;
  content_type: string;
  configuration?: TextProcessingConfiguration$Outbound | null | undefined;
};

/** @internal */
export const RegisterFileUploadRequest$outboundSchema: z.ZodType<
  RegisterFileUploadRequest$Outbound,
  z.ZodTypeDef,
  RegisterFileUploadRequest
> = z.object({
  filename: z.string(),
  fileId: z.string(),
  contentType: z.string(),
  configuration: z.nullable(TextProcessingConfiguration$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
    contentType: "content_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegisterFileUploadRequest$ {
  /** @deprecated use `RegisterFileUploadRequest$inboundSchema` instead. */
  export const inboundSchema = RegisterFileUploadRequest$inboundSchema;
  /** @deprecated use `RegisterFileUploadRequest$outboundSchema` instead. */
  export const outboundSchema = RegisterFileUploadRequest$outboundSchema;
  /** @deprecated use `RegisterFileUploadRequest$Outbound` instead. */
  export type Outbound = RegisterFileUploadRequest$Outbound;
}

export function registerFileUploadRequestToJSON(
  registerFileUploadRequest: RegisterFileUploadRequest,
): string {
  return JSON.stringify(
    RegisterFileUploadRequest$outboundSchema.parse(registerFileUploadRequest),
  );
}

export function registerFileUploadRequestFromJSON(
  jsonString: string,
): SafeParseResult<RegisterFileUploadRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RegisterFileUploadRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RegisterFileUploadRequest' from JSON`,
  );
}
