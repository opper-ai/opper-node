/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type WebSearchOptionsUserLocationApproximate = {
  city?: string | undefined;
  country?: string | undefined;
  region?: string | undefined;
  timezone?: string | undefined;
};

/** @internal */
export const WebSearchOptionsUserLocationApproximate$inboundSchema: z.ZodType<
  WebSearchOptionsUserLocationApproximate,
  z.ZodTypeDef,
  unknown
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  region: z.string().optional(),
  timezone: z.string().optional(),
});

/** @internal */
export type WebSearchOptionsUserLocationApproximate$Outbound = {
  city?: string | undefined;
  country?: string | undefined;
  region?: string | undefined;
  timezone?: string | undefined;
};

/** @internal */
export const WebSearchOptionsUserLocationApproximate$outboundSchema: z.ZodType<
  WebSearchOptionsUserLocationApproximate$Outbound,
  z.ZodTypeDef,
  WebSearchOptionsUserLocationApproximate
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  region: z.string().optional(),
  timezone: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebSearchOptionsUserLocationApproximate$ {
  /** @deprecated use `WebSearchOptionsUserLocationApproximate$inboundSchema` instead. */
  export const inboundSchema =
    WebSearchOptionsUserLocationApproximate$inboundSchema;
  /** @deprecated use `WebSearchOptionsUserLocationApproximate$outboundSchema` instead. */
  export const outboundSchema =
    WebSearchOptionsUserLocationApproximate$outboundSchema;
  /** @deprecated use `WebSearchOptionsUserLocationApproximate$Outbound` instead. */
  export type Outbound = WebSearchOptionsUserLocationApproximate$Outbound;
}

export function webSearchOptionsUserLocationApproximateToJSON(
  webSearchOptionsUserLocationApproximate:
    WebSearchOptionsUserLocationApproximate,
): string {
  return JSON.stringify(
    WebSearchOptionsUserLocationApproximate$outboundSchema.parse(
      webSearchOptionsUserLocationApproximate,
    ),
  );
}

export function webSearchOptionsUserLocationApproximateFromJSON(
  jsonString: string,
): SafeParseResult<
  WebSearchOptionsUserLocationApproximate,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WebSearchOptionsUserLocationApproximate$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WebSearchOptionsUserLocationApproximate' from JSON`,
  );
}
