/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type UpdateSpanMetricRequest = {
  /**
   * The dimension of the metric
   */
  dimension?: string | null | undefined;
  /**
   * The value of the metric
   */
  value?: number | null | undefined;
  /**
   * A comment about the metric, e.g. a description of the metric
   */
  comment?: string | null | undefined;
};

/** @internal */
export const UpdateSpanMetricRequest$inboundSchema: z.ZodType<
  UpdateSpanMetricRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  dimension: z.nullable(z.string()).optional(),
  value: z.nullable(z.number()).optional(),
  comment: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateSpanMetricRequest$Outbound = {
  dimension?: string | null | undefined;
  value?: number | null | undefined;
  comment?: string | null | undefined;
};

/** @internal */
export const UpdateSpanMetricRequest$outboundSchema: z.ZodType<
  UpdateSpanMetricRequest$Outbound,
  z.ZodTypeDef,
  UpdateSpanMetricRequest
> = z.object({
  dimension: z.nullable(z.string()).optional(),
  value: z.nullable(z.number()).optional(),
  comment: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSpanMetricRequest$ {
  /** @deprecated use `UpdateSpanMetricRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSpanMetricRequest$inboundSchema;
  /** @deprecated use `UpdateSpanMetricRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSpanMetricRequest$outboundSchema;
  /** @deprecated use `UpdateSpanMetricRequest$Outbound` instead. */
  export type Outbound = UpdateSpanMetricRequest$Outbound;
}

export function updateSpanMetricRequestToJSON(
  updateSpanMetricRequest: UpdateSpanMetricRequest,
): string {
  return JSON.stringify(
    UpdateSpanMetricRequest$outboundSchema.parse(updateSpanMetricRequest),
  );
}

export function updateSpanMetricRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSpanMetricRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSpanMetricRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSpanMetricRequest' from JSON`,
  );
}
