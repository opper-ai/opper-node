/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import { Op, Op$inboundSchema, Op$outboundSchema } from "./op.js";

export type Value1 = string | number | number;

/**
 * The value to filter on
 */
export type Value2 = string | number | number | Array<string | number | number>;

export type Filter = {
  /**
   * The field to filter on
   */
  field: string;
  operation: Op;
  /**
   * The value to filter on
   */
  value: string | number | number | Array<string | number | number>;
};

/** @internal */
export const Value1$inboundSchema: z.ZodType<Value1, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.number().int(), z.number()]);

/** @internal */
export type Value1$Outbound = string | number | number;

/** @internal */
export const Value1$outboundSchema: z.ZodType<
  Value1$Outbound,
  z.ZodTypeDef,
  Value1
> = z.union([z.string(), z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value1$ {
  /** @deprecated use `Value1$inboundSchema` instead. */
  export const inboundSchema = Value1$inboundSchema;
  /** @deprecated use `Value1$outboundSchema` instead. */
  export const outboundSchema = Value1$outboundSchema;
  /** @deprecated use `Value1$Outbound` instead. */
  export type Outbound = Value1$Outbound;
}

export function value1ToJSON(value1: Value1): string {
  return JSON.stringify(Value1$outboundSchema.parse(value1));
}

export function value1FromJSON(
  jsonString: string,
): SafeParseResult<Value1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value1' from JSON`,
  );
}

/** @internal */
export const Value2$inboundSchema: z.ZodType<Value2, z.ZodTypeDef, unknown> = z
  .union([
    z.string(),
    z.number().int(),
    z.number(),
    z.array(z.union([z.string(), z.number().int(), z.number()])),
  ]);

/** @internal */
export type Value2$Outbound =
  | string
  | number
  | number
  | Array<string | number | number>;

/** @internal */
export const Value2$outboundSchema: z.ZodType<
  Value2$Outbound,
  z.ZodTypeDef,
  Value2
> = z.union([
  z.string(),
  z.number().int(),
  z.number(),
  z.array(z.union([z.string(), z.number().int(), z.number()])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value2$ {
  /** @deprecated use `Value2$inboundSchema` instead. */
  export const inboundSchema = Value2$inboundSchema;
  /** @deprecated use `Value2$outboundSchema` instead. */
  export const outboundSchema = Value2$outboundSchema;
  /** @deprecated use `Value2$Outbound` instead. */
  export type Outbound = Value2$Outbound;
}

export function value2ToJSON(value2: Value2): string {
  return JSON.stringify(Value2$outboundSchema.parse(value2));
}

export function value2FromJSON(
  jsonString: string,
): SafeParseResult<Value2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value2' from JSON`,
  );
}

/** @internal */
export const Filter$inboundSchema: z.ZodType<Filter, z.ZodTypeDef, unknown> = z
  .object({
    field: z.string(),
    operation: Op$inboundSchema,
    value: z.union([
      z.string(),
      z.number().int(),
      z.number(),
      z.array(z.union([z.string(), z.number().int(), z.number()])),
    ]),
  });

/** @internal */
export type Filter$Outbound = {
  field: string;
  operation: string;
  value: string | number | number | Array<string | number | number>;
};

/** @internal */
export const Filter$outboundSchema: z.ZodType<
  Filter$Outbound,
  z.ZodTypeDef,
  Filter
> = z.object({
  field: z.string(),
  operation: Op$outboundSchema,
  value: z.union([
    z.string(),
    z.number().int(),
    z.number(),
    z.array(z.union([z.string(), z.number().int(), z.number()])),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filter$ {
  /** @deprecated use `Filter$inboundSchema` instead. */
  export const inboundSchema = Filter$inboundSchema;
  /** @deprecated use `Filter$outboundSchema` instead. */
  export const outboundSchema = Filter$outboundSchema;
  /** @deprecated use `Filter$Outbound` instead. */
  export type Outbound = Filter$Outbound;
}

export function filterToJSON(filter: Filter): string {
  return JSON.stringify(Filter$outboundSchema.parse(filter));
}

export function filterFromJSON(
  jsonString: string,
): SafeParseResult<Filter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filter' from JSON`,
  );
}
