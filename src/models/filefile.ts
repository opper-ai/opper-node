/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type FileFile = {
  fileData?: string | undefined;
  fileId?: string | undefined;
  filename?: string | undefined;
};

/** @internal */
export const FileFile$inboundSchema: z.ZodType<
  FileFile,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_data: z.string().optional(),
  file_id: z.string().optional(),
  filename: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "file_data": "fileData",
    "file_id": "fileId",
  });
});

/** @internal */
export type FileFile$Outbound = {
  file_data?: string | undefined;
  file_id?: string | undefined;
  filename?: string | undefined;
};

/** @internal */
export const FileFile$outboundSchema: z.ZodType<
  FileFile$Outbound,
  z.ZodTypeDef,
  FileFile
> = z.object({
  fileData: z.string().optional(),
  fileId: z.string().optional(),
  filename: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    fileData: "file_data",
    fileId: "file_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileFile$ {
  /** @deprecated use `FileFile$inboundSchema` instead. */
  export const inboundSchema = FileFile$inboundSchema;
  /** @deprecated use `FileFile$outboundSchema` instead. */
  export const outboundSchema = FileFile$outboundSchema;
  /** @deprecated use `FileFile$Outbound` instead. */
  export type Outbound = FileFile$Outbound;
}

export function fileFileToJSON(fileFile: FileFile): string {
  return JSON.stringify(FileFile$outboundSchema.parse(fileFile));
}

export function fileFileFromJSON(
  jsonString: string,
): SafeParseResult<FileFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileFile' from JSON`,
  );
}
