/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Filter,
  Filter$inboundSchema,
  Filter$Outbound,
  Filter$outboundSchema,
} from "./filter.js";

export type DeleteKnowledgeBaseRequest = {
  /**
   * Filters to apply for deletion. If no filters are provided, the entire knowledge base will be deleted.
   */
  filters?: Array<Filter> | null | undefined;
};

/** @internal */
export const DeleteKnowledgeBaseRequest$inboundSchema: z.ZodType<
  DeleteKnowledgeBaseRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  filters: z.nullable(z.array(Filter$inboundSchema)).optional(),
});

/** @internal */
export type DeleteKnowledgeBaseRequest$Outbound = {
  filters?: Array<Filter$Outbound> | null | undefined;
};

/** @internal */
export const DeleteKnowledgeBaseRequest$outboundSchema: z.ZodType<
  DeleteKnowledgeBaseRequest$Outbound,
  z.ZodTypeDef,
  DeleteKnowledgeBaseRequest
> = z.object({
  filters: z.nullable(z.array(Filter$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteKnowledgeBaseRequest$ {
  /** @deprecated use `DeleteKnowledgeBaseRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteKnowledgeBaseRequest$inboundSchema;
  /** @deprecated use `DeleteKnowledgeBaseRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteKnowledgeBaseRequest$outboundSchema;
  /** @deprecated use `DeleteKnowledgeBaseRequest$Outbound` instead. */
  export type Outbound = DeleteKnowledgeBaseRequest$Outbound;
}

export function deleteKnowledgeBaseRequestToJSON(
  deleteKnowledgeBaseRequest: DeleteKnowledgeBaseRequest,
): string {
  return JSON.stringify(
    DeleteKnowledgeBaseRequest$outboundSchema.parse(deleteKnowledgeBaseRequest),
  );
}

export function deleteKnowledgeBaseRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteKnowledgeBaseRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteKnowledgeBaseRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteKnowledgeBaseRequest' from JSON`,
  );
}
