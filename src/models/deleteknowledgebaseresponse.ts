/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type DeleteKnowledgeBaseResponse = {
  /**
   * The number of documents deleted
   */
  deletedCount: number;
};

/** @internal */
export const DeleteKnowledgeBaseResponse$inboundSchema: z.ZodType<
  DeleteKnowledgeBaseResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  deleted_count: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "deleted_count": "deletedCount",
  });
});

/** @internal */
export type DeleteKnowledgeBaseResponse$Outbound = {
  deleted_count: number;
};

/** @internal */
export const DeleteKnowledgeBaseResponse$outboundSchema: z.ZodType<
  DeleteKnowledgeBaseResponse$Outbound,
  z.ZodTypeDef,
  DeleteKnowledgeBaseResponse
> = z.object({
  deletedCount: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    deletedCount: "deleted_count",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteKnowledgeBaseResponse$ {
  /** @deprecated use `DeleteKnowledgeBaseResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteKnowledgeBaseResponse$inboundSchema;
  /** @deprecated use `DeleteKnowledgeBaseResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteKnowledgeBaseResponse$outboundSchema;
  /** @deprecated use `DeleteKnowledgeBaseResponse$Outbound` instead. */
  export type Outbound = DeleteKnowledgeBaseResponse$Outbound;
}

export function deleteKnowledgeBaseResponseToJSON(
  deleteKnowledgeBaseResponse: DeleteKnowledgeBaseResponse,
): string {
  return JSON.stringify(
    DeleteKnowledgeBaseResponse$outboundSchema.parse(
      deleteKnowledgeBaseResponse,
    ),
  );
}

export function deleteKnowledgeBaseResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteKnowledgeBaseResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteKnowledgeBaseResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteKnowledgeBaseResponse' from JSON`,
  );
}
