/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type RegisterFileUploadResponse = {
  id: string;
  key: string;
  originalFilename: string;
  documentId: number;
};

/** @internal */
export const RegisterFileUploadResponse$inboundSchema: z.ZodType<
  RegisterFileUploadResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  key: z.string(),
  original_filename: z.string(),
  document_id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "original_filename": "originalFilename",
    "document_id": "documentId",
  });
});

/** @internal */
export type RegisterFileUploadResponse$Outbound = {
  id: string;
  key: string;
  original_filename: string;
  document_id: number;
};

/** @internal */
export const RegisterFileUploadResponse$outboundSchema: z.ZodType<
  RegisterFileUploadResponse$Outbound,
  z.ZodTypeDef,
  RegisterFileUploadResponse
> = z.object({
  id: z.string(),
  key: z.string(),
  originalFilename: z.string(),
  documentId: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    originalFilename: "original_filename",
    documentId: "document_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegisterFileUploadResponse$ {
  /** @deprecated use `RegisterFileUploadResponse$inboundSchema` instead. */
  export const inboundSchema = RegisterFileUploadResponse$inboundSchema;
  /** @deprecated use `RegisterFileUploadResponse$outboundSchema` instead. */
  export const outboundSchema = RegisterFileUploadResponse$outboundSchema;
  /** @deprecated use `RegisterFileUploadResponse$Outbound` instead. */
  export type Outbound = RegisterFileUploadResponse$Outbound;
}

export function registerFileUploadResponseToJSON(
  registerFileUploadResponse: RegisterFileUploadResponse,
): string {
  return JSON.stringify(
    RegisterFileUploadResponse$outboundSchema.parse(registerFileUploadResponse),
  );
}

export function registerFileUploadResponseFromJSON(
  jsonString: string,
): SafeParseResult<RegisterFileUploadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RegisterFileUploadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RegisterFileUploadResponse' from JSON`,
  );
}
