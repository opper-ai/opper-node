/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CompletionTokensDetails = {
  acceptedPredictionTokens?: number | null | undefined;
  audioTokens?: number | null | undefined;
  reasoningTokens?: number | null | undefined;
  rejectedPredictionTokens?: number | null | undefined;
  additionalProperties?: { [k: string]: any };
};

/** @internal */
export const CompletionTokensDetails$inboundSchema: z.ZodType<
  CompletionTokensDetails,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    accepted_prediction_tokens: z.nullable(z.number().int()).optional(),
    audio_tokens: z.nullable(z.number().int()).optional(),
    reasoning_tokens: z.nullable(z.number().int()).optional(),
    rejected_prediction_tokens: z.nullable(z.number().int()).optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "accepted_prediction_tokens": "acceptedPredictionTokens",
    "audio_tokens": "audioTokens",
    "reasoning_tokens": "reasoningTokens",
    "rejected_prediction_tokens": "rejectedPredictionTokens",
  });
});

/** @internal */
export type CompletionTokensDetails$Outbound = {
  accepted_prediction_tokens?: number | null | undefined;
  audio_tokens?: number | null | undefined;
  reasoning_tokens?: number | null | undefined;
  rejected_prediction_tokens?: number | null | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const CompletionTokensDetails$outboundSchema: z.ZodType<
  CompletionTokensDetails$Outbound,
  z.ZodTypeDef,
  CompletionTokensDetails
> = z.object({
  acceptedPredictionTokens: z.nullable(z.number().int()).optional(),
  audioTokens: z.nullable(z.number().int()).optional(),
  reasoningTokens: z.nullable(z.number().int()).optional(),
  rejectedPredictionTokens: z.nullable(z.number().int()).optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      acceptedPredictionTokens: "accepted_prediction_tokens",
      audioTokens: "audio_tokens",
      reasoningTokens: "reasoning_tokens",
      rejectedPredictionTokens: "rejected_prediction_tokens",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionTokensDetails$ {
  /** @deprecated use `CompletionTokensDetails$inboundSchema` instead. */
  export const inboundSchema = CompletionTokensDetails$inboundSchema;
  /** @deprecated use `CompletionTokensDetails$outboundSchema` instead. */
  export const outboundSchema = CompletionTokensDetails$outboundSchema;
  /** @deprecated use `CompletionTokensDetails$Outbound` instead. */
  export type Outbound = CompletionTokensDetails$Outbound;
}

export function completionTokensDetailsToJSON(
  completionTokensDetails: CompletionTokensDetails,
): string {
  return JSON.stringify(
    CompletionTokensDetails$outboundSchema.parse(completionTokensDetails),
  );
}

export function completionTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<CompletionTokensDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompletionTokensDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompletionTokensDetails' from JSON`,
  );
}
