/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CreateKnowledgeBaseResponse = {
  id: string;
  name: string;
  createdAt: Date;
  embeddingModel: string;
};

/** @internal */
export const CreateKnowledgeBaseResponse$inboundSchema: z.ZodType<
  CreateKnowledgeBaseResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  embedding_model: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "embedding_model": "embeddingModel",
  });
});

/** @internal */
export type CreateKnowledgeBaseResponse$Outbound = {
  id: string;
  name: string;
  created_at: string;
  embedding_model: string;
};

/** @internal */
export const CreateKnowledgeBaseResponse$outboundSchema: z.ZodType<
  CreateKnowledgeBaseResponse$Outbound,
  z.ZodTypeDef,
  CreateKnowledgeBaseResponse
> = z.object({
  id: z.string(),
  name: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  embeddingModel: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    embeddingModel: "embedding_model",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateKnowledgeBaseResponse$ {
  /** @deprecated use `CreateKnowledgeBaseResponse$inboundSchema` instead. */
  export const inboundSchema = CreateKnowledgeBaseResponse$inboundSchema;
  /** @deprecated use `CreateKnowledgeBaseResponse$outboundSchema` instead. */
  export const outboundSchema = CreateKnowledgeBaseResponse$outboundSchema;
  /** @deprecated use `CreateKnowledgeBaseResponse$Outbound` instead. */
  export type Outbound = CreateKnowledgeBaseResponse$Outbound;
}

export function createKnowledgeBaseResponseToJSON(
  createKnowledgeBaseResponse: CreateKnowledgeBaseResponse,
): string {
  return JSON.stringify(
    CreateKnowledgeBaseResponse$outboundSchema.parse(
      createKnowledgeBaseResponse,
    ),
  );
}

export function createKnowledgeBaseResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateKnowledgeBaseResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateKnowledgeBaseResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateKnowledgeBaseResponse' from JSON`,
  );
}
