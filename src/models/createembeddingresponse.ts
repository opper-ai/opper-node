/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CreateEmbeddingResponse = {
  /**
   * The model that was used to create the embedding
   */
  model: string;
  /**
   * The embedding data
   */
  data: Array<{ [k: string]: any }>;
  /**
   * The usage information
   */
  usage: { [k: string]: any };
};

/** @internal */
export const CreateEmbeddingResponse$inboundSchema: z.ZodType<
  CreateEmbeddingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.string(),
  data: z.array(z.record(z.any())),
  usage: z.record(z.any()),
});

/** @internal */
export type CreateEmbeddingResponse$Outbound = {
  model: string;
  data: Array<{ [k: string]: any }>;
  usage: { [k: string]: any };
};

/** @internal */
export const CreateEmbeddingResponse$outboundSchema: z.ZodType<
  CreateEmbeddingResponse$Outbound,
  z.ZodTypeDef,
  CreateEmbeddingResponse
> = z.object({
  model: z.string(),
  data: z.array(z.record(z.any())),
  usage: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEmbeddingResponse$ {
  /** @deprecated use `CreateEmbeddingResponse$inboundSchema` instead. */
  export const inboundSchema = CreateEmbeddingResponse$inboundSchema;
  /** @deprecated use `CreateEmbeddingResponse$outboundSchema` instead. */
  export const outboundSchema = CreateEmbeddingResponse$outboundSchema;
  /** @deprecated use `CreateEmbeddingResponse$Outbound` instead. */
  export type Outbound = CreateEmbeddingResponse$Outbound;
}

export function createEmbeddingResponseToJSON(
  createEmbeddingResponse: CreateEmbeddingResponse,
): string {
  return JSON.stringify(
    CreateEmbeddingResponse$outboundSchema.parse(createEmbeddingResponse),
  );
}

export function createEmbeddingResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateEmbeddingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEmbeddingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEmbeddingResponse' from JSON`,
  );
}
