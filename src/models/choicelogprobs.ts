/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatCompletionTokenLogprob,
  ChatCompletionTokenLogprob$inboundSchema,
  ChatCompletionTokenLogprob$Outbound,
  ChatCompletionTokenLogprob$outboundSchema,
} from "./chatcompletiontokenlogprob.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ChoiceLogprobs = {
  content?: Array<ChatCompletionTokenLogprob> | null | undefined;
  refusal?: Array<ChatCompletionTokenLogprob> | null | undefined;
  additionalProperties?: { [k: string]: any };
};

/** @internal */
export const ChoiceLogprobs$inboundSchema: z.ZodType<
  ChoiceLogprobs,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    content: z.nullable(z.array(ChatCompletionTokenLogprob$inboundSchema))
      .optional(),
    refusal: z.nullable(z.array(ChatCompletionTokenLogprob$inboundSchema))
      .optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type ChoiceLogprobs$Outbound = {
  content?: Array<ChatCompletionTokenLogprob$Outbound> | null | undefined;
  refusal?: Array<ChatCompletionTokenLogprob$Outbound> | null | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const ChoiceLogprobs$outboundSchema: z.ZodType<
  ChoiceLogprobs$Outbound,
  z.ZodTypeDef,
  ChoiceLogprobs
> = z.object({
  content: z.nullable(z.array(ChatCompletionTokenLogprob$outboundSchema))
    .optional(),
  refusal: z.nullable(z.array(ChatCompletionTokenLogprob$outboundSchema))
    .optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChoiceLogprobs$ {
  /** @deprecated use `ChoiceLogprobs$inboundSchema` instead. */
  export const inboundSchema = ChoiceLogprobs$inboundSchema;
  /** @deprecated use `ChoiceLogprobs$outboundSchema` instead. */
  export const outboundSchema = ChoiceLogprobs$outboundSchema;
  /** @deprecated use `ChoiceLogprobs$Outbound` instead. */
  export type Outbound = ChoiceLogprobs$Outbound;
}

export function choiceLogprobsToJSON(choiceLogprobs: ChoiceLogprobs): string {
  return JSON.stringify(ChoiceLogprobs$outboundSchema.parse(choiceLogprobs));
}

export function choiceLogprobsFromJSON(
  jsonString: string,
): SafeParseResult<ChoiceLogprobs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChoiceLogprobs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChoiceLogprobs' from JSON`,
  );
}
