/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  TextProcessingConfiguration,
  TextProcessingConfiguration$inboundSchema,
  TextProcessingConfiguration$Outbound,
  TextProcessingConfiguration$outboundSchema,
} from "./textprocessingconfiguration.js";

export type AddRequest = {
  /**
   * The key of the document
   */
  key?: string | null | undefined;
  content: string;
  /**
   * The metadata of the document
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * The configuration for the document
   */
  configuration?: TextProcessingConfiguration | null | undefined;
};

/** @internal */
export const AddRequest$inboundSchema: z.ZodType<
  AddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.nullable(z.string()).optional(),
  content: z.string(),
  metadata: z.record(z.any()).optional(),
  configuration: z.nullable(TextProcessingConfiguration$inboundSchema)
    .optional(),
});

/** @internal */
export type AddRequest$Outbound = {
  key?: string | null | undefined;
  content: string;
  metadata?: { [k: string]: any } | undefined;
  configuration?: TextProcessingConfiguration$Outbound | null | undefined;
};

/** @internal */
export const AddRequest$outboundSchema: z.ZodType<
  AddRequest$Outbound,
  z.ZodTypeDef,
  AddRequest
> = z.object({
  key: z.nullable(z.string()).optional(),
  content: z.string(),
  metadata: z.record(z.any()).optional(),
  configuration: z.nullable(TextProcessingConfiguration$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddRequest$ {
  /** @deprecated use `AddRequest$inboundSchema` instead. */
  export const inboundSchema = AddRequest$inboundSchema;
  /** @deprecated use `AddRequest$outboundSchema` instead. */
  export const outboundSchema = AddRequest$outboundSchema;
  /** @deprecated use `AddRequest$Outbound` instead. */
  export type Outbound = AddRequest$Outbound;
}

export function addRequestToJSON(addRequest: AddRequest): string {
  return JSON.stringify(AddRequest$outboundSchema.parse(addRequest));
}

export function addRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddRequest' from JSON`,
  );
}
