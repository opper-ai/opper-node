/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Model,
  Model$inboundSchema,
  Model$Outbound,
  Model$outboundSchema,
} from "./model.js";

export type TModel1 = Model | string | { [k: string]: any };

export type TModel =
  | Model
  | string
  | { [k: string]: any }
  | Array<Model | string | { [k: string]: any }>;

/** @internal */
export const TModel1$inboundSchema: z.ZodType<TModel1, z.ZodTypeDef, unknown> =
  z.union([Model$inboundSchema, z.string(), z.record(z.any())]);

/** @internal */
export type TModel1$Outbound = Model$Outbound | string | { [k: string]: any };

/** @internal */
export const TModel1$outboundSchema: z.ZodType<
  TModel1$Outbound,
  z.ZodTypeDef,
  TModel1
> = z.union([Model$outboundSchema, z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TModel1$ {
  /** @deprecated use `TModel1$inboundSchema` instead. */
  export const inboundSchema = TModel1$inboundSchema;
  /** @deprecated use `TModel1$outboundSchema` instead. */
  export const outboundSchema = TModel1$outboundSchema;
  /** @deprecated use `TModel1$Outbound` instead. */
  export type Outbound = TModel1$Outbound;
}

export function tModel1ToJSON(tModel1: TModel1): string {
  return JSON.stringify(TModel1$outboundSchema.parse(tModel1));
}

export function tModel1FromJSON(
  jsonString: string,
): SafeParseResult<TModel1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TModel1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TModel1' from JSON`,
  );
}

/** @internal */
export const TModel$inboundSchema: z.ZodType<TModel, z.ZodTypeDef, unknown> = z
  .union([
    Model$inboundSchema,
    z.string(),
    z.record(z.any()),
    z.array(z.union([Model$inboundSchema, z.string(), z.record(z.any())])),
  ]);

/** @internal */
export type TModel$Outbound =
  | Model$Outbound
  | string
  | { [k: string]: any }
  | Array<Model$Outbound | string | { [k: string]: any }>;

/** @internal */
export const TModel$outboundSchema: z.ZodType<
  TModel$Outbound,
  z.ZodTypeDef,
  TModel
> = z.union([
  Model$outboundSchema,
  z.string(),
  z.record(z.any()),
  z.array(z.union([Model$outboundSchema, z.string(), z.record(z.any())])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TModel$ {
  /** @deprecated use `TModel$inboundSchema` instead. */
  export const inboundSchema = TModel$inboundSchema;
  /** @deprecated use `TModel$outboundSchema` instead. */
  export const outboundSchema = TModel$outboundSchema;
  /** @deprecated use `TModel$Outbound` instead. */
  export type Outbound = TModel$Outbound;
}

export function tModelToJSON(tModel: TModel): string {
  return JSON.stringify(TModel$outboundSchema.parse(tModel));
}

export function tModelFromJSON(
  jsonString: string,
): SafeParseResult<TModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TModel' from JSON`,
  );
}
