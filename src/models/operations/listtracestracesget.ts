/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListTracesTracesGetRequest = {
  /**
   * The name of the trace to filter by, the name of a trace is the name of the root span of the trace
   */
  name?: string | null | undefined;
  /**
   * The offset to start the list from
   */
  offset?: number | undefined;
  /**
   * The number of traces to return
   */
  limit?: number | undefined;
};

/** @internal */
export const ListTracesTracesGetRequest$inboundSchema: z.ZodType<
  ListTracesTracesGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  offset: z.number().int().default(0),
  limit: z.number().int().default(100),
});

/** @internal */
export type ListTracesTracesGetRequest$Outbound = {
  name?: string | null | undefined;
  offset: number;
  limit: number;
};

/** @internal */
export const ListTracesTracesGetRequest$outboundSchema: z.ZodType<
  ListTracesTracesGetRequest$Outbound,
  z.ZodTypeDef,
  ListTracesTracesGetRequest
> = z.object({
  name: z.nullable(z.string()).optional(),
  offset: z.number().int().default(0),
  limit: z.number().int().default(100),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTracesTracesGetRequest$ {
  /** @deprecated use `ListTracesTracesGetRequest$inboundSchema` instead. */
  export const inboundSchema = ListTracesTracesGetRequest$inboundSchema;
  /** @deprecated use `ListTracesTracesGetRequest$outboundSchema` instead. */
  export const outboundSchema = ListTracesTracesGetRequest$outboundSchema;
  /** @deprecated use `ListTracesTracesGetRequest$Outbound` instead. */
  export type Outbound = ListTracesTracesGetRequest$Outbound;
}

export function listTracesTracesGetRequestToJSON(
  listTracesTracesGetRequest: ListTracesTracesGetRequest,
): string {
  return JSON.stringify(
    ListTracesTracesGetRequest$outboundSchema.parse(listTracesTracesGetRequest),
  );
}

export function listTracesTracesGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTracesTracesGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTracesTracesGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTracesTracesGetRequest' from JSON`,
  );
}
