/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteModelAliasModelsAliasesAliasIdDeleteRequest = {
  /**
   * The ID of the model alias to delete
   */
  aliasId: string;
};

/** @internal */
export const DeleteModelAliasModelsAliasesAliasIdDeleteRequest$inboundSchema:
  z.ZodType<
    DeleteModelAliasModelsAliasesAliasIdDeleteRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    alias_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "alias_id": "aliasId",
    });
  });

/** @internal */
export type DeleteModelAliasModelsAliasesAliasIdDeleteRequest$Outbound = {
  alias_id: string;
};

/** @internal */
export const DeleteModelAliasModelsAliasesAliasIdDeleteRequest$outboundSchema:
  z.ZodType<
    DeleteModelAliasModelsAliasesAliasIdDeleteRequest$Outbound,
    z.ZodTypeDef,
    DeleteModelAliasModelsAliasesAliasIdDeleteRequest
  > = z.object({
    aliasId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      aliasId: "alias_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteModelAliasModelsAliasesAliasIdDeleteRequest$ {
  /** @deprecated use `DeleteModelAliasModelsAliasesAliasIdDeleteRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteModelAliasModelsAliasesAliasIdDeleteRequest$inboundSchema;
  /** @deprecated use `DeleteModelAliasModelsAliasesAliasIdDeleteRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteModelAliasModelsAliasesAliasIdDeleteRequest$outboundSchema;
  /** @deprecated use `DeleteModelAliasModelsAliasesAliasIdDeleteRequest$Outbound` instead. */
  export type Outbound =
    DeleteModelAliasModelsAliasesAliasIdDeleteRequest$Outbound;
}

export function deleteModelAliasModelsAliasesAliasIdDeleteRequestToJSON(
  deleteModelAliasModelsAliasesAliasIdDeleteRequest:
    DeleteModelAliasModelsAliasesAliasIdDeleteRequest,
): string {
  return JSON.stringify(
    DeleteModelAliasModelsAliasesAliasIdDeleteRequest$outboundSchema.parse(
      deleteModelAliasModelsAliasesAliasIdDeleteRequest,
    ),
  );
}

export function deleteModelAliasModelsAliasesAliasIdDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteModelAliasModelsAliasesAliasIdDeleteRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteModelAliasModelsAliasesAliasIdDeleteRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteModelAliasModelsAliasesAliasIdDeleteRequest' from JSON`,
  );
}
