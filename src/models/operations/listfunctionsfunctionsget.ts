/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListFunctionsFunctionsGetRequest = {
  /**
   * Filter functions by name
   */
  name?: string | null | undefined;
  /**
   * Sort the functions by name or created_at, use '-' to sort in descending order
   */
  sort?: string | null | undefined;
  /**
   * The offset of the page of functions to return when paginating
   */
  offset?: number | null | undefined;
  /**
   * The number of functions to return per page when paginating
   */
  limit?: number | null | undefined;
};

/** @internal */
export const ListFunctionsFunctionsGetRequest$inboundSchema: z.ZodType<
  ListFunctionsFunctionsGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  sort: z.nullable(z.string()).optional(),
  offset: z.nullable(z.number().int()).optional(),
  limit: z.nullable(z.number().int()).optional(),
});

/** @internal */
export type ListFunctionsFunctionsGetRequest$Outbound = {
  name?: string | null | undefined;
  sort?: string | null | undefined;
  offset?: number | null | undefined;
  limit?: number | null | undefined;
};

/** @internal */
export const ListFunctionsFunctionsGetRequest$outboundSchema: z.ZodType<
  ListFunctionsFunctionsGetRequest$Outbound,
  z.ZodTypeDef,
  ListFunctionsFunctionsGetRequest
> = z.object({
  name: z.nullable(z.string()).optional(),
  sort: z.nullable(z.string()).optional(),
  offset: z.nullable(z.number().int()).optional(),
  limit: z.nullable(z.number().int()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFunctionsFunctionsGetRequest$ {
  /** @deprecated use `ListFunctionsFunctionsGetRequest$inboundSchema` instead. */
  export const inboundSchema = ListFunctionsFunctionsGetRequest$inboundSchema;
  /** @deprecated use `ListFunctionsFunctionsGetRequest$outboundSchema` instead. */
  export const outboundSchema = ListFunctionsFunctionsGetRequest$outboundSchema;
  /** @deprecated use `ListFunctionsFunctionsGetRequest$Outbound` instead. */
  export type Outbound = ListFunctionsFunctionsGetRequest$Outbound;
}

export function listFunctionsFunctionsGetRequestToJSON(
  listFunctionsFunctionsGetRequest: ListFunctionsFunctionsGetRequest,
): string {
  return JSON.stringify(
    ListFunctionsFunctionsGetRequest$outboundSchema.parse(
      listFunctionsFunctionsGetRequest,
    ),
  );
}

export function listFunctionsFunctionsGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListFunctionsFunctionsGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListFunctionsFunctionsGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListFunctionsFunctionsGetRequest' from JSON`,
  );
}
