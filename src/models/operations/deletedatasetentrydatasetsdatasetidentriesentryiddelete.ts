/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteDatasetEntryDatasetsDatasetIdEntriesEntryIdDeleteRequest = {
  /**
   * The id of the dataset
   */
  datasetId: string;
  /**
   * The id of the entry to delete
   */
  entryId: string;
};

/** @internal */
export const DeleteDatasetEntryDatasetsDatasetIdEntriesEntryIdDeleteRequest$inboundSchema:
  z.ZodType<
    DeleteDatasetEntryDatasetsDatasetIdEntriesEntryIdDeleteRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    dataset_id: z.string(),
    entry_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "dataset_id": "datasetId",
      "entry_id": "entryId",
    });
  });

/** @internal */
export type DeleteDatasetEntryDatasetsDatasetIdEntriesEntryIdDeleteRequest$Outbound =
  {
    dataset_id: string;
    entry_id: string;
  };

/** @internal */
export const DeleteDatasetEntryDatasetsDatasetIdEntriesEntryIdDeleteRequest$outboundSchema:
  z.ZodType<
    DeleteDatasetEntryDatasetsDatasetIdEntriesEntryIdDeleteRequest$Outbound,
    z.ZodTypeDef,
    DeleteDatasetEntryDatasetsDatasetIdEntriesEntryIdDeleteRequest
  > = z.object({
    datasetId: z.string(),
    entryId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      datasetId: "dataset_id",
      entryId: "entry_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteDatasetEntryDatasetsDatasetIdEntriesEntryIdDeleteRequest$ {
  /** @deprecated use `DeleteDatasetEntryDatasetsDatasetIdEntriesEntryIdDeleteRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteDatasetEntryDatasetsDatasetIdEntriesEntryIdDeleteRequest$inboundSchema;
  /** @deprecated use `DeleteDatasetEntryDatasetsDatasetIdEntriesEntryIdDeleteRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteDatasetEntryDatasetsDatasetIdEntriesEntryIdDeleteRequest$outboundSchema;
  /** @deprecated use `DeleteDatasetEntryDatasetsDatasetIdEntriesEntryIdDeleteRequest$Outbound` instead. */
  export type Outbound =
    DeleteDatasetEntryDatasetsDatasetIdEntriesEntryIdDeleteRequest$Outbound;
}

export function deleteDatasetEntryDatasetsDatasetIdEntriesEntryIdDeleteRequestToJSON(
  deleteDatasetEntryDatasetsDatasetIdEntriesEntryIdDeleteRequest:
    DeleteDatasetEntryDatasetsDatasetIdEntriesEntryIdDeleteRequest,
): string {
  return JSON.stringify(
    DeleteDatasetEntryDatasetsDatasetIdEntriesEntryIdDeleteRequest$outboundSchema
      .parse(deleteDatasetEntryDatasetsDatasetIdEntriesEntryIdDeleteRequest),
  );
}

export function deleteDatasetEntryDatasetsDatasetIdEntriesEntryIdDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteDatasetEntryDatasetsDatasetIdEntriesEntryIdDeleteRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteDatasetEntryDatasetsDatasetIdEntriesEntryIdDeleteRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'DeleteDatasetEntryDatasetsDatasetIdEntriesEntryIdDeleteRequest' from JSON`,
  );
}
