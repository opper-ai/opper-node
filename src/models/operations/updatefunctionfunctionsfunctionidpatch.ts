/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateFunctionFunctionsFunctionIdPatchRequest = {
  /**
   * Unique identifier of the function given as a UUID
   */
  functionId: string;
  updateFunctionRequest: models.UpdateFunctionRequest;
};

/** @internal */
export const UpdateFunctionFunctionsFunctionIdPatchRequest$inboundSchema:
  z.ZodType<
    UpdateFunctionFunctionsFunctionIdPatchRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    function_id: z.string(),
    UpdateFunctionRequest: models.UpdateFunctionRequest$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "function_id": "functionId",
      "UpdateFunctionRequest": "updateFunctionRequest",
    });
  });

/** @internal */
export type UpdateFunctionFunctionsFunctionIdPatchRequest$Outbound = {
  function_id: string;
  UpdateFunctionRequest: models.UpdateFunctionRequest$Outbound;
};

/** @internal */
export const UpdateFunctionFunctionsFunctionIdPatchRequest$outboundSchema:
  z.ZodType<
    UpdateFunctionFunctionsFunctionIdPatchRequest$Outbound,
    z.ZodTypeDef,
    UpdateFunctionFunctionsFunctionIdPatchRequest
  > = z.object({
    functionId: z.string(),
    updateFunctionRequest: models.UpdateFunctionRequest$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      functionId: "function_id",
      updateFunctionRequest: "UpdateFunctionRequest",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateFunctionFunctionsFunctionIdPatchRequest$ {
  /** @deprecated use `UpdateFunctionFunctionsFunctionIdPatchRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateFunctionFunctionsFunctionIdPatchRequest$inboundSchema;
  /** @deprecated use `UpdateFunctionFunctionsFunctionIdPatchRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateFunctionFunctionsFunctionIdPatchRequest$outboundSchema;
  /** @deprecated use `UpdateFunctionFunctionsFunctionIdPatchRequest$Outbound` instead. */
  export type Outbound = UpdateFunctionFunctionsFunctionIdPatchRequest$Outbound;
}

export function updateFunctionFunctionsFunctionIdPatchRequestToJSON(
  updateFunctionFunctionsFunctionIdPatchRequest:
    UpdateFunctionFunctionsFunctionIdPatchRequest,
): string {
  return JSON.stringify(
    UpdateFunctionFunctionsFunctionIdPatchRequest$outboundSchema.parse(
      updateFunctionFunctionsFunctionIdPatchRequest,
    ),
  );
}

export function updateFunctionFunctionsFunctionIdPatchRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateFunctionFunctionsFunctionIdPatchRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateFunctionFunctionsFunctionIdPatchRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateFunctionFunctionsFunctionIdPatchRequest' from JSON`,
  );
}
