/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListMetricsSpansSpanIdMetricsGetRequest = {
  /**
   * The id of the span to list metrics for
   */
  spanId: string;
  /**
   * The offset to start the list from
   */
  offset?: number | undefined;
  /**
   * The number of metrics to return
   */
  limit?: number | undefined;
};

/** @internal */
export const ListMetricsSpansSpanIdMetricsGetRequest$inboundSchema: z.ZodType<
  ListMetricsSpansSpanIdMetricsGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  span_id: z.string(),
  offset: z.number().int().default(0),
  limit: z.number().int().default(100),
}).transform((v) => {
  return remap$(v, {
    "span_id": "spanId",
  });
});

/** @internal */
export type ListMetricsSpansSpanIdMetricsGetRequest$Outbound = {
  span_id: string;
  offset: number;
  limit: number;
};

/** @internal */
export const ListMetricsSpansSpanIdMetricsGetRequest$outboundSchema: z.ZodType<
  ListMetricsSpansSpanIdMetricsGetRequest$Outbound,
  z.ZodTypeDef,
  ListMetricsSpansSpanIdMetricsGetRequest
> = z.object({
  spanId: z.string(),
  offset: z.number().int().default(0),
  limit: z.number().int().default(100),
}).transform((v) => {
  return remap$(v, {
    spanId: "span_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMetricsSpansSpanIdMetricsGetRequest$ {
  /** @deprecated use `ListMetricsSpansSpanIdMetricsGetRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListMetricsSpansSpanIdMetricsGetRequest$inboundSchema;
  /** @deprecated use `ListMetricsSpansSpanIdMetricsGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListMetricsSpansSpanIdMetricsGetRequest$outboundSchema;
  /** @deprecated use `ListMetricsSpansSpanIdMetricsGetRequest$Outbound` instead. */
  export type Outbound = ListMetricsSpansSpanIdMetricsGetRequest$Outbound;
}

export function listMetricsSpansSpanIdMetricsGetRequestToJSON(
  listMetricsSpansSpanIdMetricsGetRequest:
    ListMetricsSpansSpanIdMetricsGetRequest,
): string {
  return JSON.stringify(
    ListMetricsSpansSpanIdMetricsGetRequest$outboundSchema.parse(
      listMetricsSpansSpanIdMetricsGetRequest,
    ),
  );
}

export function listMetricsSpansSpanIdMetricsGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ListMetricsSpansSpanIdMetricsGetRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListMetricsSpansSpanIdMetricsGetRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListMetricsSpansSpanIdMetricsGetRequest' from JSON`,
  );
}
