/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListFunctionRevisionsFunctionsFunctionIdRevisionsGetRequest = {
  /**
   * The id of the function to get revisions for
   */
  functionId: string;
  /**
   * The offset of the revisions to get
   */
  offset?: number | null | undefined;
  /**
   * The limit of the revisions to get
   */
  limit?: number | null | undefined;
};

/** @internal */
export const ListFunctionRevisionsFunctionsFunctionIdRevisionsGetRequest$inboundSchema:
  z.ZodType<
    ListFunctionRevisionsFunctionsFunctionIdRevisionsGetRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    function_id: z.string(),
    offset: z.nullable(z.number().int()).optional(),
    limit: z.nullable(z.number().int()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "function_id": "functionId",
    });
  });

/** @internal */
export type ListFunctionRevisionsFunctionsFunctionIdRevisionsGetRequest$Outbound =
  {
    function_id: string;
    offset?: number | null | undefined;
    limit?: number | null | undefined;
  };

/** @internal */
export const ListFunctionRevisionsFunctionsFunctionIdRevisionsGetRequest$outboundSchema:
  z.ZodType<
    ListFunctionRevisionsFunctionsFunctionIdRevisionsGetRequest$Outbound,
    z.ZodTypeDef,
    ListFunctionRevisionsFunctionsFunctionIdRevisionsGetRequest
  > = z.object({
    functionId: z.string(),
    offset: z.nullable(z.number().int()).optional(),
    limit: z.nullable(z.number().int()).optional(),
  }).transform((v) => {
    return remap$(v, {
      functionId: "function_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFunctionRevisionsFunctionsFunctionIdRevisionsGetRequest$ {
  /** @deprecated use `ListFunctionRevisionsFunctionsFunctionIdRevisionsGetRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListFunctionRevisionsFunctionsFunctionIdRevisionsGetRequest$inboundSchema;
  /** @deprecated use `ListFunctionRevisionsFunctionsFunctionIdRevisionsGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListFunctionRevisionsFunctionsFunctionIdRevisionsGetRequest$outboundSchema;
  /** @deprecated use `ListFunctionRevisionsFunctionsFunctionIdRevisionsGetRequest$Outbound` instead. */
  export type Outbound =
    ListFunctionRevisionsFunctionsFunctionIdRevisionsGetRequest$Outbound;
}

export function listFunctionRevisionsFunctionsFunctionIdRevisionsGetRequestToJSON(
  listFunctionRevisionsFunctionsFunctionIdRevisionsGetRequest:
    ListFunctionRevisionsFunctionsFunctionIdRevisionsGetRequest,
): string {
  return JSON.stringify(
    ListFunctionRevisionsFunctionsFunctionIdRevisionsGetRequest$outboundSchema
      .parse(listFunctionRevisionsFunctionsFunctionIdRevisionsGetRequest),
  );
}

export function listFunctionRevisionsFunctionsFunctionIdRevisionsGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ListFunctionRevisionsFunctionsFunctionIdRevisionsGetRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListFunctionRevisionsFunctionsFunctionIdRevisionsGetRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ListFunctionRevisionsFunctionsFunctionIdRevisionsGetRequest' from JSON`,
  );
}
