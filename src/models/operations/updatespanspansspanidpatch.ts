/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateSpanSpansSpanIdPatchRequest = {
  /**
   * The ID of the span to update
   */
  spanId: string;
  updateSpanRequest: models.UpdateSpanRequest;
};

/** @internal */
export const UpdateSpanSpansSpanIdPatchRequest$inboundSchema: z.ZodType<
  UpdateSpanSpansSpanIdPatchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  span_id: z.string(),
  UpdateSpanRequest: models.UpdateSpanRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "span_id": "spanId",
    "UpdateSpanRequest": "updateSpanRequest",
  });
});

/** @internal */
export type UpdateSpanSpansSpanIdPatchRequest$Outbound = {
  span_id: string;
  UpdateSpanRequest: models.UpdateSpanRequest$Outbound;
};

/** @internal */
export const UpdateSpanSpansSpanIdPatchRequest$outboundSchema: z.ZodType<
  UpdateSpanSpansSpanIdPatchRequest$Outbound,
  z.ZodTypeDef,
  UpdateSpanSpansSpanIdPatchRequest
> = z.object({
  spanId: z.string(),
  updateSpanRequest: models.UpdateSpanRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    spanId: "span_id",
    updateSpanRequest: "UpdateSpanRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSpanSpansSpanIdPatchRequest$ {
  /** @deprecated use `UpdateSpanSpansSpanIdPatchRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSpanSpansSpanIdPatchRequest$inboundSchema;
  /** @deprecated use `UpdateSpanSpansSpanIdPatchRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSpanSpansSpanIdPatchRequest$outboundSchema;
  /** @deprecated use `UpdateSpanSpansSpanIdPatchRequest$Outbound` instead. */
  export type Outbound = UpdateSpanSpansSpanIdPatchRequest$Outbound;
}

export function updateSpanSpansSpanIdPatchRequestToJSON(
  updateSpanSpansSpanIdPatchRequest: UpdateSpanSpansSpanIdPatchRequest,
): string {
  return JSON.stringify(
    UpdateSpanSpansSpanIdPatchRequest$outboundSchema.parse(
      updateSpanSpansSpanIdPatchRequest,
    ),
  );
}

export function updateSpanSpansSpanIdPatchRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSpanSpansSpanIdPatchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSpanSpansSpanIdPatchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSpanSpansSpanIdPatchRequest' from JSON`,
  );
}
