/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UsageAnalyticsUsageGetRequest = {
  /**
   * Start date for the time range (inclusive). If not provided, defaults to the first day of the current month.
   */
  fromDate?: Date | null | undefined;
  /**
   * End date for the time range (exclusive). If not provided, defaults to the last day of the current month.
   */
  toDate?: Date | null | undefined;
  /**
   * Time granularity for grouping (minute, hour, day, month, year)
   */
  granularity?: models.Granularity | null | undefined;
  /**
   * Fields from event_metadata to include and sum
   */
  fields?: Array<string> | null | undefined;
  /**
   * Fields from tags to group by
   */
  groupBy?: Array<string> | null | undefined;
};

/** @internal */
export const UsageAnalyticsUsageGetRequest$inboundSchema: z.ZodType<
  UsageAnalyticsUsageGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  from_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  to_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  granularity: z.nullable(models.Granularity$inboundSchema).optional(),
  fields: z.nullable(z.array(z.string())).optional(),
  group_by: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "from_date": "fromDate",
    "to_date": "toDate",
    "group_by": "groupBy",
  });
});

/** @internal */
export type UsageAnalyticsUsageGetRequest$Outbound = {
  from_date?: string | null | undefined;
  to_date?: string | null | undefined;
  granularity?: string | null | undefined;
  fields?: Array<string> | null | undefined;
  group_by?: Array<string> | null | undefined;
};

/** @internal */
export const UsageAnalyticsUsageGetRequest$outboundSchema: z.ZodType<
  UsageAnalyticsUsageGetRequest$Outbound,
  z.ZodTypeDef,
  UsageAnalyticsUsageGetRequest
> = z.object({
  fromDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  toDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  granularity: z.nullable(models.Granularity$outboundSchema).optional(),
  fields: z.nullable(z.array(z.string())).optional(),
  groupBy: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    fromDate: "from_date",
    toDate: "to_date",
    groupBy: "group_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsageAnalyticsUsageGetRequest$ {
  /** @deprecated use `UsageAnalyticsUsageGetRequest$inboundSchema` instead. */
  export const inboundSchema = UsageAnalyticsUsageGetRequest$inboundSchema;
  /** @deprecated use `UsageAnalyticsUsageGetRequest$outboundSchema` instead. */
  export const outboundSchema = UsageAnalyticsUsageGetRequest$outboundSchema;
  /** @deprecated use `UsageAnalyticsUsageGetRequest$Outbound` instead. */
  export type Outbound = UsageAnalyticsUsageGetRequest$Outbound;
}

export function usageAnalyticsUsageGetRequestToJSON(
  usageAnalyticsUsageGetRequest: UsageAnalyticsUsageGetRequest,
): string {
  return JSON.stringify(
    UsageAnalyticsUsageGetRequest$outboundSchema.parse(
      usageAnalyticsUsageGetRequest,
    ),
  );
}

export function usageAnalyticsUsageGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<UsageAnalyticsUsageGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsageAnalyticsUsageGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsageAnalyticsUsageGetRequest' from JSON`,
  );
}
