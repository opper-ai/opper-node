/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteFunctionFunctionsFunctionIdDeleteRequest = {
  /**
   * Unique identifier of the function given as a UUID
   */
  functionId: string;
};

/** @internal */
export const DeleteFunctionFunctionsFunctionIdDeleteRequest$inboundSchema:
  z.ZodType<
    DeleteFunctionFunctionsFunctionIdDeleteRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    function_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "function_id": "functionId",
    });
  });

/** @internal */
export type DeleteFunctionFunctionsFunctionIdDeleteRequest$Outbound = {
  function_id: string;
};

/** @internal */
export const DeleteFunctionFunctionsFunctionIdDeleteRequest$outboundSchema:
  z.ZodType<
    DeleteFunctionFunctionsFunctionIdDeleteRequest$Outbound,
    z.ZodTypeDef,
    DeleteFunctionFunctionsFunctionIdDeleteRequest
  > = z.object({
    functionId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      functionId: "function_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteFunctionFunctionsFunctionIdDeleteRequest$ {
  /** @deprecated use `DeleteFunctionFunctionsFunctionIdDeleteRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteFunctionFunctionsFunctionIdDeleteRequest$inboundSchema;
  /** @deprecated use `DeleteFunctionFunctionsFunctionIdDeleteRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteFunctionFunctionsFunctionIdDeleteRequest$outboundSchema;
  /** @deprecated use `DeleteFunctionFunctionsFunctionIdDeleteRequest$Outbound` instead. */
  export type Outbound =
    DeleteFunctionFunctionsFunctionIdDeleteRequest$Outbound;
}

export function deleteFunctionFunctionsFunctionIdDeleteRequestToJSON(
  deleteFunctionFunctionsFunctionIdDeleteRequest:
    DeleteFunctionFunctionsFunctionIdDeleteRequest,
): string {
  return JSON.stringify(
    DeleteFunctionFunctionsFunctionIdDeleteRequest$outboundSchema.parse(
      deleteFunctionFunctionsFunctionIdDeleteRequest,
    ),
  );
}

export function deleteFunctionFunctionsFunctionIdDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteFunctionFunctionsFunctionIdDeleteRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteFunctionFunctionsFunctionIdDeleteRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteFunctionFunctionsFunctionIdDeleteRequest' from JSON`,
  );
}
