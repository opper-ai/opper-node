/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetFunctionByRevisionFunctionsFunctionIdRevisionsRevisionIdGetRequest =
  {
    /**
     * The id of the function to retrieve
     */
    functionId: string;
    /**
     * The id of the revision to retrieve
     */
    revisionId: string;
  };

/** @internal */
export const GetFunctionByRevisionFunctionsFunctionIdRevisionsRevisionIdGetRequest$inboundSchema:
  z.ZodType<
    GetFunctionByRevisionFunctionsFunctionIdRevisionsRevisionIdGetRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    function_id: z.string(),
    revision_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "function_id": "functionId",
      "revision_id": "revisionId",
    });
  });

/** @internal */
export type GetFunctionByRevisionFunctionsFunctionIdRevisionsRevisionIdGetRequest$Outbound =
  {
    function_id: string;
    revision_id: string;
  };

/** @internal */
export const GetFunctionByRevisionFunctionsFunctionIdRevisionsRevisionIdGetRequest$outboundSchema:
  z.ZodType<
    GetFunctionByRevisionFunctionsFunctionIdRevisionsRevisionIdGetRequest$Outbound,
    z.ZodTypeDef,
    GetFunctionByRevisionFunctionsFunctionIdRevisionsRevisionIdGetRequest
  > = z.object({
    functionId: z.string(),
    revisionId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      functionId: "function_id",
      revisionId: "revision_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFunctionByRevisionFunctionsFunctionIdRevisionsRevisionIdGetRequest$ {
  /** @deprecated use `GetFunctionByRevisionFunctionsFunctionIdRevisionsRevisionIdGetRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetFunctionByRevisionFunctionsFunctionIdRevisionsRevisionIdGetRequest$inboundSchema;
  /** @deprecated use `GetFunctionByRevisionFunctionsFunctionIdRevisionsRevisionIdGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetFunctionByRevisionFunctionsFunctionIdRevisionsRevisionIdGetRequest$outboundSchema;
  /** @deprecated use `GetFunctionByRevisionFunctionsFunctionIdRevisionsRevisionIdGetRequest$Outbound` instead. */
  export type Outbound =
    GetFunctionByRevisionFunctionsFunctionIdRevisionsRevisionIdGetRequest$Outbound;
}

export function getFunctionByRevisionFunctionsFunctionIdRevisionsRevisionIdGetRequestToJSON(
  getFunctionByRevisionFunctionsFunctionIdRevisionsRevisionIdGetRequest:
    GetFunctionByRevisionFunctionsFunctionIdRevisionsRevisionIdGetRequest,
): string {
  return JSON.stringify(
    GetFunctionByRevisionFunctionsFunctionIdRevisionsRevisionIdGetRequest$outboundSchema
      .parse(
        getFunctionByRevisionFunctionsFunctionIdRevisionsRevisionIdGetRequest,
      ),
  );
}

export function getFunctionByRevisionFunctionsFunctionIdRevisionsRevisionIdGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetFunctionByRevisionFunctionsFunctionIdRevisionsRevisionIdGetRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetFunctionByRevisionFunctionsFunctionIdRevisionsRevisionIdGetRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetFunctionByRevisionFunctionsFunctionIdRevisionsRevisionIdGetRequest' from JSON`,
  );
}
