/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { EventStream } from "../../lib/event-streams.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostRequest =
  {
    /**
     * The id of the function to call
     */
    functionId: string;
    /**
     * The id of the revision to call
     */
    revisionId: string;
    appApiPublicV2FunctionsCallFunctionRequest:
      models.AppApiPublicV2FunctionsCallFunctionRequest;
  };

/**
 * The actual data payload containing streaming chunk information
 */
export type StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostData =
  {
    /**
     * Incremental text content generated by the model
     */
    delta?: string | undefined;
    /**
     * Unique identifier for the execution span
     */
    spanId?: string | undefined;
  };

/**
 * Server-Sent Event following the SSE specification
 */
export type StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseBody =
  {
    /**
     * Event ID for the SSE event
     */
    id?: string | undefined;
    /**
     * Event type for the SSE event
     */
    event?: string | undefined;
    /**
     * The actual data payload containing streaming chunk information
     */
    data: StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostData;
    /**
     * Retry interval in milliseconds for the SSE connection
     */
    retry?: number | undefined;
  };

export type StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponse =
  {
    headers: { [k: string]: Array<string> };
    result: EventStream<
      StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseBody
    >;
  };

/** @internal */
export const StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostRequest$inboundSchema:
  z.ZodType<
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    function_id: z.string(),
    revision_id: z.string(),
    app__api__public__v2__functions__CallFunctionRequest:
      models.AppApiPublicV2FunctionsCallFunctionRequest$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "function_id": "functionId",
      "revision_id": "revisionId",
      "app__api__public__v2__functions__CallFunctionRequest":
        "appApiPublicV2FunctionsCallFunctionRequest",
    });
  });

/** @internal */
export type StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostRequest$Outbound =
  {
    function_id: string;
    revision_id: string;
    app__api__public__v2__functions__CallFunctionRequest:
      models.AppApiPublicV2FunctionsCallFunctionRequest$Outbound;
  };

/** @internal */
export const StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostRequest$outboundSchema:
  z.ZodType<
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostRequest$Outbound,
    z.ZodTypeDef,
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostRequest
  > = z.object({
    functionId: z.string(),
    revisionId: z.string(),
    appApiPublicV2FunctionsCallFunctionRequest:
      models.AppApiPublicV2FunctionsCallFunctionRequest$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      functionId: "function_id",
      revisionId: "revision_id",
      appApiPublicV2FunctionsCallFunctionRequest:
        "app__api__public__v2__functions__CallFunctionRequest",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostRequest$ {
  /** @deprecated use `StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostRequest$inboundSchema` instead. */
  export const inboundSchema =
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostRequest$inboundSchema;
  /** @deprecated use `StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostRequest$outboundSchema` instead. */
  export const outboundSchema =
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostRequest$outboundSchema;
  /** @deprecated use `StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostRequest$Outbound` instead. */
  export type Outbound =
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostRequest$Outbound;
}

export function streamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostRequestToJSON(
  streamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostRequest:
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostRequest,
): string {
  return JSON.stringify(
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostRequest$outboundSchema
      .parse(
        streamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostRequest,
      ),
  );
}

export function streamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostRequest' from JSON`,
  );
}

/** @internal */
export const StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostData$inboundSchema:
  z.ZodType<
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostData,
    z.ZodTypeDef,
    unknown
  > = z.object({
    delta: z.string().optional(),
    span_id: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "span_id": "spanId",
    });
  });

/** @internal */
export type StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostData$Outbound =
  {
    delta?: string | undefined;
    span_id?: string | undefined;
  };

/** @internal */
export const StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostData$outboundSchema:
  z.ZodType<
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostData$Outbound,
    z.ZodTypeDef,
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostData
  > = z.object({
    delta: z.string().optional(),
    spanId: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      spanId: "span_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostData$ {
  /** @deprecated use `StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostData$inboundSchema` instead. */
  export const inboundSchema =
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostData$inboundSchema;
  /** @deprecated use `StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostData$outboundSchema` instead. */
  export const outboundSchema =
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostData$outboundSchema;
  /** @deprecated use `StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostData$Outbound` instead. */
  export type Outbound =
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostData$Outbound;
}

export function streamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostDataToJSON(
  streamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostData:
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostData,
): string {
  return JSON.stringify(
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostData$outboundSchema
      .parse(
        streamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostData,
      ),
  );
}

export function streamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostDataFromJSON(
  jsonString: string,
): SafeParseResult<
  StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostData' from JSON`,
  );
}

/** @internal */
export const StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseBody$inboundSchema:
  z.ZodType<
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    event: z.string().optional(),
    data: z.string().transform((v, ctx) => {
      try {
        return JSON.parse(v);
      } catch (err) {
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message: `malformed json: ${err}`,
        });
        return z.NEVER;
      }
    }).pipe(
      z.lazy(() =>
        StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostData$inboundSchema
      ),
    ),
    retry: z.number().int().optional(),
  });

/** @internal */
export type StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseBody$Outbound =
  {
    id?: string | undefined;
    event?: string | undefined;
    data:
      StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostData$Outbound;
    retry?: number | undefined;
  };

/** @internal */
export const StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseBody$outboundSchema:
  z.ZodType<
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseBody$Outbound,
    z.ZodTypeDef,
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseBody
  > = z.object({
    id: z.string().optional(),
    event: z.string().optional(),
    data: z.lazy(() =>
      StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostData$outboundSchema
    ),
    retry: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseBody$ {
  /** @deprecated use `StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseBody$inboundSchema;
  /** @deprecated use `StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseBody$outboundSchema;
  /** @deprecated use `StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseBody$Outbound` instead. */
  export type Outbound =
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseBody$Outbound;
}

export function streamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseBodyToJSON(
  streamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseBody:
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseBody,
): string {
  return JSON.stringify(
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseBody$outboundSchema
      .parse(
        streamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseBody,
      ),
  );
}

export function streamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseBody' from JSON`,
  );
}

/** @internal */
export const StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponse$inboundSchema:
  z.ZodType<
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: z.instanceof(ReadableStream<Uint8Array>).transform(stream => {
      return new EventStream({
        stream,
        decoder(rawEvent) {
          const schema = z.lazy(() =>
            StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseBody$inboundSchema
          );
          return schema.parse(rawEvent);
        },
      });
    }),
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponse$Outbound =
  {
    Headers: { [k: string]: Array<string> };
    Result: never;
  };

/** @internal */
export const StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponse$outboundSchema:
  z.ZodType<
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponse$Outbound,
    z.ZodTypeDef,
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: z.never(),
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponse$ {
  /** @deprecated use `StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponse$inboundSchema` instead. */
  export const inboundSchema =
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponse$inboundSchema;
  /** @deprecated use `StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponse$outboundSchema` instead. */
  export const outboundSchema =
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponse$outboundSchema;
  /** @deprecated use `StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponse$Outbound` instead. */
  export type Outbound =
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponse$Outbound;
}

export function streamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseToJSON(
  streamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponse:
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponse,
): string {
  return JSON.stringify(
    StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponse$outboundSchema
      .parse(
        streamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponse,
      ),
  );
}

export function streamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponse' from JSON`,
  );
}
