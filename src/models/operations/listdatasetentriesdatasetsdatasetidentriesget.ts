/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListDatasetEntriesDatasetsDatasetIdEntriesGetRequest = {
  /**
   * The id of the dataset
   */
  datasetId: string;
  /**
   * The offset of the entries to get
   */
  offset?: number | undefined;
  /**
   * The limit of the entries to get
   */
  limit?: number | undefined;
};

/** @internal */
export const ListDatasetEntriesDatasetsDatasetIdEntriesGetRequest$inboundSchema:
  z.ZodType<
    ListDatasetEntriesDatasetsDatasetIdEntriesGetRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    dataset_id: z.string(),
    offset: z.number().int().default(0),
    limit: z.number().int().default(100),
  }).transform((v) => {
    return remap$(v, {
      "dataset_id": "datasetId",
    });
  });

/** @internal */
export type ListDatasetEntriesDatasetsDatasetIdEntriesGetRequest$Outbound = {
  dataset_id: string;
  offset: number;
  limit: number;
};

/** @internal */
export const ListDatasetEntriesDatasetsDatasetIdEntriesGetRequest$outboundSchema:
  z.ZodType<
    ListDatasetEntriesDatasetsDatasetIdEntriesGetRequest$Outbound,
    z.ZodTypeDef,
    ListDatasetEntriesDatasetsDatasetIdEntriesGetRequest
  > = z.object({
    datasetId: z.string(),
    offset: z.number().int().default(0),
    limit: z.number().int().default(100),
  }).transform((v) => {
    return remap$(v, {
      datasetId: "dataset_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListDatasetEntriesDatasetsDatasetIdEntriesGetRequest$ {
  /** @deprecated use `ListDatasetEntriesDatasetsDatasetIdEntriesGetRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListDatasetEntriesDatasetsDatasetIdEntriesGetRequest$inboundSchema;
  /** @deprecated use `ListDatasetEntriesDatasetsDatasetIdEntriesGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListDatasetEntriesDatasetsDatasetIdEntriesGetRequest$outboundSchema;
  /** @deprecated use `ListDatasetEntriesDatasetsDatasetIdEntriesGetRequest$Outbound` instead. */
  export type Outbound =
    ListDatasetEntriesDatasetsDatasetIdEntriesGetRequest$Outbound;
}

export function listDatasetEntriesDatasetsDatasetIdEntriesGetRequestToJSON(
  listDatasetEntriesDatasetsDatasetIdEntriesGetRequest:
    ListDatasetEntriesDatasetsDatasetIdEntriesGetRequest,
): string {
  return JSON.stringify(
    ListDatasetEntriesDatasetsDatasetIdEntriesGetRequest$outboundSchema.parse(
      listDatasetEntriesDatasetsDatasetIdEntriesGetRequest,
    ),
  );
}

export function listDatasetEntriesDatasetsDatasetIdEntriesGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ListDatasetEntriesDatasetsDatasetIdEntriesGetRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListDatasetEntriesDatasetsDatasetIdEntriesGetRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListDatasetEntriesDatasetsDatasetIdEntriesGetRequest' from JSON`,
  );
}
