/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { EventStream } from "../../lib/event-streams.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Incremental content for streaming. Used for both unstructured text streaming (when no output_schema) and structured streaming (when output_schema is provided). For structured streaming, contains actual field values being streamed to the json_path location. Supports all JSON types: strings, numbers, booleans.
 */
export type Delta = string | number | number | boolean;

/**
 * Represents the data payload within a Server-Sent Event for streaming function execution.
 *
 * @remarks
 *
 * This model contains the JSON content sent in the 'data' field of each SSE event.
 * The fields present depend on the streaming mode:
 *
 * **Text Mode (no output_schema):**
 * - Uses `delta` field for incremental text content
 * - `chunk_type` will be "text"
 *
 * **Structured Mode (with output_schema):**
 * - Uses `delta` and `json_path` for precise field tracking
 * - Enables real-time UI updates by showing which schema field is being populated
 * - `chunk_type` will be "json"
 *
 * **JSON Path Examples:**
 * - `response.summary` - Top-level string field
 * - `response.people[0].name` - Name of first person in array
 * - `response.metadata.created_at` - Nested object field
 */
export type StreamingChunk = {
  /**
   * Incremental content for streaming. Used for both unstructured text streaming (when no output_schema) and structured streaming (when output_schema is provided). For structured streaming, contains actual field values being streamed to the json_path location. Supports all JSON types: strings, numbers, booleans.
   */
  delta?: string | number | number | boolean | null | undefined;
  /**
   * Dot-notation path showing exactly which field in your output_schema is being populated. Enables precise UI updates by routing content to specific components. Format: field[index].nested_field
   */
  jsonPath?: string | null | undefined;
  /**
   * Unique identifier for the execution span, included in the first streaming chunk for tracing
   */
  spanId?: string | null | undefined;
  /**
   * Indicates the streaming mode: 'text' for unstructured streaming, 'json' for structured streaming with output_schema. Only present when delta content is included.
   */
  chunkType?: string | null | undefined;
};

/**
 * Server-Sent Event following the SSE specification
 */
export type FunctionStreamCallStreamPostResponseBody = {
  /**
   * Event ID for the SSE event
   */
  id?: string | undefined;
  /**
   * Event type for the SSE event
   */
  event?: string | undefined;
  /**
   * Represents the data payload within a Server-Sent Event for streaming function execution.
   *
   * @remarks
   *
   * This model contains the JSON content sent in the 'data' field of each SSE event.
   * The fields present depend on the streaming mode:
   *
   * **Text Mode (no output_schema):**
   * - Uses `delta` field for incremental text content
   * - `chunk_type` will be "text"
   *
   * **Structured Mode (with output_schema):**
   * - Uses `delta` and `json_path` for precise field tracking
   * - Enables real-time UI updates by showing which schema field is being populated
   * - `chunk_type` will be "json"
   *
   * **JSON Path Examples:**
   * - `response.summary` - Top-level string field
   * - `response.people[0].name` - Name of first person in array
   * - `response.metadata.created_at` - Nested object field
   */
  data: StreamingChunk;
  /**
   * Retry interval in milliseconds for the SSE connection
   */
  retry?: number | undefined;
};

export type FunctionStreamCallStreamPostResponse = {
  headers: { [k: string]: Array<string> };
  result: EventStream<FunctionStreamCallStreamPostResponseBody>;
};

/** @internal */
export const Delta$inboundSchema: z.ZodType<Delta, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.number().int(), z.number(), z.boolean()]);

/** @internal */
export type Delta$Outbound = string | number | number | boolean;

/** @internal */
export const Delta$outboundSchema: z.ZodType<
  Delta$Outbound,
  z.ZodTypeDef,
  Delta
> = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Delta$ {
  /** @deprecated use `Delta$inboundSchema` instead. */
  export const inboundSchema = Delta$inboundSchema;
  /** @deprecated use `Delta$outboundSchema` instead. */
  export const outboundSchema = Delta$outboundSchema;
  /** @deprecated use `Delta$Outbound` instead. */
  export type Outbound = Delta$Outbound;
}

export function deltaToJSON(delta: Delta): string {
  return JSON.stringify(Delta$outboundSchema.parse(delta));
}

export function deltaFromJSON(
  jsonString: string,
): SafeParseResult<Delta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Delta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Delta' from JSON`,
  );
}

/** @internal */
export const StreamingChunk$inboundSchema: z.ZodType<
  StreamingChunk,
  z.ZodTypeDef,
  unknown
> = z.object({
  delta: z.nullable(
    z.union([z.string(), z.number().int(), z.number(), z.boolean()]),
  ).optional(),
  json_path: z.nullable(z.string()).optional(),
  span_id: z.nullable(z.string()).optional(),
  chunk_type: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "json_path": "jsonPath",
    "span_id": "spanId",
    "chunk_type": "chunkType",
  });
});

/** @internal */
export type StreamingChunk$Outbound = {
  delta?: string | number | number | boolean | null | undefined;
  json_path?: string | null | undefined;
  span_id?: string | null | undefined;
  chunk_type?: string | null | undefined;
};

/** @internal */
export const StreamingChunk$outboundSchema: z.ZodType<
  StreamingChunk$Outbound,
  z.ZodTypeDef,
  StreamingChunk
> = z.object({
  delta: z.nullable(
    z.union([z.string(), z.number().int(), z.number(), z.boolean()]),
  ).optional(),
  jsonPath: z.nullable(z.string()).optional(),
  spanId: z.nullable(z.string()).optional(),
  chunkType: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    jsonPath: "json_path",
    spanId: "span_id",
    chunkType: "chunk_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamingChunk$ {
  /** @deprecated use `StreamingChunk$inboundSchema` instead. */
  export const inboundSchema = StreamingChunk$inboundSchema;
  /** @deprecated use `StreamingChunk$outboundSchema` instead. */
  export const outboundSchema = StreamingChunk$outboundSchema;
  /** @deprecated use `StreamingChunk$Outbound` instead. */
  export type Outbound = StreamingChunk$Outbound;
}

export function streamingChunkToJSON(streamingChunk: StreamingChunk): string {
  return JSON.stringify(StreamingChunk$outboundSchema.parse(streamingChunk));
}

export function streamingChunkFromJSON(
  jsonString: string,
): SafeParseResult<StreamingChunk, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamingChunk$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamingChunk' from JSON`,
  );
}

/** @internal */
export const FunctionStreamCallStreamPostResponseBody$inboundSchema: z.ZodType<
  FunctionStreamCallStreamPostResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  event: z.string().optional(),
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(z.lazy(() => StreamingChunk$inboundSchema)),
  retry: z.number().int().optional(),
});

/** @internal */
export type FunctionStreamCallStreamPostResponseBody$Outbound = {
  id?: string | undefined;
  event?: string | undefined;
  data: StreamingChunk$Outbound;
  retry?: number | undefined;
};

/** @internal */
export const FunctionStreamCallStreamPostResponseBody$outboundSchema: z.ZodType<
  FunctionStreamCallStreamPostResponseBody$Outbound,
  z.ZodTypeDef,
  FunctionStreamCallStreamPostResponseBody
> = z.object({
  id: z.string().optional(),
  event: z.string().optional(),
  data: z.lazy(() => StreamingChunk$outboundSchema),
  retry: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionStreamCallStreamPostResponseBody$ {
  /** @deprecated use `FunctionStreamCallStreamPostResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    FunctionStreamCallStreamPostResponseBody$inboundSchema;
  /** @deprecated use `FunctionStreamCallStreamPostResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FunctionStreamCallStreamPostResponseBody$outboundSchema;
  /** @deprecated use `FunctionStreamCallStreamPostResponseBody$Outbound` instead. */
  export type Outbound = FunctionStreamCallStreamPostResponseBody$Outbound;
}

export function functionStreamCallStreamPostResponseBodyToJSON(
  functionStreamCallStreamPostResponseBody:
    FunctionStreamCallStreamPostResponseBody,
): string {
  return JSON.stringify(
    FunctionStreamCallStreamPostResponseBody$outboundSchema.parse(
      functionStreamCallStreamPostResponseBody,
    ),
  );
}

export function functionStreamCallStreamPostResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  FunctionStreamCallStreamPostResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FunctionStreamCallStreamPostResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FunctionStreamCallStreamPostResponseBody' from JSON`,
  );
}

/** @internal */
export const FunctionStreamCallStreamPostResponse$inboundSchema: z.ZodType<
  FunctionStreamCallStreamPostResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z
    .instanceof(ReadableStream<Uint8Array>)
    .transform(stream => {
      return new EventStream(stream, rawEvent => {
        return {
          value: z.lazy(() =>
            FunctionStreamCallStreamPostResponseBody$inboundSchema
          ).parse(rawEvent),
        };
      });
    }),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type FunctionStreamCallStreamPostResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: never;
};

/** @internal */
export const FunctionStreamCallStreamPostResponse$outboundSchema: z.ZodType<
  FunctionStreamCallStreamPostResponse$Outbound,
  z.ZodTypeDef,
  FunctionStreamCallStreamPostResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.never(),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionStreamCallStreamPostResponse$ {
  /** @deprecated use `FunctionStreamCallStreamPostResponse$inboundSchema` instead. */
  export const inboundSchema =
    FunctionStreamCallStreamPostResponse$inboundSchema;
  /** @deprecated use `FunctionStreamCallStreamPostResponse$outboundSchema` instead. */
  export const outboundSchema =
    FunctionStreamCallStreamPostResponse$outboundSchema;
  /** @deprecated use `FunctionStreamCallStreamPostResponse$Outbound` instead. */
  export type Outbound = FunctionStreamCallStreamPostResponse$Outbound;
}

export function functionStreamCallStreamPostResponseToJSON(
  functionStreamCallStreamPostResponse: FunctionStreamCallStreamPostResponse,
): string {
  return JSON.stringify(
    FunctionStreamCallStreamPostResponse$outboundSchema.parse(
      functionStreamCallStreamPostResponse,
    ),
  );
}

export function functionStreamCallStreamPostResponseFromJSON(
  jsonString: string,
): SafeParseResult<FunctionStreamCallStreamPostResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FunctionStreamCallStreamPostResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionStreamCallStreamPostResponse' from JSON`,
  );
}
