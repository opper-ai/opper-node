/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { EventStream } from "../../lib/event-streams.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The actual data payload containing streaming chunk information
 */
export type FunctionStreamCallStreamPostData = {
  /**
   * Incremental text content generated by the model
   */
  delta?: string | undefined;
  /**
   * Unique identifier for the execution span
   */
  spanId?: string | undefined;
};

/**
 * Server-Sent Event following the SSE specification
 */
export type FunctionStreamCallStreamPostResponseBody = {
  /**
   * Event ID for the SSE event
   */
  id?: string | undefined;
  /**
   * Event type for the SSE event
   */
  event?: string | undefined;
  /**
   * The actual data payload containing streaming chunk information
   */
  data: FunctionStreamCallStreamPostData;
  /**
   * Retry interval in milliseconds for the SSE connection
   */
  retry?: number | undefined;
};

export type FunctionStreamCallStreamPostResponse = {
  headers: { [k: string]: Array<string> };
  result: EventStream<FunctionStreamCallStreamPostResponseBody>;
};

/** @internal */
export const FunctionStreamCallStreamPostData$inboundSchema: z.ZodType<
  FunctionStreamCallStreamPostData,
  z.ZodTypeDef,
  unknown
> = z.object({
  delta: z.string().optional(),
  span_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "span_id": "spanId",
  });
});

/** @internal */
export type FunctionStreamCallStreamPostData$Outbound = {
  delta?: string | undefined;
  span_id?: string | undefined;
};

/** @internal */
export const FunctionStreamCallStreamPostData$outboundSchema: z.ZodType<
  FunctionStreamCallStreamPostData$Outbound,
  z.ZodTypeDef,
  FunctionStreamCallStreamPostData
> = z.object({
  delta: z.string().optional(),
  spanId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    spanId: "span_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionStreamCallStreamPostData$ {
  /** @deprecated use `FunctionStreamCallStreamPostData$inboundSchema` instead. */
  export const inboundSchema = FunctionStreamCallStreamPostData$inboundSchema;
  /** @deprecated use `FunctionStreamCallStreamPostData$outboundSchema` instead. */
  export const outboundSchema = FunctionStreamCallStreamPostData$outboundSchema;
  /** @deprecated use `FunctionStreamCallStreamPostData$Outbound` instead. */
  export type Outbound = FunctionStreamCallStreamPostData$Outbound;
}

export function functionStreamCallStreamPostDataToJSON(
  functionStreamCallStreamPostData: FunctionStreamCallStreamPostData,
): string {
  return JSON.stringify(
    FunctionStreamCallStreamPostData$outboundSchema.parse(
      functionStreamCallStreamPostData,
    ),
  );
}

export function functionStreamCallStreamPostDataFromJSON(
  jsonString: string,
): SafeParseResult<FunctionStreamCallStreamPostData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionStreamCallStreamPostData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionStreamCallStreamPostData' from JSON`,
  );
}

/** @internal */
export const FunctionStreamCallStreamPostResponseBody$inboundSchema: z.ZodType<
  FunctionStreamCallStreamPostResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  event: z.string().optional(),
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(z.lazy(() => FunctionStreamCallStreamPostData$inboundSchema)),
  retry: z.number().int().optional(),
});

/** @internal */
export type FunctionStreamCallStreamPostResponseBody$Outbound = {
  id?: string | undefined;
  event?: string | undefined;
  data: FunctionStreamCallStreamPostData$Outbound;
  retry?: number | undefined;
};

/** @internal */
export const FunctionStreamCallStreamPostResponseBody$outboundSchema: z.ZodType<
  FunctionStreamCallStreamPostResponseBody$Outbound,
  z.ZodTypeDef,
  FunctionStreamCallStreamPostResponseBody
> = z.object({
  id: z.string().optional(),
  event: z.string().optional(),
  data: z.lazy(() => FunctionStreamCallStreamPostData$outboundSchema),
  retry: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionStreamCallStreamPostResponseBody$ {
  /** @deprecated use `FunctionStreamCallStreamPostResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    FunctionStreamCallStreamPostResponseBody$inboundSchema;
  /** @deprecated use `FunctionStreamCallStreamPostResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FunctionStreamCallStreamPostResponseBody$outboundSchema;
  /** @deprecated use `FunctionStreamCallStreamPostResponseBody$Outbound` instead. */
  export type Outbound = FunctionStreamCallStreamPostResponseBody$Outbound;
}

export function functionStreamCallStreamPostResponseBodyToJSON(
  functionStreamCallStreamPostResponseBody:
    FunctionStreamCallStreamPostResponseBody,
): string {
  return JSON.stringify(
    FunctionStreamCallStreamPostResponseBody$outboundSchema.parse(
      functionStreamCallStreamPostResponseBody,
    ),
  );
}

export function functionStreamCallStreamPostResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  FunctionStreamCallStreamPostResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FunctionStreamCallStreamPostResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FunctionStreamCallStreamPostResponseBody' from JSON`,
  );
}

/** @internal */
export const FunctionStreamCallStreamPostResponse$inboundSchema: z.ZodType<
  FunctionStreamCallStreamPostResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.instanceof(ReadableStream<Uint8Array>).transform(stream => {
    return new EventStream({
      stream,
      decoder(rawEvent) {
        const schema = z.lazy(() =>
          FunctionStreamCallStreamPostResponseBody$inboundSchema
        );
        return schema.parse(rawEvent);
      },
    });
  }),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type FunctionStreamCallStreamPostResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: never;
};

/** @internal */
export const FunctionStreamCallStreamPostResponse$outboundSchema: z.ZodType<
  FunctionStreamCallStreamPostResponse$Outbound,
  z.ZodTypeDef,
  FunctionStreamCallStreamPostResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.never(),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionStreamCallStreamPostResponse$ {
  /** @deprecated use `FunctionStreamCallStreamPostResponse$inboundSchema` instead. */
  export const inboundSchema =
    FunctionStreamCallStreamPostResponse$inboundSchema;
  /** @deprecated use `FunctionStreamCallStreamPostResponse$outboundSchema` instead. */
  export const outboundSchema =
    FunctionStreamCallStreamPostResponse$outboundSchema;
  /** @deprecated use `FunctionStreamCallStreamPostResponse$Outbound` instead. */
  export type Outbound = FunctionStreamCallStreamPostResponse$Outbound;
}

export function functionStreamCallStreamPostResponseToJSON(
  functionStreamCallStreamPostResponse: FunctionStreamCallStreamPostResponse,
): string {
  return JSON.stringify(
    FunctionStreamCallStreamPostResponse$outboundSchema.parse(
      functionStreamCallStreamPostResponse,
    ),
  );
}

export function functionStreamCallStreamPostResponseFromJSON(
  jsonString: string,
): SafeParseResult<FunctionStreamCallStreamPostResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FunctionStreamCallStreamPostResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionStreamCallStreamPostResponse' from JSON`,
  );
}
