/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AppApiPublicV2FunctionsCallFunctionResponse = {
  /**
   * The ID of the span of the call
   */
  spanId: string;
  /**
   * Result of the task if the call does not use an output schema
   */
  message?: string | null | undefined;
  /**
   * Result of the task if the call uses an output schema
   */
  jsonPayload?: any | null | undefined;
  /**
   * True if the result was returned from a cached results
   */
  cached?: boolean | undefined;
  /**
   * The images generated by the call. Only available for image models. Depending on the configuration, the response can either be a list of image urls or a base64 encoded images.
   */
  images?: Array<string> | null | undefined;
  /**
   * The usage of the call split into input and output tokens as well as the total tokens and an optional breakdown of the input and output tokens.The input tokens are the tokens sent to the model and the output tokens are the tokens received from the model. The total tokens is the sum of input and output tokens.
   */
  usage?: { [k: string]: any } | null | undefined;
  /**
   * The cost in USD of the call split into total, generation and platform costs where total is the sum of generation and platform costs
   */
  cost?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const AppApiPublicV2FunctionsCallFunctionResponse$inboundSchema:
  z.ZodType<
    AppApiPublicV2FunctionsCallFunctionResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    span_id: z.string(),
    message: z.nullable(z.string()).optional(),
    json_payload: z.nullable(z.any()).optional(),
    cached: z.boolean().default(false),
    images: z.nullable(z.array(z.string())).optional(),
    usage: z.nullable(z.record(z.any())).optional(),
    cost: z.nullable(z.record(z.any())).optional(),
  }).transform((v) => {
    return remap$(v, {
      "span_id": "spanId",
      "json_payload": "jsonPayload",
    });
  });

/** @internal */
export type AppApiPublicV2FunctionsCallFunctionResponse$Outbound = {
  span_id: string;
  message?: string | null | undefined;
  json_payload?: any | null | undefined;
  cached: boolean;
  images?: Array<string> | null | undefined;
  usage?: { [k: string]: any } | null | undefined;
  cost?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const AppApiPublicV2FunctionsCallFunctionResponse$outboundSchema:
  z.ZodType<
    AppApiPublicV2FunctionsCallFunctionResponse$Outbound,
    z.ZodTypeDef,
    AppApiPublicV2FunctionsCallFunctionResponse
  > = z.object({
    spanId: z.string(),
    message: z.nullable(z.string()).optional(),
    jsonPayload: z.nullable(z.any()).optional(),
    cached: z.boolean().default(false),
    images: z.nullable(z.array(z.string())).optional(),
    usage: z.nullable(z.record(z.any())).optional(),
    cost: z.nullable(z.record(z.any())).optional(),
  }).transform((v) => {
    return remap$(v, {
      spanId: "span_id",
      jsonPayload: "json_payload",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppApiPublicV2FunctionsCallFunctionResponse$ {
  /** @deprecated use `AppApiPublicV2FunctionsCallFunctionResponse$inboundSchema` instead. */
  export const inboundSchema =
    AppApiPublicV2FunctionsCallFunctionResponse$inboundSchema;
  /** @deprecated use `AppApiPublicV2FunctionsCallFunctionResponse$outboundSchema` instead. */
  export const outboundSchema =
    AppApiPublicV2FunctionsCallFunctionResponse$outboundSchema;
  /** @deprecated use `AppApiPublicV2FunctionsCallFunctionResponse$Outbound` instead. */
  export type Outbound = AppApiPublicV2FunctionsCallFunctionResponse$Outbound;
}

export function appApiPublicV2FunctionsCallFunctionResponseToJSON(
  appApiPublicV2FunctionsCallFunctionResponse:
    AppApiPublicV2FunctionsCallFunctionResponse,
): string {
  return JSON.stringify(
    AppApiPublicV2FunctionsCallFunctionResponse$outboundSchema.parse(
      appApiPublicV2FunctionsCallFunctionResponse,
    ),
  );
}

export function appApiPublicV2FunctionsCallFunctionResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  AppApiPublicV2FunctionsCallFunctionResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AppApiPublicV2FunctionsCallFunctionResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AppApiPublicV2FunctionsCallFunctionResponse' from JSON`,
  );
}
