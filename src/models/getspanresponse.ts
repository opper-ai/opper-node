/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type GetSpanResponse = {
  /**
   * The name of the span, something descriptive about the span that will be used to identify it when querying
   */
  name: string;
  /**
   * The start time of the span in UTC
   */
  startTime?: Date | null | undefined;
  id: string;
  /**
   * The id of the trace
   */
  traceId?: string | null | undefined;
  /**
   * The id of the parent span
   */
  parentId?: string | null | undefined;
  /**
   * The type of the span
   */
  type?: string | null | undefined;
  /**
   * The end time of the span in UTC
   */
  endTime?: Date | null | undefined;
  /**
   * The input of the span
   */
  input?: any | null | undefined;
  /**
   * The output of the span
   */
  output?: any | null | undefined;
  /**
   * In case of an error, the error message
   */
  error?: string | null | undefined;
  /**
   * The metadata of the span
   */
  meta?: { [k: string]: any } | null | undefined;
  /**
   * The score of the span
   */
  score?: number | null | undefined;
};

/** @internal */
export const GetSpanResponse$inboundSchema: z.ZodType<
  GetSpanResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  start_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  id: z.string(),
  trace_id: z.nullable(z.string()).optional(),
  parent_id: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  end_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  input: z.nullable(z.any()).optional(),
  output: z.nullable(z.any()).optional(),
  error: z.nullable(z.string()).optional(),
  meta: z.nullable(z.record(z.any())).optional(),
  score: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "start_time": "startTime",
    "trace_id": "traceId",
    "parent_id": "parentId",
    "end_time": "endTime",
  });
});

/** @internal */
export type GetSpanResponse$Outbound = {
  name: string;
  start_time?: string | null | undefined;
  id: string;
  trace_id?: string | null | undefined;
  parent_id?: string | null | undefined;
  type?: string | null | undefined;
  end_time?: string | null | undefined;
  input?: any | null | undefined;
  output?: any | null | undefined;
  error?: string | null | undefined;
  meta?: { [k: string]: any } | null | undefined;
  score?: number | null | undefined;
};

/** @internal */
export const GetSpanResponse$outboundSchema: z.ZodType<
  GetSpanResponse$Outbound,
  z.ZodTypeDef,
  GetSpanResponse
> = z.object({
  name: z.string(),
  startTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  id: z.string(),
  traceId: z.nullable(z.string()).optional(),
  parentId: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  endTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  input: z.nullable(z.any()).optional(),
  output: z.nullable(z.any()).optional(),
  error: z.nullable(z.string()).optional(),
  meta: z.nullable(z.record(z.any())).optional(),
  score: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    startTime: "start_time",
    traceId: "trace_id",
    parentId: "parent_id",
    endTime: "end_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSpanResponse$ {
  /** @deprecated use `GetSpanResponse$inboundSchema` instead. */
  export const inboundSchema = GetSpanResponse$inboundSchema;
  /** @deprecated use `GetSpanResponse$outboundSchema` instead. */
  export const outboundSchema = GetSpanResponse$outboundSchema;
  /** @deprecated use `GetSpanResponse$Outbound` instead. */
  export type Outbound = GetSpanResponse$Outbound;
}

export function getSpanResponseToJSON(
  getSpanResponse: GetSpanResponse,
): string {
  return JSON.stringify(GetSpanResponse$outboundSchema.parse(getSpanResponse));
}

export function getSpanResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetSpanResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSpanResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSpanResponse' from JSON`,
  );
}
