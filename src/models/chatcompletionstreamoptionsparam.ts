/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ChatCompletionStreamOptionsParam = {
  includeUsage?: boolean | undefined;
};

/** @internal */
export const ChatCompletionStreamOptionsParam$inboundSchema: z.ZodType<
  ChatCompletionStreamOptionsParam,
  z.ZodTypeDef,
  unknown
> = z.object({
  include_usage: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "include_usage": "includeUsage",
  });
});

/** @internal */
export type ChatCompletionStreamOptionsParam$Outbound = {
  include_usage?: boolean | undefined;
};

/** @internal */
export const ChatCompletionStreamOptionsParam$outboundSchema: z.ZodType<
  ChatCompletionStreamOptionsParam$Outbound,
  z.ZodTypeDef,
  ChatCompletionStreamOptionsParam
> = z.object({
  includeUsage: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    includeUsage: "include_usage",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionStreamOptionsParam$ {
  /** @deprecated use `ChatCompletionStreamOptionsParam$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionStreamOptionsParam$inboundSchema;
  /** @deprecated use `ChatCompletionStreamOptionsParam$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionStreamOptionsParam$outboundSchema;
  /** @deprecated use `ChatCompletionStreamOptionsParam$Outbound` instead. */
  export type Outbound = ChatCompletionStreamOptionsParam$Outbound;
}

export function chatCompletionStreamOptionsParamToJSON(
  chatCompletionStreamOptionsParam: ChatCompletionStreamOptionsParam,
): string {
  return JSON.stringify(
    ChatCompletionStreamOptionsParam$outboundSchema.parse(
      chatCompletionStreamOptionsParam,
    ),
  );
}

export function chatCompletionStreamOptionsParamFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionStreamOptionsParam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionStreamOptionsParam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionStreamOptionsParam' from JSON`,
  );
}
