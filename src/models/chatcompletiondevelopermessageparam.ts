/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatCompletionContentPartTextParam,
  ChatCompletionContentPartTextParam$inboundSchema,
  ChatCompletionContentPartTextParam$Outbound,
  ChatCompletionContentPartTextParam$outboundSchema,
} from "./chatcompletioncontentparttextparam.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ChatCompletionDeveloperMessageParamContent =
  | string
  | Array<ChatCompletionContentPartTextParam>;

export type ChatCompletionDeveloperMessageParam = {
  content: string | Array<ChatCompletionContentPartTextParam>;
  role?: "developer" | undefined;
  name?: string | undefined;
};

/** @internal */
export const ChatCompletionDeveloperMessageParamContent$inboundSchema:
  z.ZodType<ChatCompletionDeveloperMessageParamContent, z.ZodTypeDef, unknown> =
    z.union([
      z.string(),
      z.array(ChatCompletionContentPartTextParam$inboundSchema),
    ]);

/** @internal */
export type ChatCompletionDeveloperMessageParamContent$Outbound =
  | string
  | Array<ChatCompletionContentPartTextParam$Outbound>;

/** @internal */
export const ChatCompletionDeveloperMessageParamContent$outboundSchema:
  z.ZodType<
    ChatCompletionDeveloperMessageParamContent$Outbound,
    z.ZodTypeDef,
    ChatCompletionDeveloperMessageParamContent
  > = z.union([
    z.string(),
    z.array(ChatCompletionContentPartTextParam$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionDeveloperMessageParamContent$ {
  /** @deprecated use `ChatCompletionDeveloperMessageParamContent$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionDeveloperMessageParamContent$inboundSchema;
  /** @deprecated use `ChatCompletionDeveloperMessageParamContent$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionDeveloperMessageParamContent$outboundSchema;
  /** @deprecated use `ChatCompletionDeveloperMessageParamContent$Outbound` instead. */
  export type Outbound = ChatCompletionDeveloperMessageParamContent$Outbound;
}

export function chatCompletionDeveloperMessageParamContentToJSON(
  chatCompletionDeveloperMessageParamContent:
    ChatCompletionDeveloperMessageParamContent,
): string {
  return JSON.stringify(
    ChatCompletionDeveloperMessageParamContent$outboundSchema.parse(
      chatCompletionDeveloperMessageParamContent,
    ),
  );
}

export function chatCompletionDeveloperMessageParamContentFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionDeveloperMessageParamContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionDeveloperMessageParamContent$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionDeveloperMessageParamContent' from JSON`,
  );
}

/** @internal */
export const ChatCompletionDeveloperMessageParam$inboundSchema: z.ZodType<
  ChatCompletionDeveloperMessageParam,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.union([
    z.string(),
    z.array(ChatCompletionContentPartTextParam$inboundSchema),
  ]),
  role: z.literal("developer").default("developer").optional(),
  name: z.string().optional(),
});

/** @internal */
export type ChatCompletionDeveloperMessageParam$Outbound = {
  content: string | Array<ChatCompletionContentPartTextParam$Outbound>;
  role: "developer";
  name?: string | undefined;
};

/** @internal */
export const ChatCompletionDeveloperMessageParam$outboundSchema: z.ZodType<
  ChatCompletionDeveloperMessageParam$Outbound,
  z.ZodTypeDef,
  ChatCompletionDeveloperMessageParam
> = z.object({
  content: z.union([
    z.string(),
    z.array(ChatCompletionContentPartTextParam$outboundSchema),
  ]),
  role: z.literal("developer").default("developer" as const),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionDeveloperMessageParam$ {
  /** @deprecated use `ChatCompletionDeveloperMessageParam$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionDeveloperMessageParam$inboundSchema;
  /** @deprecated use `ChatCompletionDeveloperMessageParam$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionDeveloperMessageParam$outboundSchema;
  /** @deprecated use `ChatCompletionDeveloperMessageParam$Outbound` instead. */
  export type Outbound = ChatCompletionDeveloperMessageParam$Outbound;
}

export function chatCompletionDeveloperMessageParamToJSON(
  chatCompletionDeveloperMessageParam: ChatCompletionDeveloperMessageParam,
): string {
  return JSON.stringify(
    ChatCompletionDeveloperMessageParam$outboundSchema.parse(
      chatCompletionDeveloperMessageParam,
    ),
  );
}

export function chatCompletionDeveloperMessageParamFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionDeveloperMessageParam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionDeveloperMessageParam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionDeveloperMessageParam' from JSON`,
  );
}
