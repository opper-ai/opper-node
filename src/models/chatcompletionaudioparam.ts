/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ChatCompletionAudioParamFormat = {
  Wav: "wav",
  Aac: "aac",
  Mp3: "mp3",
  Flac: "flac",
  Opus: "opus",
  Pcm16: "pcm16",
} as const;
export type ChatCompletionAudioParamFormat = ClosedEnum<
  typeof ChatCompletionAudioParamFormat
>;

export const VoiceEnum = {
  Alloy: "alloy",
  Ash: "ash",
  Ballad: "ballad",
  Coral: "coral",
  Echo: "echo",
  Fable: "fable",
  Onyx: "onyx",
  Nova: "nova",
  Sage: "sage",
  Shimmer: "shimmer",
  Verse: "verse",
} as const;
export type VoiceEnum = ClosedEnum<typeof VoiceEnum>;

export type Voice = string | VoiceEnum;

export type ChatCompletionAudioParam = {
  format: ChatCompletionAudioParamFormat;
  voice: string | VoiceEnum;
};

/** @internal */
export const ChatCompletionAudioParamFormat$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionAudioParamFormat
> = z.nativeEnum(ChatCompletionAudioParamFormat);

/** @internal */
export const ChatCompletionAudioParamFormat$outboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionAudioParamFormat
> = ChatCompletionAudioParamFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionAudioParamFormat$ {
  /** @deprecated use `ChatCompletionAudioParamFormat$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionAudioParamFormat$inboundSchema;
  /** @deprecated use `ChatCompletionAudioParamFormat$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionAudioParamFormat$outboundSchema;
}

/** @internal */
export const VoiceEnum$inboundSchema: z.ZodNativeEnum<typeof VoiceEnum> = z
  .nativeEnum(VoiceEnum);

/** @internal */
export const VoiceEnum$outboundSchema: z.ZodNativeEnum<typeof VoiceEnum> =
  VoiceEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VoiceEnum$ {
  /** @deprecated use `VoiceEnum$inboundSchema` instead. */
  export const inboundSchema = VoiceEnum$inboundSchema;
  /** @deprecated use `VoiceEnum$outboundSchema` instead. */
  export const outboundSchema = VoiceEnum$outboundSchema;
}

/** @internal */
export const Voice$inboundSchema: z.ZodType<Voice, z.ZodTypeDef, unknown> = z
  .union([z.string(), VoiceEnum$inboundSchema]);

/** @internal */
export type Voice$Outbound = string | string;

/** @internal */
export const Voice$outboundSchema: z.ZodType<
  Voice$Outbound,
  z.ZodTypeDef,
  Voice
> = z.union([z.string(), VoiceEnum$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Voice$ {
  /** @deprecated use `Voice$inboundSchema` instead. */
  export const inboundSchema = Voice$inboundSchema;
  /** @deprecated use `Voice$outboundSchema` instead. */
  export const outboundSchema = Voice$outboundSchema;
  /** @deprecated use `Voice$Outbound` instead. */
  export type Outbound = Voice$Outbound;
}

export function voiceToJSON(voice: Voice): string {
  return JSON.stringify(Voice$outboundSchema.parse(voice));
}

export function voiceFromJSON(
  jsonString: string,
): SafeParseResult<Voice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Voice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Voice' from JSON`,
  );
}

/** @internal */
export const ChatCompletionAudioParam$inboundSchema: z.ZodType<
  ChatCompletionAudioParam,
  z.ZodTypeDef,
  unknown
> = z.object({
  format: ChatCompletionAudioParamFormat$inboundSchema,
  voice: z.union([z.string(), VoiceEnum$inboundSchema]),
});

/** @internal */
export type ChatCompletionAudioParam$Outbound = {
  format: string;
  voice: string | string;
};

/** @internal */
export const ChatCompletionAudioParam$outboundSchema: z.ZodType<
  ChatCompletionAudioParam$Outbound,
  z.ZodTypeDef,
  ChatCompletionAudioParam
> = z.object({
  format: ChatCompletionAudioParamFormat$outboundSchema,
  voice: z.union([z.string(), VoiceEnum$outboundSchema]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionAudioParam$ {
  /** @deprecated use `ChatCompletionAudioParam$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionAudioParam$inboundSchema;
  /** @deprecated use `ChatCompletionAudioParam$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionAudioParam$outboundSchema;
  /** @deprecated use `ChatCompletionAudioParam$Outbound` instead. */
  export type Outbound = ChatCompletionAudioParam$Outbound;
}

export function chatCompletionAudioParamToJSON(
  chatCompletionAudioParam: ChatCompletionAudioParam,
): string {
  return JSON.stringify(
    ChatCompletionAudioParam$outboundSchema.parse(chatCompletionAudioParam),
  );
}

export function chatCompletionAudioParamFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionAudioParam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionAudioParam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionAudioParam' from JSON`,
  );
}
