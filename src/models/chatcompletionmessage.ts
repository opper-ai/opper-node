/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Annotation,
  Annotation$inboundSchema,
  Annotation$Outbound,
  Annotation$outboundSchema,
} from "./annotation.js";
import {
  ChatCompletionAudio,
  ChatCompletionAudio$inboundSchema,
  ChatCompletionAudio$Outbound,
  ChatCompletionAudio$outboundSchema,
} from "./chatcompletionaudio.js";
import {
  ChatCompletionMessageCustomToolCall,
  ChatCompletionMessageCustomToolCall$inboundSchema,
  ChatCompletionMessageCustomToolCall$Outbound,
  ChatCompletionMessageCustomToolCall$outboundSchema,
} from "./chatcompletionmessagecustomtoolcall.js";
import {
  ChatCompletionMessageFunctionToolCall,
  ChatCompletionMessageFunctionToolCall$inboundSchema,
  ChatCompletionMessageFunctionToolCall$Outbound,
  ChatCompletionMessageFunctionToolCall$outboundSchema,
} from "./chatcompletionmessagefunctiontoolcall.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  FunctionCallOutput,
  FunctionCallOutput$inboundSchema,
  FunctionCallOutput$Outbound,
  FunctionCallOutput$outboundSchema,
} from "./functioncalloutput.js";

export type ChatCompletionMessageToolCall =
  | ChatCompletionMessageFunctionToolCall
  | ChatCompletionMessageCustomToolCall;

export type ChatCompletionMessage = {
  content?: string | null | undefined;
  refusal?: string | null | undefined;
  role?: "assistant" | undefined;
  annotations?: Array<Annotation> | null | undefined;
  audio?: ChatCompletionAudio | null | undefined;
  functionCall?: FunctionCallOutput | null | undefined;
  toolCalls?:
    | Array<
      | ChatCompletionMessageFunctionToolCall
      | ChatCompletionMessageCustomToolCall
    >
    | null
    | undefined;
  additionalProperties?: { [k: string]: any };
};

/** @internal */
export const ChatCompletionMessageToolCall$inboundSchema: z.ZodType<
  ChatCompletionMessageToolCall,
  z.ZodTypeDef,
  unknown
> = z.union([
  ChatCompletionMessageFunctionToolCall$inboundSchema,
  ChatCompletionMessageCustomToolCall$inboundSchema,
]);

/** @internal */
export type ChatCompletionMessageToolCall$Outbound =
  | ChatCompletionMessageFunctionToolCall$Outbound
  | ChatCompletionMessageCustomToolCall$Outbound;

/** @internal */
export const ChatCompletionMessageToolCall$outboundSchema: z.ZodType<
  ChatCompletionMessageToolCall$Outbound,
  z.ZodTypeDef,
  ChatCompletionMessageToolCall
> = z.union([
  ChatCompletionMessageFunctionToolCall$outboundSchema,
  ChatCompletionMessageCustomToolCall$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionMessageToolCall$ {
  /** @deprecated use `ChatCompletionMessageToolCall$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionMessageToolCall$inboundSchema;
  /** @deprecated use `ChatCompletionMessageToolCall$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionMessageToolCall$outboundSchema;
  /** @deprecated use `ChatCompletionMessageToolCall$Outbound` instead. */
  export type Outbound = ChatCompletionMessageToolCall$Outbound;
}

export function chatCompletionMessageToolCallToJSON(
  chatCompletionMessageToolCall: ChatCompletionMessageToolCall,
): string {
  return JSON.stringify(
    ChatCompletionMessageToolCall$outboundSchema.parse(
      chatCompletionMessageToolCall,
    ),
  );
}

export function chatCompletionMessageToolCallFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionMessageToolCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionMessageToolCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionMessageToolCall' from JSON`,
  );
}

/** @internal */
export const ChatCompletionMessage$inboundSchema: z.ZodType<
  ChatCompletionMessage,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    content: z.nullable(z.string()).optional(),
    refusal: z.nullable(z.string()).optional(),
    role: z.literal("assistant").default("assistant").optional(),
    annotations: z.nullable(z.array(Annotation$inboundSchema)).optional(),
    audio: z.nullable(ChatCompletionAudio$inboundSchema).optional(),
    function_call: z.nullable(FunctionCallOutput$inboundSchema).optional(),
    tool_calls: z.nullable(
      z.array(
        z.union([
          ChatCompletionMessageFunctionToolCall$inboundSchema,
          ChatCompletionMessageCustomToolCall$inboundSchema,
        ]),
      ),
    ).optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "function_call": "functionCall",
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type ChatCompletionMessage$Outbound = {
  content?: string | null | undefined;
  refusal?: string | null | undefined;
  role: "assistant";
  annotations?: Array<Annotation$Outbound> | null | undefined;
  audio?: ChatCompletionAudio$Outbound | null | undefined;
  function_call?: FunctionCallOutput$Outbound | null | undefined;
  tool_calls?:
    | Array<
      | ChatCompletionMessageFunctionToolCall$Outbound
      | ChatCompletionMessageCustomToolCall$Outbound
    >
    | null
    | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const ChatCompletionMessage$outboundSchema: z.ZodType<
  ChatCompletionMessage$Outbound,
  z.ZodTypeDef,
  ChatCompletionMessage
> = z.object({
  content: z.nullable(z.string()).optional(),
  refusal: z.nullable(z.string()).optional(),
  role: z.literal("assistant").default("assistant" as const),
  annotations: z.nullable(z.array(Annotation$outboundSchema)).optional(),
  audio: z.nullable(ChatCompletionAudio$outboundSchema).optional(),
  functionCall: z.nullable(FunctionCallOutput$outboundSchema).optional(),
  toolCalls: z.nullable(
    z.array(
      z.union([
        ChatCompletionMessageFunctionToolCall$outboundSchema,
        ChatCompletionMessageCustomToolCall$outboundSchema,
      ]),
    ),
  ).optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      functionCall: "function_call",
      toolCalls: "tool_calls",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionMessage$ {
  /** @deprecated use `ChatCompletionMessage$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionMessage$inboundSchema;
  /** @deprecated use `ChatCompletionMessage$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionMessage$outboundSchema;
  /** @deprecated use `ChatCompletionMessage$Outbound` instead. */
  export type Outbound = ChatCompletionMessage$Outbound;
}

export function chatCompletionMessageToJSON(
  chatCompletionMessage: ChatCompletionMessage,
): string {
  return JSON.stringify(
    ChatCompletionMessage$outboundSchema.parse(chatCompletionMessage),
  );
}

export function chatCompletionMessageFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionMessage' from JSON`,
  );
}
