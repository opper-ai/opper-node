/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  FunctionOutput,
  FunctionOutput$inboundSchema,
  FunctionOutput$Outbound,
  FunctionOutput$outboundSchema,
} from "./functionoutput.js";

export type ChatCompletionMessageToolCall = {
  id: string;
  function: FunctionOutput;
  type?: "function" | undefined;
  additionalProperties?: { [k: string]: any };
};

/** @internal */
export const ChatCompletionMessageToolCall$inboundSchema: z.ZodType<
  ChatCompletionMessageToolCall,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    id: z.string(),
    function: FunctionOutput$inboundSchema,
    type: z.literal("function").default("function").optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type ChatCompletionMessageToolCall$Outbound = {
  id: string;
  function: FunctionOutput$Outbound;
  type: "function";
  [additionalProperties: string]: unknown;
};

/** @internal */
export const ChatCompletionMessageToolCall$outboundSchema: z.ZodType<
  ChatCompletionMessageToolCall$Outbound,
  z.ZodTypeDef,
  ChatCompletionMessageToolCall
> = z.object({
  id: z.string(),
  function: FunctionOutput$outboundSchema,
  type: z.literal("function").default("function" as const),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionMessageToolCall$ {
  /** @deprecated use `ChatCompletionMessageToolCall$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionMessageToolCall$inboundSchema;
  /** @deprecated use `ChatCompletionMessageToolCall$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionMessageToolCall$outboundSchema;
  /** @deprecated use `ChatCompletionMessageToolCall$Outbound` instead. */
  export type Outbound = ChatCompletionMessageToolCall$Outbound;
}

export function chatCompletionMessageToolCallToJSON(
  chatCompletionMessageToolCall: ChatCompletionMessageToolCall,
): string {
  return JSON.stringify(
    ChatCompletionMessageToolCall$outboundSchema.parse(
      chatCompletionMessageToolCall,
    ),
  );
}

export function chatCompletionMessageToolCallFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionMessageToolCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionMessageToolCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionMessageToolCall' from JSON`,
  );
}
