/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SpanData,
  SpanData$inboundSchema,
  SpanData$Outbound,
  SpanData$outboundSchema,
} from "./spandata.js";
import {
  SpanMetricData,
  SpanMetricData$inboundSchema,
  SpanMetricData$Outbound,
  SpanMetricData$outboundSchema,
} from "./spanmetricdata.js";

export type SpanSchema = {
  /**
   * The id of the span, set to the uuid of the span
   */
  id?: string | null | undefined;
  /**
   * The name of the span
   */
  name?: string | null | undefined;
  /**
   * The start time of the span
   */
  startTime?: Date | null | undefined;
  /**
   * The type of the span
   */
  type?: string | null | undefined;
  /**
   * The id of the parent span
   */
  parentId?: string | null | undefined;
  /**
   * The end time of the span
   */
  endTime?: Date | null | undefined;
  /**
   * The duration of the span in milliseconds
   */
  durationMs?: number | null | undefined;
  /**
   * Optional error of the span
   */
  error?: string | null | undefined;
  /**
   * The metadata of the span, can be used to add additional information about the span
   */
  meta?: { [k: string]: any } | null | undefined;
  /**
   * The data of the span
   */
  data?: SpanData | null | undefined;
  /**
   * The metrics of the span
   */
  metrics?: Array<SpanMetricData> | null | undefined;
  /**
   * The score of the span
   */
  score?: number | null | undefined;
};

/** @internal */
export const SpanSchema$inboundSchema: z.ZodType<
  SpanSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  start_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  type: z.nullable(z.string()).optional(),
  parent_id: z.nullable(z.string()).optional(),
  end_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  duration_ms: z.nullable(z.number().int()).optional(),
  error: z.nullable(z.string()).optional(),
  meta: z.nullable(z.record(z.any())).optional(),
  data: z.nullable(SpanData$inboundSchema).optional(),
  metrics: z.nullable(z.array(SpanMetricData$inboundSchema)).optional(),
  score: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "start_time": "startTime",
    "parent_id": "parentId",
    "end_time": "endTime",
    "duration_ms": "durationMs",
  });
});

/** @internal */
export type SpanSchema$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  start_time?: string | null | undefined;
  type?: string | null | undefined;
  parent_id?: string | null | undefined;
  end_time?: string | null | undefined;
  duration_ms?: number | null | undefined;
  error?: string | null | undefined;
  meta?: { [k: string]: any } | null | undefined;
  data?: SpanData$Outbound | null | undefined;
  metrics?: Array<SpanMetricData$Outbound> | null | undefined;
  score?: number | null | undefined;
};

/** @internal */
export const SpanSchema$outboundSchema: z.ZodType<
  SpanSchema$Outbound,
  z.ZodTypeDef,
  SpanSchema
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  startTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  type: z.nullable(z.string()).optional(),
  parentId: z.nullable(z.string()).optional(),
  endTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  durationMs: z.nullable(z.number().int()).optional(),
  error: z.nullable(z.string()).optional(),
  meta: z.nullable(z.record(z.any())).optional(),
  data: z.nullable(SpanData$outboundSchema).optional(),
  metrics: z.nullable(z.array(SpanMetricData$outboundSchema)).optional(),
  score: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    startTime: "start_time",
    parentId: "parent_id",
    endTime: "end_time",
    durationMs: "duration_ms",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SpanSchema$ {
  /** @deprecated use `SpanSchema$inboundSchema` instead. */
  export const inboundSchema = SpanSchema$inboundSchema;
  /** @deprecated use `SpanSchema$outboundSchema` instead. */
  export const outboundSchema = SpanSchema$outboundSchema;
  /** @deprecated use `SpanSchema$Outbound` instead. */
  export type Outbound = SpanSchema$Outbound;
}

export function spanSchemaToJSON(spanSchema: SpanSchema): string {
  return JSON.stringify(SpanSchema$outboundSchema.parse(spanSchema));
}

export function spanSchemaFromJSON(
  jsonString: string,
): SafeParseResult<SpanSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SpanSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SpanSchema' from JSON`,
  );
}
