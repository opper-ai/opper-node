/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatCompletionContentPartImageParam,
  ChatCompletionContentPartImageParam$inboundSchema,
  ChatCompletionContentPartImageParam$Outbound,
  ChatCompletionContentPartImageParam$outboundSchema,
} from "./chatcompletioncontentpartimageparam.js";
import {
  ChatCompletionContentPartInputAudioParam,
  ChatCompletionContentPartInputAudioParam$inboundSchema,
  ChatCompletionContentPartInputAudioParam$Outbound,
  ChatCompletionContentPartInputAudioParam$outboundSchema,
} from "./chatcompletioncontentpartinputaudioparam.js";
import {
  ChatCompletionContentPartTextParam,
  ChatCompletionContentPartTextParam$inboundSchema,
  ChatCompletionContentPartTextParam$Outbound,
  ChatCompletionContentPartTextParam$outboundSchema,
} from "./chatcompletioncontentparttextparam.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  FileT,
  FileT$inboundSchema,
  FileT$Outbound,
  FileT$outboundSchema,
} from "./file.js";

export type ChatCompletionUserMessageParamContent1 =
  | ChatCompletionContentPartTextParam
  | ChatCompletionContentPartImageParam
  | ChatCompletionContentPartInputAudioParam
  | FileT;

export type ChatCompletionUserMessageParamContent2 =
  | string
  | Array<
    | ChatCompletionContentPartTextParam
    | ChatCompletionContentPartImageParam
    | ChatCompletionContentPartInputAudioParam
    | FileT
  >;

export type ChatCompletionUserMessageParam = {
  content:
    | string
    | Array<
      | ChatCompletionContentPartTextParam
      | ChatCompletionContentPartImageParam
      | ChatCompletionContentPartInputAudioParam
      | FileT
    >;
  role?: "user" | undefined;
  name?: string | undefined;
};

/** @internal */
export const ChatCompletionUserMessageParamContent1$inboundSchema: z.ZodType<
  ChatCompletionUserMessageParamContent1,
  z.ZodTypeDef,
  unknown
> = z.union([
  ChatCompletionContentPartTextParam$inboundSchema,
  ChatCompletionContentPartImageParam$inboundSchema,
  ChatCompletionContentPartInputAudioParam$inboundSchema,
  FileT$inboundSchema,
]);

/** @internal */
export type ChatCompletionUserMessageParamContent1$Outbound =
  | ChatCompletionContentPartTextParam$Outbound
  | ChatCompletionContentPartImageParam$Outbound
  | ChatCompletionContentPartInputAudioParam$Outbound
  | FileT$Outbound;

/** @internal */
export const ChatCompletionUserMessageParamContent1$outboundSchema: z.ZodType<
  ChatCompletionUserMessageParamContent1$Outbound,
  z.ZodTypeDef,
  ChatCompletionUserMessageParamContent1
> = z.union([
  ChatCompletionContentPartTextParam$outboundSchema,
  ChatCompletionContentPartImageParam$outboundSchema,
  ChatCompletionContentPartInputAudioParam$outboundSchema,
  FileT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionUserMessageParamContent1$ {
  /** @deprecated use `ChatCompletionUserMessageParamContent1$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionUserMessageParamContent1$inboundSchema;
  /** @deprecated use `ChatCompletionUserMessageParamContent1$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionUserMessageParamContent1$outboundSchema;
  /** @deprecated use `ChatCompletionUserMessageParamContent1$Outbound` instead. */
  export type Outbound = ChatCompletionUserMessageParamContent1$Outbound;
}

export function chatCompletionUserMessageParamContent1ToJSON(
  chatCompletionUserMessageParamContent1:
    ChatCompletionUserMessageParamContent1,
): string {
  return JSON.stringify(
    ChatCompletionUserMessageParamContent1$outboundSchema.parse(
      chatCompletionUserMessageParamContent1,
    ),
  );
}

export function chatCompletionUserMessageParamContent1FromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionUserMessageParamContent1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionUserMessageParamContent1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionUserMessageParamContent1' from JSON`,
  );
}

/** @internal */
export const ChatCompletionUserMessageParamContent2$inboundSchema: z.ZodType<
  ChatCompletionUserMessageParamContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(
    z.union([
      ChatCompletionContentPartTextParam$inboundSchema,
      ChatCompletionContentPartImageParam$inboundSchema,
      ChatCompletionContentPartInputAudioParam$inboundSchema,
      FileT$inboundSchema,
    ]),
  ),
]);

/** @internal */
export type ChatCompletionUserMessageParamContent2$Outbound =
  | string
  | Array<
    | ChatCompletionContentPartTextParam$Outbound
    | ChatCompletionContentPartImageParam$Outbound
    | ChatCompletionContentPartInputAudioParam$Outbound
    | FileT$Outbound
  >;

/** @internal */
export const ChatCompletionUserMessageParamContent2$outboundSchema: z.ZodType<
  ChatCompletionUserMessageParamContent2$Outbound,
  z.ZodTypeDef,
  ChatCompletionUserMessageParamContent2
> = z.union([
  z.string(),
  z.array(
    z.union([
      ChatCompletionContentPartTextParam$outboundSchema,
      ChatCompletionContentPartImageParam$outboundSchema,
      ChatCompletionContentPartInputAudioParam$outboundSchema,
      FileT$outboundSchema,
    ]),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionUserMessageParamContent2$ {
  /** @deprecated use `ChatCompletionUserMessageParamContent2$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionUserMessageParamContent2$inboundSchema;
  /** @deprecated use `ChatCompletionUserMessageParamContent2$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionUserMessageParamContent2$outboundSchema;
  /** @deprecated use `ChatCompletionUserMessageParamContent2$Outbound` instead. */
  export type Outbound = ChatCompletionUserMessageParamContent2$Outbound;
}

export function chatCompletionUserMessageParamContent2ToJSON(
  chatCompletionUserMessageParamContent2:
    ChatCompletionUserMessageParamContent2,
): string {
  return JSON.stringify(
    ChatCompletionUserMessageParamContent2$outboundSchema.parse(
      chatCompletionUserMessageParamContent2,
    ),
  );
}

export function chatCompletionUserMessageParamContent2FromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionUserMessageParamContent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionUserMessageParamContent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionUserMessageParamContent2' from JSON`,
  );
}

/** @internal */
export const ChatCompletionUserMessageParam$inboundSchema: z.ZodType<
  ChatCompletionUserMessageParam,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.union([
    z.string(),
    z.array(
      z.union([
        ChatCompletionContentPartTextParam$inboundSchema,
        ChatCompletionContentPartImageParam$inboundSchema,
        ChatCompletionContentPartInputAudioParam$inboundSchema,
        FileT$inboundSchema,
      ]),
    ),
  ]),
  role: z.literal("user").default("user").optional(),
  name: z.string().optional(),
});

/** @internal */
export type ChatCompletionUserMessageParam$Outbound = {
  content:
    | string
    | Array<
      | ChatCompletionContentPartTextParam$Outbound
      | ChatCompletionContentPartImageParam$Outbound
      | ChatCompletionContentPartInputAudioParam$Outbound
      | FileT$Outbound
    >;
  role: "user";
  name?: string | undefined;
};

/** @internal */
export const ChatCompletionUserMessageParam$outboundSchema: z.ZodType<
  ChatCompletionUserMessageParam$Outbound,
  z.ZodTypeDef,
  ChatCompletionUserMessageParam
> = z.object({
  content: z.union([
    z.string(),
    z.array(
      z.union([
        ChatCompletionContentPartTextParam$outboundSchema,
        ChatCompletionContentPartImageParam$outboundSchema,
        ChatCompletionContentPartInputAudioParam$outboundSchema,
        FileT$outboundSchema,
      ]),
    ),
  ]),
  role: z.literal("user").default("user" as const),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionUserMessageParam$ {
  /** @deprecated use `ChatCompletionUserMessageParam$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionUserMessageParam$inboundSchema;
  /** @deprecated use `ChatCompletionUserMessageParam$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionUserMessageParam$outboundSchema;
  /** @deprecated use `ChatCompletionUserMessageParam$Outbound` instead. */
  export type Outbound = ChatCompletionUserMessageParam$Outbound;
}

export function chatCompletionUserMessageParamToJSON(
  chatCompletionUserMessageParam: ChatCompletionUserMessageParam,
): string {
  return JSON.stringify(
    ChatCompletionUserMessageParam$outboundSchema.parse(
      chatCompletionUserMessageParam,
    ),
  );
}

export function chatCompletionUserMessageParamFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionUserMessageParam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionUserMessageParam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionUserMessageParam' from JSON`,
  );
}
