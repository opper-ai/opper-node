/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CreateDatasetEntryRequest = {
  /**
   * The input to the dataset entry
   */
  input?: any | undefined;
  /**
   * The output to the dataset entry
   */
  output?: any | undefined;
  /**
   * The expected output to the dataset entry, this is an optionally edited version of the output
   */
  expected?: any | null | undefined;
  /**
   * The comment to the dataset entry
   */
  comment?: string | null | undefined;
};

/** @internal */
export const CreateDatasetEntryRequest$inboundSchema: z.ZodType<
  CreateDatasetEntryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  input: z.any().optional(),
  output: z.any().optional(),
  expected: z.nullable(z.any()).optional(),
  comment: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateDatasetEntryRequest$Outbound = {
  input?: any | undefined;
  output?: any | undefined;
  expected?: any | null | undefined;
  comment?: string | null | undefined;
};

/** @internal */
export const CreateDatasetEntryRequest$outboundSchema: z.ZodType<
  CreateDatasetEntryRequest$Outbound,
  z.ZodTypeDef,
  CreateDatasetEntryRequest
> = z.object({
  input: z.any().optional(),
  output: z.any().optional(),
  expected: z.nullable(z.any()).optional(),
  comment: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatasetEntryRequest$ {
  /** @deprecated use `CreateDatasetEntryRequest$inboundSchema` instead. */
  export const inboundSchema = CreateDatasetEntryRequest$inboundSchema;
  /** @deprecated use `CreateDatasetEntryRequest$outboundSchema` instead. */
  export const outboundSchema = CreateDatasetEntryRequest$outboundSchema;
  /** @deprecated use `CreateDatasetEntryRequest$Outbound` instead. */
  export type Outbound = CreateDatasetEntryRequest$Outbound;
}

export function createDatasetEntryRequestToJSON(
  createDatasetEntryRequest: CreateDatasetEntryRequest,
): string {
  return JSON.stringify(
    CreateDatasetEntryRequest$outboundSchema.parse(createDatasetEntryRequest),
  );
}

export function createDatasetEntryRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateDatasetEntryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDatasetEntryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatasetEntryRequest' from JSON`,
  );
}
