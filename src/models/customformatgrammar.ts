/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CustomFormatGrammarGrammar,
  CustomFormatGrammarGrammar$inboundSchema,
  CustomFormatGrammarGrammar$Outbound,
  CustomFormatGrammarGrammar$outboundSchema,
} from "./customformatgrammargrammar.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CustomFormatGrammar = {
  grammar: CustomFormatGrammarGrammar;
  type?: "grammar" | undefined;
};

/** @internal */
export const CustomFormatGrammar$inboundSchema: z.ZodType<
  CustomFormatGrammar,
  z.ZodTypeDef,
  unknown
> = z.object({
  grammar: CustomFormatGrammarGrammar$inboundSchema,
  type: z.literal("grammar").default("grammar").optional(),
});

/** @internal */
export type CustomFormatGrammar$Outbound = {
  grammar: CustomFormatGrammarGrammar$Outbound;
  type: "grammar";
};

/** @internal */
export const CustomFormatGrammar$outboundSchema: z.ZodType<
  CustomFormatGrammar$Outbound,
  z.ZodTypeDef,
  CustomFormatGrammar
> = z.object({
  grammar: CustomFormatGrammarGrammar$outboundSchema,
  type: z.literal("grammar").default("grammar" as const),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFormatGrammar$ {
  /** @deprecated use `CustomFormatGrammar$inboundSchema` instead. */
  export const inboundSchema = CustomFormatGrammar$inboundSchema;
  /** @deprecated use `CustomFormatGrammar$outboundSchema` instead. */
  export const outboundSchema = CustomFormatGrammar$outboundSchema;
  /** @deprecated use `CustomFormatGrammar$Outbound` instead. */
  export type Outbound = CustomFormatGrammar$Outbound;
}

export function customFormatGrammarToJSON(
  customFormatGrammar: CustomFormatGrammar,
): string {
  return JSON.stringify(
    CustomFormatGrammar$outboundSchema.parse(customFormatGrammar),
  );
}

export function customFormatGrammarFromJSON(
  jsonString: string,
): SafeParseResult<CustomFormatGrammar, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomFormatGrammar$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomFormatGrammar' from JSON`,
  );
}
