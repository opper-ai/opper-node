/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SpanMetricData = {
  /**
   * The id of the metric
   */
  id: string;
  /**
   * The dimension of the metric
   */
  dimension: string;
  /**
   * The value of the metric
   */
  value: number;
  /**
   * The timestamp when the metric was created
   */
  createdAt: Date;
  /**
   * The comment of the metric, can be used to add additional information about the metric
   */
  comment?: string | null | undefined;
};

/** @internal */
export const SpanMetricData$inboundSchema: z.ZodType<
  SpanMetricData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  dimension: z.string(),
  value: z.number(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  comment: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
  });
});

/** @internal */
export type SpanMetricData$Outbound = {
  id: string;
  dimension: string;
  value: number;
  created_at: string;
  comment?: string | null | undefined;
};

/** @internal */
export const SpanMetricData$outboundSchema: z.ZodType<
  SpanMetricData$Outbound,
  z.ZodTypeDef,
  SpanMetricData
> = z.object({
  id: z.string(),
  dimension: z.string(),
  value: z.number(),
  createdAt: z.date().transform(v => v.toISOString()),
  comment: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SpanMetricData$ {
  /** @deprecated use `SpanMetricData$inboundSchema` instead. */
  export const inboundSchema = SpanMetricData$inboundSchema;
  /** @deprecated use `SpanMetricData$outboundSchema` instead. */
  export const outboundSchema = SpanMetricData$outboundSchema;
  /** @deprecated use `SpanMetricData$Outbound` instead. */
  export type Outbound = SpanMetricData$Outbound;
}

export function spanMetricDataToJSON(spanMetricData: SpanMetricData): string {
  return JSON.stringify(SpanMetricData$outboundSchema.parse(spanMetricData));
}

export function spanMetricDataFromJSON(
  jsonString: string,
): SafeParseResult<SpanMetricData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SpanMetricData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SpanMetricData' from JSON`,
  );
}
