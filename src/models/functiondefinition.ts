/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type FunctionDefinition = {
  name: string;
  description?: string | undefined;
  parameters?: { [k: string]: any } | undefined;
  strict?: boolean | null | undefined;
};

/** @internal */
export const FunctionDefinition$inboundSchema: z.ZodType<
  FunctionDefinition,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  parameters: z.record(z.any()).optional(),
  strict: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type FunctionDefinition$Outbound = {
  name: string;
  description?: string | undefined;
  parameters?: { [k: string]: any } | undefined;
  strict?: boolean | null | undefined;
};

/** @internal */
export const FunctionDefinition$outboundSchema: z.ZodType<
  FunctionDefinition$Outbound,
  z.ZodTypeDef,
  FunctionDefinition
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  parameters: z.record(z.any()).optional(),
  strict: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionDefinition$ {
  /** @deprecated use `FunctionDefinition$inboundSchema` instead. */
  export const inboundSchema = FunctionDefinition$inboundSchema;
  /** @deprecated use `FunctionDefinition$outboundSchema` instead. */
  export const outboundSchema = FunctionDefinition$outboundSchema;
  /** @deprecated use `FunctionDefinition$Outbound` instead. */
  export type Outbound = FunctionDefinition$Outbound;
}

export function functionDefinitionToJSON(
  functionDefinition: FunctionDefinition,
): string {
  return JSON.stringify(
    FunctionDefinition$outboundSchema.parse(functionDefinition),
  );
}

export function functionDefinitionFromJSON(
  jsonString: string,
): SafeParseResult<FunctionDefinition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionDefinition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionDefinition' from JSON`,
  );
}
