/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ExampleIn = {
  input?: any | undefined;
  output?: any | undefined;
  comment?: string | null | undefined;
};

/** @internal */
export const ExampleIn$inboundSchema: z.ZodType<
  ExampleIn,
  z.ZodTypeDef,
  unknown
> = z.object({
  input: z.any().optional(),
  output: z.any().optional(),
  comment: z.nullable(z.string()).optional(),
});

/** @internal */
export type ExampleIn$Outbound = {
  input?: any | undefined;
  output?: any | undefined;
  comment?: string | null | undefined;
};

/** @internal */
export const ExampleIn$outboundSchema: z.ZodType<
  ExampleIn$Outbound,
  z.ZodTypeDef,
  ExampleIn
> = z.object({
  input: z.any().optional(),
  output: z.any().optional(),
  comment: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExampleIn$ {
  /** @deprecated use `ExampleIn$inboundSchema` instead. */
  export const inboundSchema = ExampleIn$inboundSchema;
  /** @deprecated use `ExampleIn$outboundSchema` instead. */
  export const outboundSchema = ExampleIn$outboundSchema;
  /** @deprecated use `ExampleIn$Outbound` instead. */
  export type Outbound = ExampleIn$Outbound;
}

export function exampleInToJSON(exampleIn: ExampleIn): string {
  return JSON.stringify(ExampleIn$outboundSchema.parse(exampleIn));
}

export function exampleInFromJSON(
  jsonString: string,
): SafeParseResult<ExampleIn, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExampleIn$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExampleIn' from JSON`,
  );
}
