/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CreateSpanMetricRequest = {
  /**
   * The dimension of the metric
   */
  dimension: string;
  /**
   * The value of the metric
   */
  value: number;
  /**
   * A comment about the metric, e.g. a description of the metric
   */
  comment?: string | null | undefined;
};

/** @internal */
export const CreateSpanMetricRequest$inboundSchema: z.ZodType<
  CreateSpanMetricRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  dimension: z.string(),
  value: z.number(),
  comment: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateSpanMetricRequest$Outbound = {
  dimension: string;
  value: number;
  comment?: string | null | undefined;
};

/** @internal */
export const CreateSpanMetricRequest$outboundSchema: z.ZodType<
  CreateSpanMetricRequest$Outbound,
  z.ZodTypeDef,
  CreateSpanMetricRequest
> = z.object({
  dimension: z.string(),
  value: z.number(),
  comment: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSpanMetricRequest$ {
  /** @deprecated use `CreateSpanMetricRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSpanMetricRequest$inboundSchema;
  /** @deprecated use `CreateSpanMetricRequest$outboundSchema` instead. */
  export const outboundSchema = CreateSpanMetricRequest$outboundSchema;
  /** @deprecated use `CreateSpanMetricRequest$Outbound` instead. */
  export type Outbound = CreateSpanMetricRequest$Outbound;
}

export function createSpanMetricRequestToJSON(
  createSpanMetricRequest: CreateSpanMetricRequest,
): string {
  return JSON.stringify(
    CreateSpanMetricRequest$outboundSchema.parse(createSpanMetricRequest),
  );
}

export function createSpanMetricRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateSpanMetricRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSpanMetricRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSpanMetricRequest' from JSON`,
  );
}
