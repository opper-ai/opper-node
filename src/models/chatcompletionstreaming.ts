/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatCompletionAssistantMessageParam,
  ChatCompletionAssistantMessageParam$inboundSchema,
  ChatCompletionAssistantMessageParam$Outbound,
  ChatCompletionAssistantMessageParam$outboundSchema,
} from "./chatcompletionassistantmessageparam.js";
import {
  ChatCompletionAudioParam,
  ChatCompletionAudioParam$inboundSchema,
  ChatCompletionAudioParam$Outbound,
  ChatCompletionAudioParam$outboundSchema,
} from "./chatcompletionaudioparam.js";
import {
  ChatCompletionDeveloperMessageParam,
  ChatCompletionDeveloperMessageParam$inboundSchema,
  ChatCompletionDeveloperMessageParam$Outbound,
  ChatCompletionDeveloperMessageParam$outboundSchema,
} from "./chatcompletiondevelopermessageparam.js";
import {
  ChatCompletionFunctionCallOptionParam,
  ChatCompletionFunctionCallOptionParam$inboundSchema,
  ChatCompletionFunctionCallOptionParam$Outbound,
  ChatCompletionFunctionCallOptionParam$outboundSchema,
} from "./chatcompletionfunctioncalloptionparam.js";
import {
  ChatCompletionFunctionMessageParam,
  ChatCompletionFunctionMessageParam$inboundSchema,
  ChatCompletionFunctionMessageParam$Outbound,
  ChatCompletionFunctionMessageParam$outboundSchema,
} from "./chatcompletionfunctionmessageparam.js";
import {
  ChatCompletionNamedToolChoiceParam,
  ChatCompletionNamedToolChoiceParam$inboundSchema,
  ChatCompletionNamedToolChoiceParam$Outbound,
  ChatCompletionNamedToolChoiceParam$outboundSchema,
} from "./chatcompletionnamedtoolchoiceparam.js";
import {
  ChatCompletionPredictionContentParam,
  ChatCompletionPredictionContentParam$inboundSchema,
  ChatCompletionPredictionContentParam$Outbound,
  ChatCompletionPredictionContentParam$outboundSchema,
} from "./chatcompletionpredictioncontentparam.js";
import {
  ChatCompletionStreamOptionsParam,
  ChatCompletionStreamOptionsParam$inboundSchema,
  ChatCompletionStreamOptionsParam$Outbound,
  ChatCompletionStreamOptionsParam$outboundSchema,
} from "./chatcompletionstreamoptionsparam.js";
import {
  ChatCompletionSystemMessageParam,
  ChatCompletionSystemMessageParam$inboundSchema,
  ChatCompletionSystemMessageParam$Outbound,
  ChatCompletionSystemMessageParam$outboundSchema,
} from "./chatcompletionsystemmessageparam.js";
import {
  ChatCompletionToolMessageParam,
  ChatCompletionToolMessageParam$inboundSchema,
  ChatCompletionToolMessageParam$Outbound,
  ChatCompletionToolMessageParam$outboundSchema,
} from "./chatcompletiontoolmessageparam.js";
import {
  ChatCompletionToolParam,
  ChatCompletionToolParam$inboundSchema,
  ChatCompletionToolParam$Outbound,
  ChatCompletionToolParam$outboundSchema,
} from "./chatcompletiontoolparam.js";
import {
  ChatCompletionUserMessageParam,
  ChatCompletionUserMessageParam$inboundSchema,
  ChatCompletionUserMessageParam$Outbound,
  ChatCompletionUserMessageParam$outboundSchema,
} from "./chatcompletionusermessageparam.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  OpenaiTypesChatCompletionCreateParamsFunction,
  OpenaiTypesChatCompletionCreateParamsFunction$inboundSchema,
  OpenaiTypesChatCompletionCreateParamsFunction$Outbound,
  OpenaiTypesChatCompletionCreateParamsFunction$outboundSchema,
} from "./openaitypeschatcompletioncreateparamsfunction.js";
import {
  ResponseFormatJSONObject,
  ResponseFormatJSONObject$inboundSchema,
  ResponseFormatJSONObject$Outbound,
  ResponseFormatJSONObject$outboundSchema,
} from "./responseformatjsonobject.js";
import {
  ResponseFormatJSONSchema,
  ResponseFormatJSONSchema$inboundSchema,
  ResponseFormatJSONSchema$Outbound,
  ResponseFormatJSONSchema$outboundSchema,
} from "./responseformatjsonschema.js";
import {
  ResponseFormatText,
  ResponseFormatText$inboundSchema,
  ResponseFormatText$Outbound,
  ResponseFormatText$outboundSchema,
} from "./responseformattext.js";
import {
  TModel,
  TModel$inboundSchema,
  TModel$Outbound,
  TModel$outboundSchema,
} from "./tmodel.js";
import {
  WebSearchOptions,
  WebSearchOptions$inboundSchema,
  WebSearchOptions$Outbound,
  WebSearchOptions$outboundSchema,
} from "./websearchoptions.js";

export type ChatCompletionStreamingMessage =
  | ChatCompletionToolMessageParam
  | ChatCompletionFunctionMessageParam
  | ChatCompletionDeveloperMessageParam
  | ChatCompletionSystemMessageParam
  | ChatCompletionUserMessageParam
  | ChatCompletionAssistantMessageParam;

export const ChatCompletionStreamingFunctionCallEnum = {
  None: "none",
  Auto: "auto",
} as const;
export type ChatCompletionStreamingFunctionCallEnum = ClosedEnum<
  typeof ChatCompletionStreamingFunctionCallEnum
>;

export type ChatCompletionStreamingFunctionCallUnion =
  | ChatCompletionFunctionCallOptionParam
  | ChatCompletionStreamingFunctionCallEnum;

export const ChatCompletionStreamingModality = {
  Text: "text",
  Audio: "audio",
} as const;
export type ChatCompletionStreamingModality = ClosedEnum<
  typeof ChatCompletionStreamingModality
>;

export const ChatCompletionStreamingReasoningEffort = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
export type ChatCompletionStreamingReasoningEffort = ClosedEnum<
  typeof ChatCompletionStreamingReasoningEffort
>;

export type ChatCompletionStreamingResponseFormat =
  | ResponseFormatJSONSchema
  | ResponseFormatText
  | ResponseFormatJSONObject;

export const ChatCompletionStreamingServiceTier = {
  Auto: "auto",
  Default: "default",
  Flex: "flex",
} as const;
export type ChatCompletionStreamingServiceTier = ClosedEnum<
  typeof ChatCompletionStreamingServiceTier
>;

export type ChatCompletionStreamingStop = string | Array<string>;

export const ChatCompletionStreamingToolChoiceEnum = {
  None: "none",
  Auto: "auto",
  Required: "required",
} as const;
export type ChatCompletionStreamingToolChoiceEnum = ClosedEnum<
  typeof ChatCompletionStreamingToolChoiceEnum
>;

export type ChatCompletionStreamingToolChoiceUnion =
  | ChatCompletionNamedToolChoiceParam
  | ChatCompletionStreamingToolChoiceEnum;

export type ChatCompletionStreaming = {
  messages: Array<
    | ChatCompletionToolMessageParam
    | ChatCompletionFunctionMessageParam
    | ChatCompletionDeveloperMessageParam
    | ChatCompletionSystemMessageParam
    | ChatCompletionUserMessageParam
    | ChatCompletionAssistantMessageParam
  >;
  model?: TModel | undefined;
  audio?: ChatCompletionAudioParam | null | undefined;
  frequencyPenalty?: number | null | undefined;
  functionCall?:
    | ChatCompletionFunctionCallOptionParam
    | ChatCompletionStreamingFunctionCallEnum
    | undefined;
  functions?: Array<OpenaiTypesChatCompletionCreateParamsFunction> | undefined;
  logitBias?: { [k: string]: number } | null | undefined;
  logprobs?: boolean | null | undefined;
  maxCompletionTokens?: number | null | undefined;
  maxTokens?: number | null | undefined;
  metadata?: { [k: string]: string } | null | undefined;
  modalities?: Array<ChatCompletionStreamingModality> | null | undefined;
  n?: number | null | undefined;
  parallelToolCalls?: boolean | undefined;
  prediction?: ChatCompletionPredictionContentParam | null | undefined;
  presencePenalty?: number | null | undefined;
  reasoningEffort?: ChatCompletionStreamingReasoningEffort | null | undefined;
  responseFormat?:
    | ResponseFormatJSONSchema
    | ResponseFormatText
    | ResponseFormatJSONObject
    | undefined;
  seed?: number | null | undefined;
  serviceTier?: ChatCompletionStreamingServiceTier | null | undefined;
  stop?: string | Array<string> | null | undefined;
  store?: boolean | null | undefined;
  streamOptions?: ChatCompletionStreamOptionsParam | null | undefined;
  temperature?: number | null | undefined;
  toolChoice?:
    | ChatCompletionNamedToolChoiceParam
    | ChatCompletionStreamingToolChoiceEnum
    | undefined;
  tools?: Array<ChatCompletionToolParam> | undefined;
  topLogprobs?: number | null | undefined;
  topP?: number | null | undefined;
  user?: string | undefined;
  webSearchOptions?: WebSearchOptions | undefined;
  stream?: true | undefined;
  tags?: { [k: string]: any } | null | undefined;
  parentSpanId?: string | null | undefined;
};

/** @internal */
export const ChatCompletionStreamingMessage$inboundSchema: z.ZodType<
  ChatCompletionStreamingMessage,
  z.ZodTypeDef,
  unknown
> = z.union([
  ChatCompletionToolMessageParam$inboundSchema,
  ChatCompletionFunctionMessageParam$inboundSchema,
  ChatCompletionDeveloperMessageParam$inboundSchema,
  ChatCompletionSystemMessageParam$inboundSchema,
  ChatCompletionUserMessageParam$inboundSchema,
  ChatCompletionAssistantMessageParam$inboundSchema,
]);

/** @internal */
export type ChatCompletionStreamingMessage$Outbound =
  | ChatCompletionToolMessageParam$Outbound
  | ChatCompletionFunctionMessageParam$Outbound
  | ChatCompletionDeveloperMessageParam$Outbound
  | ChatCompletionSystemMessageParam$Outbound
  | ChatCompletionUserMessageParam$Outbound
  | ChatCompletionAssistantMessageParam$Outbound;

/** @internal */
export const ChatCompletionStreamingMessage$outboundSchema: z.ZodType<
  ChatCompletionStreamingMessage$Outbound,
  z.ZodTypeDef,
  ChatCompletionStreamingMessage
> = z.union([
  ChatCompletionToolMessageParam$outboundSchema,
  ChatCompletionFunctionMessageParam$outboundSchema,
  ChatCompletionDeveloperMessageParam$outboundSchema,
  ChatCompletionSystemMessageParam$outboundSchema,
  ChatCompletionUserMessageParam$outboundSchema,
  ChatCompletionAssistantMessageParam$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionStreamingMessage$ {
  /** @deprecated use `ChatCompletionStreamingMessage$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionStreamingMessage$inboundSchema;
  /** @deprecated use `ChatCompletionStreamingMessage$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionStreamingMessage$outboundSchema;
  /** @deprecated use `ChatCompletionStreamingMessage$Outbound` instead. */
  export type Outbound = ChatCompletionStreamingMessage$Outbound;
}

export function chatCompletionStreamingMessageToJSON(
  chatCompletionStreamingMessage: ChatCompletionStreamingMessage,
): string {
  return JSON.stringify(
    ChatCompletionStreamingMessage$outboundSchema.parse(
      chatCompletionStreamingMessage,
    ),
  );
}

export function chatCompletionStreamingMessageFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionStreamingMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionStreamingMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionStreamingMessage' from JSON`,
  );
}

/** @internal */
export const ChatCompletionStreamingFunctionCallEnum$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionStreamingFunctionCallEnum> = z
    .nativeEnum(ChatCompletionStreamingFunctionCallEnum);

/** @internal */
export const ChatCompletionStreamingFunctionCallEnum$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionStreamingFunctionCallEnum> =
    ChatCompletionStreamingFunctionCallEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionStreamingFunctionCallEnum$ {
  /** @deprecated use `ChatCompletionStreamingFunctionCallEnum$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionStreamingFunctionCallEnum$inboundSchema;
  /** @deprecated use `ChatCompletionStreamingFunctionCallEnum$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionStreamingFunctionCallEnum$outboundSchema;
}

/** @internal */
export const ChatCompletionStreamingFunctionCallUnion$inboundSchema: z.ZodType<
  ChatCompletionStreamingFunctionCallUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  ChatCompletionFunctionCallOptionParam$inboundSchema,
  ChatCompletionStreamingFunctionCallEnum$inboundSchema,
]);

/** @internal */
export type ChatCompletionStreamingFunctionCallUnion$Outbound =
  | ChatCompletionFunctionCallOptionParam$Outbound
  | string;

/** @internal */
export const ChatCompletionStreamingFunctionCallUnion$outboundSchema: z.ZodType<
  ChatCompletionStreamingFunctionCallUnion$Outbound,
  z.ZodTypeDef,
  ChatCompletionStreamingFunctionCallUnion
> = z.union([
  ChatCompletionFunctionCallOptionParam$outboundSchema,
  ChatCompletionStreamingFunctionCallEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionStreamingFunctionCallUnion$ {
  /** @deprecated use `ChatCompletionStreamingFunctionCallUnion$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionStreamingFunctionCallUnion$inboundSchema;
  /** @deprecated use `ChatCompletionStreamingFunctionCallUnion$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionStreamingFunctionCallUnion$outboundSchema;
  /** @deprecated use `ChatCompletionStreamingFunctionCallUnion$Outbound` instead. */
  export type Outbound = ChatCompletionStreamingFunctionCallUnion$Outbound;
}

export function chatCompletionStreamingFunctionCallUnionToJSON(
  chatCompletionStreamingFunctionCallUnion:
    ChatCompletionStreamingFunctionCallUnion,
): string {
  return JSON.stringify(
    ChatCompletionStreamingFunctionCallUnion$outboundSchema.parse(
      chatCompletionStreamingFunctionCallUnion,
    ),
  );
}

export function chatCompletionStreamingFunctionCallUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionStreamingFunctionCallUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionStreamingFunctionCallUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionStreamingFunctionCallUnion' from JSON`,
  );
}

/** @internal */
export const ChatCompletionStreamingModality$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionStreamingModality
> = z.nativeEnum(ChatCompletionStreamingModality);

/** @internal */
export const ChatCompletionStreamingModality$outboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionStreamingModality
> = ChatCompletionStreamingModality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionStreamingModality$ {
  /** @deprecated use `ChatCompletionStreamingModality$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionStreamingModality$inboundSchema;
  /** @deprecated use `ChatCompletionStreamingModality$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionStreamingModality$outboundSchema;
}

/** @internal */
export const ChatCompletionStreamingReasoningEffort$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionStreamingReasoningEffort> = z.nativeEnum(
    ChatCompletionStreamingReasoningEffort,
  );

/** @internal */
export const ChatCompletionStreamingReasoningEffort$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionStreamingReasoningEffort> =
    ChatCompletionStreamingReasoningEffort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionStreamingReasoningEffort$ {
  /** @deprecated use `ChatCompletionStreamingReasoningEffort$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionStreamingReasoningEffort$inboundSchema;
  /** @deprecated use `ChatCompletionStreamingReasoningEffort$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionStreamingReasoningEffort$outboundSchema;
}

/** @internal */
export const ChatCompletionStreamingResponseFormat$inboundSchema: z.ZodType<
  ChatCompletionStreamingResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  ResponseFormatJSONSchema$inboundSchema,
  ResponseFormatText$inboundSchema,
  ResponseFormatJSONObject$inboundSchema,
]);

/** @internal */
export type ChatCompletionStreamingResponseFormat$Outbound =
  | ResponseFormatJSONSchema$Outbound
  | ResponseFormatText$Outbound
  | ResponseFormatJSONObject$Outbound;

/** @internal */
export const ChatCompletionStreamingResponseFormat$outboundSchema: z.ZodType<
  ChatCompletionStreamingResponseFormat$Outbound,
  z.ZodTypeDef,
  ChatCompletionStreamingResponseFormat
> = z.union([
  ResponseFormatJSONSchema$outboundSchema,
  ResponseFormatText$outboundSchema,
  ResponseFormatJSONObject$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionStreamingResponseFormat$ {
  /** @deprecated use `ChatCompletionStreamingResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionStreamingResponseFormat$inboundSchema;
  /** @deprecated use `ChatCompletionStreamingResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionStreamingResponseFormat$outboundSchema;
  /** @deprecated use `ChatCompletionStreamingResponseFormat$Outbound` instead. */
  export type Outbound = ChatCompletionStreamingResponseFormat$Outbound;
}

export function chatCompletionStreamingResponseFormatToJSON(
  chatCompletionStreamingResponseFormat: ChatCompletionStreamingResponseFormat,
): string {
  return JSON.stringify(
    ChatCompletionStreamingResponseFormat$outboundSchema.parse(
      chatCompletionStreamingResponseFormat,
    ),
  );
}

export function chatCompletionStreamingResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionStreamingResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionStreamingResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionStreamingResponseFormat' from JSON`,
  );
}

/** @internal */
export const ChatCompletionStreamingServiceTier$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionStreamingServiceTier
> = z.nativeEnum(ChatCompletionStreamingServiceTier);

/** @internal */
export const ChatCompletionStreamingServiceTier$outboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionStreamingServiceTier
> = ChatCompletionStreamingServiceTier$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionStreamingServiceTier$ {
  /** @deprecated use `ChatCompletionStreamingServiceTier$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionStreamingServiceTier$inboundSchema;
  /** @deprecated use `ChatCompletionStreamingServiceTier$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionStreamingServiceTier$outboundSchema;
}

/** @internal */
export const ChatCompletionStreamingStop$inboundSchema: z.ZodType<
  ChatCompletionStreamingStop,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type ChatCompletionStreamingStop$Outbound = string | Array<string>;

/** @internal */
export const ChatCompletionStreamingStop$outboundSchema: z.ZodType<
  ChatCompletionStreamingStop$Outbound,
  z.ZodTypeDef,
  ChatCompletionStreamingStop
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionStreamingStop$ {
  /** @deprecated use `ChatCompletionStreamingStop$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionStreamingStop$inboundSchema;
  /** @deprecated use `ChatCompletionStreamingStop$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionStreamingStop$outboundSchema;
  /** @deprecated use `ChatCompletionStreamingStop$Outbound` instead. */
  export type Outbound = ChatCompletionStreamingStop$Outbound;
}

export function chatCompletionStreamingStopToJSON(
  chatCompletionStreamingStop: ChatCompletionStreamingStop,
): string {
  return JSON.stringify(
    ChatCompletionStreamingStop$outboundSchema.parse(
      chatCompletionStreamingStop,
    ),
  );
}

export function chatCompletionStreamingStopFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionStreamingStop, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionStreamingStop$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionStreamingStop' from JSON`,
  );
}

/** @internal */
export const ChatCompletionStreamingToolChoiceEnum$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionStreamingToolChoiceEnum> = z.nativeEnum(
    ChatCompletionStreamingToolChoiceEnum,
  );

/** @internal */
export const ChatCompletionStreamingToolChoiceEnum$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionStreamingToolChoiceEnum> =
    ChatCompletionStreamingToolChoiceEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionStreamingToolChoiceEnum$ {
  /** @deprecated use `ChatCompletionStreamingToolChoiceEnum$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionStreamingToolChoiceEnum$inboundSchema;
  /** @deprecated use `ChatCompletionStreamingToolChoiceEnum$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionStreamingToolChoiceEnum$outboundSchema;
}

/** @internal */
export const ChatCompletionStreamingToolChoiceUnion$inboundSchema: z.ZodType<
  ChatCompletionStreamingToolChoiceUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  ChatCompletionNamedToolChoiceParam$inboundSchema,
  ChatCompletionStreamingToolChoiceEnum$inboundSchema,
]);

/** @internal */
export type ChatCompletionStreamingToolChoiceUnion$Outbound =
  | ChatCompletionNamedToolChoiceParam$Outbound
  | string;

/** @internal */
export const ChatCompletionStreamingToolChoiceUnion$outboundSchema: z.ZodType<
  ChatCompletionStreamingToolChoiceUnion$Outbound,
  z.ZodTypeDef,
  ChatCompletionStreamingToolChoiceUnion
> = z.union([
  ChatCompletionNamedToolChoiceParam$outboundSchema,
  ChatCompletionStreamingToolChoiceEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionStreamingToolChoiceUnion$ {
  /** @deprecated use `ChatCompletionStreamingToolChoiceUnion$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionStreamingToolChoiceUnion$inboundSchema;
  /** @deprecated use `ChatCompletionStreamingToolChoiceUnion$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionStreamingToolChoiceUnion$outboundSchema;
  /** @deprecated use `ChatCompletionStreamingToolChoiceUnion$Outbound` instead. */
  export type Outbound = ChatCompletionStreamingToolChoiceUnion$Outbound;
}

export function chatCompletionStreamingToolChoiceUnionToJSON(
  chatCompletionStreamingToolChoiceUnion:
    ChatCompletionStreamingToolChoiceUnion,
): string {
  return JSON.stringify(
    ChatCompletionStreamingToolChoiceUnion$outboundSchema.parse(
      chatCompletionStreamingToolChoiceUnion,
    ),
  );
}

export function chatCompletionStreamingToolChoiceUnionFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionStreamingToolChoiceUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionStreamingToolChoiceUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionStreamingToolChoiceUnion' from JSON`,
  );
}

/** @internal */
export const ChatCompletionStreaming$inboundSchema: z.ZodType<
  ChatCompletionStreaming,
  z.ZodTypeDef,
  unknown
> = z.object({
  messages: z.array(
    z.union([
      ChatCompletionToolMessageParam$inboundSchema,
      ChatCompletionFunctionMessageParam$inboundSchema,
      ChatCompletionDeveloperMessageParam$inboundSchema,
      ChatCompletionSystemMessageParam$inboundSchema,
      ChatCompletionUserMessageParam$inboundSchema,
      ChatCompletionAssistantMessageParam$inboundSchema,
    ]),
  ),
  model: TModel$inboundSchema.optional(),
  audio: z.nullable(ChatCompletionAudioParam$inboundSchema).optional(),
  frequency_penalty: z.nullable(z.number()).optional(),
  function_call: z.union([
    ChatCompletionFunctionCallOptionParam$inboundSchema,
    ChatCompletionStreamingFunctionCallEnum$inboundSchema,
  ]).optional(),
  functions: z.array(
    OpenaiTypesChatCompletionCreateParamsFunction$inboundSchema,
  ).optional(),
  logit_bias: z.nullable(z.record(z.number().int())).optional(),
  logprobs: z.nullable(z.boolean()).optional(),
  max_completion_tokens: z.nullable(z.number().int()).optional(),
  max_tokens: z.nullable(z.number().int()).optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  modalities: z.nullable(z.array(ChatCompletionStreamingModality$inboundSchema))
    .optional(),
  n: z.nullable(z.number().int()).optional(),
  parallel_tool_calls: z.boolean().optional(),
  prediction: z.nullable(ChatCompletionPredictionContentParam$inboundSchema)
    .optional(),
  presence_penalty: z.nullable(z.number()).optional(),
  reasoning_effort: z.nullable(
    ChatCompletionStreamingReasoningEffort$inboundSchema,
  ).optional(),
  response_format: z.union([
    ResponseFormatJSONSchema$inboundSchema,
    ResponseFormatText$inboundSchema,
    ResponseFormatJSONObject$inboundSchema,
  ]).optional(),
  seed: z.nullable(z.number().int()).optional(),
  service_tier: z.nullable(ChatCompletionStreamingServiceTier$inboundSchema)
    .optional(),
  stop: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  store: z.nullable(z.boolean()).optional(),
  stream_options: z.nullable(ChatCompletionStreamOptionsParam$inboundSchema)
    .optional(),
  temperature: z.nullable(z.number()).optional(),
  tool_choice: z.union([
    ChatCompletionNamedToolChoiceParam$inboundSchema,
    ChatCompletionStreamingToolChoiceEnum$inboundSchema,
  ]).optional(),
  tools: z.array(ChatCompletionToolParam$inboundSchema).optional(),
  top_logprobs: z.nullable(z.number().int()).optional(),
  top_p: z.nullable(z.number()).optional(),
  user: z.string().optional(),
  web_search_options: WebSearchOptions$inboundSchema.optional(),
  stream: z.literal(true).default(true).optional(),
  tags: z.nullable(z.record(z.any())).optional(),
  parent_span_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "frequency_penalty": "frequencyPenalty",
    "function_call": "functionCall",
    "logit_bias": "logitBias",
    "max_completion_tokens": "maxCompletionTokens",
    "max_tokens": "maxTokens",
    "parallel_tool_calls": "parallelToolCalls",
    "presence_penalty": "presencePenalty",
    "reasoning_effort": "reasoningEffort",
    "response_format": "responseFormat",
    "service_tier": "serviceTier",
    "stream_options": "streamOptions",
    "tool_choice": "toolChoice",
    "top_logprobs": "topLogprobs",
    "top_p": "topP",
    "web_search_options": "webSearchOptions",
    "parent_span_id": "parentSpanId",
  });
});

/** @internal */
export type ChatCompletionStreaming$Outbound = {
  messages: Array<
    | ChatCompletionToolMessageParam$Outbound
    | ChatCompletionFunctionMessageParam$Outbound
    | ChatCompletionDeveloperMessageParam$Outbound
    | ChatCompletionSystemMessageParam$Outbound
    | ChatCompletionUserMessageParam$Outbound
    | ChatCompletionAssistantMessageParam$Outbound
  >;
  model?: TModel$Outbound | undefined;
  audio?: ChatCompletionAudioParam$Outbound | null | undefined;
  frequency_penalty?: number | null | undefined;
  function_call?:
    | ChatCompletionFunctionCallOptionParam$Outbound
    | string
    | undefined;
  functions?:
    | Array<OpenaiTypesChatCompletionCreateParamsFunction$Outbound>
    | undefined;
  logit_bias?: { [k: string]: number } | null | undefined;
  logprobs?: boolean | null | undefined;
  max_completion_tokens?: number | null | undefined;
  max_tokens?: number | null | undefined;
  metadata?: { [k: string]: string } | null | undefined;
  modalities?: Array<string> | null | undefined;
  n?: number | null | undefined;
  parallel_tool_calls?: boolean | undefined;
  prediction?: ChatCompletionPredictionContentParam$Outbound | null | undefined;
  presence_penalty?: number | null | undefined;
  reasoning_effort?: string | null | undefined;
  response_format?:
    | ResponseFormatJSONSchema$Outbound
    | ResponseFormatText$Outbound
    | ResponseFormatJSONObject$Outbound
    | undefined;
  seed?: number | null | undefined;
  service_tier?: string | null | undefined;
  stop?: string | Array<string> | null | undefined;
  store?: boolean | null | undefined;
  stream_options?: ChatCompletionStreamOptionsParam$Outbound | null | undefined;
  temperature?: number | null | undefined;
  tool_choice?:
    | ChatCompletionNamedToolChoiceParam$Outbound
    | string
    | undefined;
  tools?: Array<ChatCompletionToolParam$Outbound> | undefined;
  top_logprobs?: number | null | undefined;
  top_p?: number | null | undefined;
  user?: string | undefined;
  web_search_options?: WebSearchOptions$Outbound | undefined;
  stream: true;
  tags?: { [k: string]: any } | null | undefined;
  parent_span_id?: string | null | undefined;
};

/** @internal */
export const ChatCompletionStreaming$outboundSchema: z.ZodType<
  ChatCompletionStreaming$Outbound,
  z.ZodTypeDef,
  ChatCompletionStreaming
> = z.object({
  messages: z.array(
    z.union([
      ChatCompletionToolMessageParam$outboundSchema,
      ChatCompletionFunctionMessageParam$outboundSchema,
      ChatCompletionDeveloperMessageParam$outboundSchema,
      ChatCompletionSystemMessageParam$outboundSchema,
      ChatCompletionUserMessageParam$outboundSchema,
      ChatCompletionAssistantMessageParam$outboundSchema,
    ]),
  ),
  model: TModel$outboundSchema.optional(),
  audio: z.nullable(ChatCompletionAudioParam$outboundSchema).optional(),
  frequencyPenalty: z.nullable(z.number()).optional(),
  functionCall: z.union([
    ChatCompletionFunctionCallOptionParam$outboundSchema,
    ChatCompletionStreamingFunctionCallEnum$outboundSchema,
  ]).optional(),
  functions: z.array(
    OpenaiTypesChatCompletionCreateParamsFunction$outboundSchema,
  ).optional(),
  logitBias: z.nullable(z.record(z.number().int())).optional(),
  logprobs: z.nullable(z.boolean()).optional(),
  maxCompletionTokens: z.nullable(z.number().int()).optional(),
  maxTokens: z.nullable(z.number().int()).optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  modalities: z.nullable(
    z.array(ChatCompletionStreamingModality$outboundSchema),
  ).optional(),
  n: z.nullable(z.number().int()).optional(),
  parallelToolCalls: z.boolean().optional(),
  prediction: z.nullable(ChatCompletionPredictionContentParam$outboundSchema)
    .optional(),
  presencePenalty: z.nullable(z.number()).optional(),
  reasoningEffort: z.nullable(
    ChatCompletionStreamingReasoningEffort$outboundSchema,
  ).optional(),
  responseFormat: z.union([
    ResponseFormatJSONSchema$outboundSchema,
    ResponseFormatText$outboundSchema,
    ResponseFormatJSONObject$outboundSchema,
  ]).optional(),
  seed: z.nullable(z.number().int()).optional(),
  serviceTier: z.nullable(ChatCompletionStreamingServiceTier$outboundSchema)
    .optional(),
  stop: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  store: z.nullable(z.boolean()).optional(),
  streamOptions: z.nullable(ChatCompletionStreamOptionsParam$outboundSchema)
    .optional(),
  temperature: z.nullable(z.number()).optional(),
  toolChoice: z.union([
    ChatCompletionNamedToolChoiceParam$outboundSchema,
    ChatCompletionStreamingToolChoiceEnum$outboundSchema,
  ]).optional(),
  tools: z.array(ChatCompletionToolParam$outboundSchema).optional(),
  topLogprobs: z.nullable(z.number().int()).optional(),
  topP: z.nullable(z.number()).optional(),
  user: z.string().optional(),
  webSearchOptions: WebSearchOptions$outboundSchema.optional(),
  stream: z.literal(true).default(true as const),
  tags: z.nullable(z.record(z.any())).optional(),
  parentSpanId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    frequencyPenalty: "frequency_penalty",
    functionCall: "function_call",
    logitBias: "logit_bias",
    maxCompletionTokens: "max_completion_tokens",
    maxTokens: "max_tokens",
    parallelToolCalls: "parallel_tool_calls",
    presencePenalty: "presence_penalty",
    reasoningEffort: "reasoning_effort",
    responseFormat: "response_format",
    serviceTier: "service_tier",
    streamOptions: "stream_options",
    toolChoice: "tool_choice",
    topLogprobs: "top_logprobs",
    topP: "top_p",
    webSearchOptions: "web_search_options",
    parentSpanId: "parent_span_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionStreaming$ {
  /** @deprecated use `ChatCompletionStreaming$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionStreaming$inboundSchema;
  /** @deprecated use `ChatCompletionStreaming$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionStreaming$outboundSchema;
  /** @deprecated use `ChatCompletionStreaming$Outbound` instead. */
  export type Outbound = ChatCompletionStreaming$Outbound;
}

export function chatCompletionStreamingToJSON(
  chatCompletionStreaming: ChatCompletionStreaming,
): string {
  return JSON.stringify(
    ChatCompletionStreaming$outboundSchema.parse(chatCompletionStreaming),
  );
}

export function chatCompletionStreamingFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionStreaming, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionStreaming$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionStreaming' from JSON`,
  );
}
