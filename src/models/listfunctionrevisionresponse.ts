/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ListFunctionRevisionResponse = {
  id: string;
  configuration: { [k: string]: any };
  createdAt: Date;
  updatedAt?: Date | null | undefined;
};

/** @internal */
export const ListFunctionRevisionResponse$inboundSchema: z.ZodType<
  ListFunctionRevisionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  configuration: z.record(z.any()),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ListFunctionRevisionResponse$Outbound = {
  id: string;
  configuration: { [k: string]: any };
  created_at: string;
  updated_at?: string | null | undefined;
};

/** @internal */
export const ListFunctionRevisionResponse$outboundSchema: z.ZodType<
  ListFunctionRevisionResponse$Outbound,
  z.ZodTypeDef,
  ListFunctionRevisionResponse
> = z.object({
  id: z.string(),
  configuration: z.record(z.any()),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFunctionRevisionResponse$ {
  /** @deprecated use `ListFunctionRevisionResponse$inboundSchema` instead. */
  export const inboundSchema = ListFunctionRevisionResponse$inboundSchema;
  /** @deprecated use `ListFunctionRevisionResponse$outboundSchema` instead. */
  export const outboundSchema = ListFunctionRevisionResponse$outboundSchema;
  /** @deprecated use `ListFunctionRevisionResponse$Outbound` instead. */
  export type Outbound = ListFunctionRevisionResponse$Outbound;
}

export function listFunctionRevisionResponseToJSON(
  listFunctionRevisionResponse: ListFunctionRevisionResponse,
): string {
  return JSON.stringify(
    ListFunctionRevisionResponse$outboundSchema.parse(
      listFunctionRevisionResponse,
    ),
  );
}

export function listFunctionRevisionResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListFunctionRevisionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListFunctionRevisionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListFunctionRevisionResponse' from JSON`,
  );
}
