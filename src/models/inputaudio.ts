/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputAudioFormat = {
  Wav: "wav",
  Mp3: "mp3",
} as const;
export type InputAudioFormat = ClosedEnum<typeof InputAudioFormat>;

export type InputAudio = {
  data: string;
  format: InputAudioFormat;
};

/** @internal */
export const InputAudioFormat$inboundSchema: z.ZodNativeEnum<
  typeof InputAudioFormat
> = z.nativeEnum(InputAudioFormat);

/** @internal */
export const InputAudioFormat$outboundSchema: z.ZodNativeEnum<
  typeof InputAudioFormat
> = InputAudioFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputAudioFormat$ {
  /** @deprecated use `InputAudioFormat$inboundSchema` instead. */
  export const inboundSchema = InputAudioFormat$inboundSchema;
  /** @deprecated use `InputAudioFormat$outboundSchema` instead. */
  export const outboundSchema = InputAudioFormat$outboundSchema;
}

/** @internal */
export const InputAudio$inboundSchema: z.ZodType<
  InputAudio,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string(),
  format: InputAudioFormat$inboundSchema,
});

/** @internal */
export type InputAudio$Outbound = {
  data: string;
  format: string;
};

/** @internal */
export const InputAudio$outboundSchema: z.ZodType<
  InputAudio$Outbound,
  z.ZodTypeDef,
  InputAudio
> = z.object({
  data: z.string(),
  format: InputAudioFormat$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputAudio$ {
  /** @deprecated use `InputAudio$inboundSchema` instead. */
  export const inboundSchema = InputAudio$inboundSchema;
  /** @deprecated use `InputAudio$outboundSchema` instead. */
  export const outboundSchema = InputAudio$outboundSchema;
  /** @deprecated use `InputAudio$Outbound` instead. */
  export type Outbound = InputAudio$Outbound;
}

export function inputAudioToJSON(inputAudio: InputAudio): string {
  return JSON.stringify(InputAudio$outboundSchema.parse(inputAudio));
}

export function inputAudioFromJSON(
  jsonString: string,
): SafeParseResult<InputAudio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputAudio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputAudio' from JSON`,
  );
}
