/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Filter,
  Filter$inboundSchema,
  Filter$Outbound,
  Filter$outboundSchema,
} from "./filter.js";

export type QueryKnowledgeBaseRequest = {
  /**
   * Query string
   */
  query: string;
  /**
   * Number of documents to retrieve from the knowledge base before filtering
   */
  prefilterLimit?: number | undefined;
  /**
   * Number of documents to return
   */
  topK?: number | undefined;
  /**
   * Per-field filters to apply to the query combined with AND
   */
  filters?: Array<Filter> | null | undefined;
  /**
   * Whether to rerank the results
   */
  rerank?: boolean | undefined;
  /**
   * Parent span id
   */
  parentSpanId?: string | null | undefined;
};

/** @internal */
export const QueryKnowledgeBaseRequest$inboundSchema: z.ZodType<
  QueryKnowledgeBaseRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string(),
  prefilter_limit: z.number().int().default(10),
  top_k: z.number().int().default(3),
  filters: z.nullable(z.array(Filter$inboundSchema)).optional(),
  rerank: z.boolean().default(true),
  parent_span_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "prefilter_limit": "prefilterLimit",
    "top_k": "topK",
    "parent_span_id": "parentSpanId",
  });
});

/** @internal */
export type QueryKnowledgeBaseRequest$Outbound = {
  query: string;
  prefilter_limit: number;
  top_k: number;
  filters?: Array<Filter$Outbound> | null | undefined;
  rerank: boolean;
  parent_span_id?: string | null | undefined;
};

/** @internal */
export const QueryKnowledgeBaseRequest$outboundSchema: z.ZodType<
  QueryKnowledgeBaseRequest$Outbound,
  z.ZodTypeDef,
  QueryKnowledgeBaseRequest
> = z.object({
  query: z.string(),
  prefilterLimit: z.number().int().default(10),
  topK: z.number().int().default(3),
  filters: z.nullable(z.array(Filter$outboundSchema)).optional(),
  rerank: z.boolean().default(true),
  parentSpanId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    prefilterLimit: "prefilter_limit",
    topK: "top_k",
    parentSpanId: "parent_span_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryKnowledgeBaseRequest$ {
  /** @deprecated use `QueryKnowledgeBaseRequest$inboundSchema` instead. */
  export const inboundSchema = QueryKnowledgeBaseRequest$inboundSchema;
  /** @deprecated use `QueryKnowledgeBaseRequest$outboundSchema` instead. */
  export const outboundSchema = QueryKnowledgeBaseRequest$outboundSchema;
  /** @deprecated use `QueryKnowledgeBaseRequest$Outbound` instead. */
  export type Outbound = QueryKnowledgeBaseRequest$Outbound;
}

export function queryKnowledgeBaseRequestToJSON(
  queryKnowledgeBaseRequest: QueryKnowledgeBaseRequest,
): string {
  return JSON.stringify(
    QueryKnowledgeBaseRequest$outboundSchema.parse(queryKnowledgeBaseRequest),
  );
}

export function queryKnowledgeBaseRequestFromJSON(
  jsonString: string,
): SafeParseResult<QueryKnowledgeBaseRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryKnowledgeBaseRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryKnowledgeBaseRequest' from JSON`,
  );
}
