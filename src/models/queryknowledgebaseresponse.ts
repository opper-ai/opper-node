/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type QueryKnowledgeBaseResponse = {
  /**
   * The id of the document
   */
  id: string;
  /**
   * The key of the document
   */
  key: string;
  /**
   * The content of the document
   */
  content: string;
  /**
   * The metadata of the document
   */
  metadata: { [k: string]: any };
  /**
   * The score of the document
   */
  score: number;
};

/** @internal */
export const QueryKnowledgeBaseResponse$inboundSchema: z.ZodType<
  QueryKnowledgeBaseResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  key: z.string(),
  content: z.string(),
  metadata: z.record(z.any()),
  score: z.number(),
});

/** @internal */
export type QueryKnowledgeBaseResponse$Outbound = {
  id: string;
  key: string;
  content: string;
  metadata: { [k: string]: any };
  score: number;
};

/** @internal */
export const QueryKnowledgeBaseResponse$outboundSchema: z.ZodType<
  QueryKnowledgeBaseResponse$Outbound,
  z.ZodTypeDef,
  QueryKnowledgeBaseResponse
> = z.object({
  id: z.string(),
  key: z.string(),
  content: z.string(),
  metadata: z.record(z.any()),
  score: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryKnowledgeBaseResponse$ {
  /** @deprecated use `QueryKnowledgeBaseResponse$inboundSchema` instead. */
  export const inboundSchema = QueryKnowledgeBaseResponse$inboundSchema;
  /** @deprecated use `QueryKnowledgeBaseResponse$outboundSchema` instead. */
  export const outboundSchema = QueryKnowledgeBaseResponse$outboundSchema;
  /** @deprecated use `QueryKnowledgeBaseResponse$Outbound` instead. */
  export type Outbound = QueryKnowledgeBaseResponse$Outbound;
}

export function queryKnowledgeBaseResponseToJSON(
  queryKnowledgeBaseResponse: QueryKnowledgeBaseResponse,
): string {
  return JSON.stringify(
    QueryKnowledgeBaseResponse$outboundSchema.parse(queryKnowledgeBaseResponse),
  );
}

export function queryKnowledgeBaseResponseFromJSON(
  jsonString: string,
): SafeParseResult<QueryKnowledgeBaseResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryKnowledgeBaseResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryKnowledgeBaseResponse' from JSON`,
  );
}
