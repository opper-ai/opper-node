/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  TModel,
  TModel$inboundSchema,
  TModel$Outbound,
  TModel$outboundSchema,
} from "./tmodel.js";

export type ListFunctionsResponseItem = {
  /**
   * The ID of the function
   */
  id: string;
  /**
   * The name of the function
   */
  name: string;
  /**
   * The description of the function
   */
  description?: string | null | undefined;
  /**
   * The instructions of the function
   */
  instructions?: string | null | undefined;
  /**
   * The model of the function
   */
  model?: TModel | null | undefined;
  /**
   * The ID of the latest revision of the function
   */
  revisionId: string;
};

/** @internal */
export const ListFunctionsResponseItem$inboundSchema: z.ZodType<
  ListFunctionsResponseItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  instructions: z.nullable(z.string()).optional(),
  model: z.nullable(TModel$inboundSchema).optional(),
  revision_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "revision_id": "revisionId",
  });
});

/** @internal */
export type ListFunctionsResponseItem$Outbound = {
  id: string;
  name: string;
  description?: string | null | undefined;
  instructions?: string | null | undefined;
  model?: TModel$Outbound | null | undefined;
  revision_id: string;
};

/** @internal */
export const ListFunctionsResponseItem$outboundSchema: z.ZodType<
  ListFunctionsResponseItem$Outbound,
  z.ZodTypeDef,
  ListFunctionsResponseItem
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  instructions: z.nullable(z.string()).optional(),
  model: z.nullable(TModel$outboundSchema).optional(),
  revisionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    revisionId: "revision_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFunctionsResponseItem$ {
  /** @deprecated use `ListFunctionsResponseItem$inboundSchema` instead. */
  export const inboundSchema = ListFunctionsResponseItem$inboundSchema;
  /** @deprecated use `ListFunctionsResponseItem$outboundSchema` instead. */
  export const outboundSchema = ListFunctionsResponseItem$outboundSchema;
  /** @deprecated use `ListFunctionsResponseItem$Outbound` instead. */
  export type Outbound = ListFunctionsResponseItem$Outbound;
}

export function listFunctionsResponseItemToJSON(
  listFunctionsResponseItem: ListFunctionsResponseItem,
): string {
  return JSON.stringify(
    ListFunctionsResponseItem$outboundSchema.parse(listFunctionsResponseItem),
  );
}

export function listFunctionsResponseItemFromJSON(
  jsonString: string,
): SafeParseResult<ListFunctionsResponseItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListFunctionsResponseItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListFunctionsResponseItem' from JSON`,
  );
}
