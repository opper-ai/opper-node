/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatCompletionContentPartTextParam,
  ChatCompletionContentPartTextParam$inboundSchema,
  ChatCompletionContentPartTextParam$Outbound,
  ChatCompletionContentPartTextParam$outboundSchema,
} from "./chatcompletioncontentparttextparam.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ChatCompletionToolMessageParamContent =
  | string
  | Array<ChatCompletionContentPartTextParam>;

export type ChatCompletionToolMessageParam = {
  content: string | Array<ChatCompletionContentPartTextParam>;
  role?: "tool" | undefined;
  toolCallId: string;
};

/** @internal */
export const ChatCompletionToolMessageParamContent$inboundSchema: z.ZodType<
  ChatCompletionToolMessageParamContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(ChatCompletionContentPartTextParam$inboundSchema),
]);

/** @internal */
export type ChatCompletionToolMessageParamContent$Outbound =
  | string
  | Array<ChatCompletionContentPartTextParam$Outbound>;

/** @internal */
export const ChatCompletionToolMessageParamContent$outboundSchema: z.ZodType<
  ChatCompletionToolMessageParamContent$Outbound,
  z.ZodTypeDef,
  ChatCompletionToolMessageParamContent
> = z.union([
  z.string(),
  z.array(ChatCompletionContentPartTextParam$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionToolMessageParamContent$ {
  /** @deprecated use `ChatCompletionToolMessageParamContent$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionToolMessageParamContent$inboundSchema;
  /** @deprecated use `ChatCompletionToolMessageParamContent$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionToolMessageParamContent$outboundSchema;
  /** @deprecated use `ChatCompletionToolMessageParamContent$Outbound` instead. */
  export type Outbound = ChatCompletionToolMessageParamContent$Outbound;
}

export function chatCompletionToolMessageParamContentToJSON(
  chatCompletionToolMessageParamContent: ChatCompletionToolMessageParamContent,
): string {
  return JSON.stringify(
    ChatCompletionToolMessageParamContent$outboundSchema.parse(
      chatCompletionToolMessageParamContent,
    ),
  );
}

export function chatCompletionToolMessageParamContentFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionToolMessageParamContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionToolMessageParamContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionToolMessageParamContent' from JSON`,
  );
}

/** @internal */
export const ChatCompletionToolMessageParam$inboundSchema: z.ZodType<
  ChatCompletionToolMessageParam,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.union([
    z.string(),
    z.array(ChatCompletionContentPartTextParam$inboundSchema),
  ]),
  role: z.literal("tool").default("tool").optional(),
  tool_call_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "tool_call_id": "toolCallId",
  });
});

/** @internal */
export type ChatCompletionToolMessageParam$Outbound = {
  content: string | Array<ChatCompletionContentPartTextParam$Outbound>;
  role: "tool";
  tool_call_id: string;
};

/** @internal */
export const ChatCompletionToolMessageParam$outboundSchema: z.ZodType<
  ChatCompletionToolMessageParam$Outbound,
  z.ZodTypeDef,
  ChatCompletionToolMessageParam
> = z.object({
  content: z.union([
    z.string(),
    z.array(ChatCompletionContentPartTextParam$outboundSchema),
  ]),
  role: z.literal("tool").default("tool" as const),
  toolCallId: z.string(),
}).transform((v) => {
  return remap$(v, {
    toolCallId: "tool_call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionToolMessageParam$ {
  /** @deprecated use `ChatCompletionToolMessageParam$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionToolMessageParam$inboundSchema;
  /** @deprecated use `ChatCompletionToolMessageParam$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionToolMessageParam$outboundSchema;
  /** @deprecated use `ChatCompletionToolMessageParam$Outbound` instead. */
  export type Outbound = ChatCompletionToolMessageParam$Outbound;
}

export function chatCompletionToolMessageParamToJSON(
  chatCompletionToolMessageParam: ChatCompletionToolMessageParam,
): string {
  return JSON.stringify(
    ChatCompletionToolMessageParam$outboundSchema.parse(
      chatCompletionToolMessageParam,
    ),
  );
}

export function chatCompletionToolMessageParamFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionToolMessageParam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionToolMessageParam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionToolMessageParam' from JSON`,
  );
}
