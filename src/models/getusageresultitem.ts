/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type GetUsageResultItem = {
  /**
   * The start time of the time bucket
   */
  timeBucket: Date;
  /**
   * The cost in USD for the time bucket
   */
  cost: string;
  additionalProperties?: { [k: string]: any };
};

/** @internal */
export const GetUsageResultItem$inboundSchema: z.ZodType<
  GetUsageResultItem,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    time_bucket: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    cost: z.string(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "time_bucket": "timeBucket",
  });
});

/** @internal */
export type GetUsageResultItem$Outbound = {
  time_bucket: string;
  cost: string;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const GetUsageResultItem$outboundSchema: z.ZodType<
  GetUsageResultItem$Outbound,
  z.ZodTypeDef,
  GetUsageResultItem
> = z.object({
  timeBucket: z.date().transform(v => v.toISOString()),
  cost: z.string(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      timeBucket: "time_bucket",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUsageResultItem$ {
  /** @deprecated use `GetUsageResultItem$inboundSchema` instead. */
  export const inboundSchema = GetUsageResultItem$inboundSchema;
  /** @deprecated use `GetUsageResultItem$outboundSchema` instead. */
  export const outboundSchema = GetUsageResultItem$outboundSchema;
  /** @deprecated use `GetUsageResultItem$Outbound` instead. */
  export type Outbound = GetUsageResultItem$Outbound;
}

export function getUsageResultItemToJSON(
  getUsageResultItem: GetUsageResultItem,
): string {
  return JSON.stringify(
    GetUsageResultItem$outboundSchema.parse(getUsageResultItem),
  );
}

export function getUsageResultItemFromJSON(
  jsonString: string,
): SafeParseResult<GetUsageResultItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUsageResultItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUsageResultItem' from JSON`,
  );
}
