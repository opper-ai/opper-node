/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const Mode = {
  Auto: "auto",
  Required: "required",
} as const;
export type Mode = ClosedEnum<typeof Mode>;

export type ChatCompletionAllowedToolsParam = {
  mode: Mode;
  tools: Array<{ [k: string]: any }>;
};

/** @internal */
export const Mode$inboundSchema: z.ZodNativeEnum<typeof Mode> = z.nativeEnum(
  Mode,
);

/** @internal */
export const Mode$outboundSchema: z.ZodNativeEnum<typeof Mode> =
  Mode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Mode$ {
  /** @deprecated use `Mode$inboundSchema` instead. */
  export const inboundSchema = Mode$inboundSchema;
  /** @deprecated use `Mode$outboundSchema` instead. */
  export const outboundSchema = Mode$outboundSchema;
}

/** @internal */
export const ChatCompletionAllowedToolsParam$inboundSchema: z.ZodType<
  ChatCompletionAllowedToolsParam,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: Mode$inboundSchema,
  tools: z.array(z.record(z.any())),
});

/** @internal */
export type ChatCompletionAllowedToolsParam$Outbound = {
  mode: string;
  tools: Array<{ [k: string]: any }>;
};

/** @internal */
export const ChatCompletionAllowedToolsParam$outboundSchema: z.ZodType<
  ChatCompletionAllowedToolsParam$Outbound,
  z.ZodTypeDef,
  ChatCompletionAllowedToolsParam
> = z.object({
  mode: Mode$outboundSchema,
  tools: z.array(z.record(z.any())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionAllowedToolsParam$ {
  /** @deprecated use `ChatCompletionAllowedToolsParam$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionAllowedToolsParam$inboundSchema;
  /** @deprecated use `ChatCompletionAllowedToolsParam$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionAllowedToolsParam$outboundSchema;
  /** @deprecated use `ChatCompletionAllowedToolsParam$Outbound` instead. */
  export type Outbound = ChatCompletionAllowedToolsParam$Outbound;
}

export function chatCompletionAllowedToolsParamToJSON(
  chatCompletionAllowedToolsParam: ChatCompletionAllowedToolsParam,
): string {
  return JSON.stringify(
    ChatCompletionAllowedToolsParam$outboundSchema.parse(
      chatCompletionAllowedToolsParam,
    ),
  );
}

export function chatCompletionAllowedToolsParamFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionAllowedToolsParam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionAllowedToolsParam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionAllowedToolsParam' from JSON`,
  );
}
