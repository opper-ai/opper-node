/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CustomFormatText = {
  type?: "text" | undefined;
};

/** @internal */
export const CustomFormatText$inboundSchema: z.ZodType<
  CustomFormatText,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("text").default("text").optional(),
});

/** @internal */
export type CustomFormatText$Outbound = {
  type: "text";
};

/** @internal */
export const CustomFormatText$outboundSchema: z.ZodType<
  CustomFormatText$Outbound,
  z.ZodTypeDef,
  CustomFormatText
> = z.object({
  type: z.literal("text").default("text" as const),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFormatText$ {
  /** @deprecated use `CustomFormatText$inboundSchema` instead. */
  export const inboundSchema = CustomFormatText$inboundSchema;
  /** @deprecated use `CustomFormatText$outboundSchema` instead. */
  export const outboundSchema = CustomFormatText$outboundSchema;
  /** @deprecated use `CustomFormatText$Outbound` instead. */
  export type Outbound = CustomFormatText$Outbound;
}

export function customFormatTextToJSON(
  customFormatText: CustomFormatText,
): string {
  return JSON.stringify(
    CustomFormatText$outboundSchema.parse(customFormatText),
  );
}

export function customFormatTextFromJSON(
  jsonString: string,
): SafeParseResult<CustomFormatText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomFormatText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomFormatText' from JSON`,
  );
}
