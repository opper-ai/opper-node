/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type TextProcessingConfiguration = {
  /**
   * The chunk size to use for the document. This is the number of characters to use for the chunk. The default is 2000 characters.
   */
  textProcessingChunkSize?: number | undefined;
  /**
   * The chunk overlap to use for the document. This is the number of characters to overlap between chunks. The default is 200 characters.
   */
  textProcessingChunkOverlap?: number | undefined;
};

/** @internal */
export const TextProcessingConfiguration$inboundSchema: z.ZodType<
  TextProcessingConfiguration,
  z.ZodTypeDef,
  unknown
> = z.object({
  "text_processing.chunk_size": z.number().int().default(2000),
  "text_processing.chunk_overlap": z.number().int().default(200),
}).transform((v) => {
  return remap$(v, {
    "text_processing.chunk_size": "textProcessingChunkSize",
    "text_processing.chunk_overlap": "textProcessingChunkOverlap",
  });
});

/** @internal */
export type TextProcessingConfiguration$Outbound = {
  "text_processing.chunk_size": number;
  "text_processing.chunk_overlap": number;
};

/** @internal */
export const TextProcessingConfiguration$outboundSchema: z.ZodType<
  TextProcessingConfiguration$Outbound,
  z.ZodTypeDef,
  TextProcessingConfiguration
> = z.object({
  textProcessingChunkSize: z.number().int().default(2000),
  textProcessingChunkOverlap: z.number().int().default(200),
}).transform((v) => {
  return remap$(v, {
    textProcessingChunkSize: "text_processing.chunk_size",
    textProcessingChunkOverlap: "text_processing.chunk_overlap",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TextProcessingConfiguration$ {
  /** @deprecated use `TextProcessingConfiguration$inboundSchema` instead. */
  export const inboundSchema = TextProcessingConfiguration$inboundSchema;
  /** @deprecated use `TextProcessingConfiguration$outboundSchema` instead. */
  export const outboundSchema = TextProcessingConfiguration$outboundSchema;
  /** @deprecated use `TextProcessingConfiguration$Outbound` instead. */
  export type Outbound = TextProcessingConfiguration$Outbound;
}

export function textProcessingConfigurationToJSON(
  textProcessingConfiguration: TextProcessingConfiguration,
): string {
  return JSON.stringify(
    TextProcessingConfiguration$outboundSchema.parse(
      textProcessingConfiguration,
    ),
  );
}

export function textProcessingConfigurationFromJSON(
  jsonString: string,
): SafeParseResult<TextProcessingConfiguration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TextProcessingConfiguration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TextProcessingConfiguration' from JSON`,
  );
}
