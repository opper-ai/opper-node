/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type FunctionOutput = {
  arguments: string;
  name: string;
  additionalProperties?: { [k: string]: any };
};

/** @internal */
export const FunctionOutput$inboundSchema: z.ZodType<
  FunctionOutput,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    arguments: z.string(),
    name: z.string(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type FunctionOutput$Outbound = {
  arguments: string;
  name: string;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const FunctionOutput$outboundSchema: z.ZodType<
  FunctionOutput$Outbound,
  z.ZodTypeDef,
  FunctionOutput
> = z.object({
  arguments: z.string(),
  name: z.string(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionOutput$ {
  /** @deprecated use `FunctionOutput$inboundSchema` instead. */
  export const inboundSchema = FunctionOutput$inboundSchema;
  /** @deprecated use `FunctionOutput$outboundSchema` instead. */
  export const outboundSchema = FunctionOutput$outboundSchema;
  /** @deprecated use `FunctionOutput$Outbound` instead. */
  export type Outbound = FunctionOutput$Outbound;
}

export function functionOutputToJSON(functionOutput: FunctionOutput): string {
  return JSON.stringify(FunctionOutput$outboundSchema.parse(functionOutput));
}

export function functionOutputFromJSON(
  jsonString: string,
): SafeParseResult<FunctionOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionOutput' from JSON`,
  );
}
