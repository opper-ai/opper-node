/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ScorersEnum2 = {
  Base: "base",
  Rubrics: "rubrics",
} as const;
export type ScorersEnum2 = ClosedEnum<typeof ScorersEnum2>;

export type ScorersUnion1 = ScorersEnum2 | { [k: string]: any };

export const ScorersEnum1 = {
  Base: "base",
  Rubrics: "rubrics",
} as const;
export type ScorersEnum1 = ClosedEnum<typeof ScorersEnum1>;

/**
 * Evaluation scorers to run: 'base', 'rubrics', or a list of them.
 */
export type ScorersUnion2 =
  | ScorersEnum1
  | { [k: string]: any }
  | Array<ScorersEnum2 | { [k: string]: any }>;

/**
 * Configuration for evaluation features stored under 'beta.evaluation'.
 *
 * @remarks
 *
 * - enabled: master switch
 * - scorers: which evaluators to run. Accepts:
 *     - string: "base" | "rubrics"
 *     - dict: { "rubrics": RubricDefinition-like payload }
 *     - list[str | dict]
 *   "base" is the default scorer.
 */
export type EvaluationConfig = {
  /**
   * Enable evaluation features (base or rubrics).
   */
  enabled?: boolean | undefined;
  /**
   * Evaluation scorers to run: 'base', 'rubrics', or a list of them.
   */
  scorers?:
    | ScorersEnum1
    | { [k: string]: any }
    | Array<ScorersEnum2 | { [k: string]: any }>
    | undefined;
  additionalProperties?: { [k: string]: any };
};

/** @internal */
export const ScorersEnum2$inboundSchema: z.ZodNativeEnum<typeof ScorersEnum2> =
  z.nativeEnum(ScorersEnum2);

/** @internal */
export const ScorersEnum2$outboundSchema: z.ZodNativeEnum<typeof ScorersEnum2> =
  ScorersEnum2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScorersEnum2$ {
  /** @deprecated use `ScorersEnum2$inboundSchema` instead. */
  export const inboundSchema = ScorersEnum2$inboundSchema;
  /** @deprecated use `ScorersEnum2$outboundSchema` instead. */
  export const outboundSchema = ScorersEnum2$outboundSchema;
}

/** @internal */
export const ScorersUnion1$inboundSchema: z.ZodType<
  ScorersUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([ScorersEnum2$inboundSchema, z.record(z.any())]);

/** @internal */
export type ScorersUnion1$Outbound = string | { [k: string]: any };

/** @internal */
export const ScorersUnion1$outboundSchema: z.ZodType<
  ScorersUnion1$Outbound,
  z.ZodTypeDef,
  ScorersUnion1
> = z.union([ScorersEnum2$outboundSchema, z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScorersUnion1$ {
  /** @deprecated use `ScorersUnion1$inboundSchema` instead. */
  export const inboundSchema = ScorersUnion1$inboundSchema;
  /** @deprecated use `ScorersUnion1$outboundSchema` instead. */
  export const outboundSchema = ScorersUnion1$outboundSchema;
  /** @deprecated use `ScorersUnion1$Outbound` instead. */
  export type Outbound = ScorersUnion1$Outbound;
}

export function scorersUnion1ToJSON(scorersUnion1: ScorersUnion1): string {
  return JSON.stringify(ScorersUnion1$outboundSchema.parse(scorersUnion1));
}

export function scorersUnion1FromJSON(
  jsonString: string,
): SafeParseResult<ScorersUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScorersUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScorersUnion1' from JSON`,
  );
}

/** @internal */
export const ScorersEnum1$inboundSchema: z.ZodNativeEnum<typeof ScorersEnum1> =
  z.nativeEnum(ScorersEnum1);

/** @internal */
export const ScorersEnum1$outboundSchema: z.ZodNativeEnum<typeof ScorersEnum1> =
  ScorersEnum1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScorersEnum1$ {
  /** @deprecated use `ScorersEnum1$inboundSchema` instead. */
  export const inboundSchema = ScorersEnum1$inboundSchema;
  /** @deprecated use `ScorersEnum1$outboundSchema` instead. */
  export const outboundSchema = ScorersEnum1$outboundSchema;
}

/** @internal */
export const ScorersUnion2$inboundSchema: z.ZodType<
  ScorersUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  ScorersEnum1$inboundSchema,
  z.record(z.any()),
  z.array(z.union([ScorersEnum2$inboundSchema, z.record(z.any())])),
]);

/** @internal */
export type ScorersUnion2$Outbound =
  | string
  | { [k: string]: any }
  | Array<string | { [k: string]: any }>;

/** @internal */
export const ScorersUnion2$outboundSchema: z.ZodType<
  ScorersUnion2$Outbound,
  z.ZodTypeDef,
  ScorersUnion2
> = z.union([
  ScorersEnum1$outboundSchema,
  z.record(z.any()),
  z.array(z.union([ScorersEnum2$outboundSchema, z.record(z.any())])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScorersUnion2$ {
  /** @deprecated use `ScorersUnion2$inboundSchema` instead. */
  export const inboundSchema = ScorersUnion2$inboundSchema;
  /** @deprecated use `ScorersUnion2$outboundSchema` instead. */
  export const outboundSchema = ScorersUnion2$outboundSchema;
  /** @deprecated use `ScorersUnion2$Outbound` instead. */
  export type Outbound = ScorersUnion2$Outbound;
}

export function scorersUnion2ToJSON(scorersUnion2: ScorersUnion2): string {
  return JSON.stringify(ScorersUnion2$outboundSchema.parse(scorersUnion2));
}

export function scorersUnion2FromJSON(
  jsonString: string,
): SafeParseResult<ScorersUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScorersUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScorersUnion2' from JSON`,
  );
}

/** @internal */
export const EvaluationConfig$inboundSchema: z.ZodType<
  EvaluationConfig,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    enabled: z.boolean().default(true),
    scorers: z.union([
      ScorersEnum1$inboundSchema,
      z.record(z.any()),
      z.array(z.union([ScorersEnum2$inboundSchema, z.record(z.any())])),
    ]).optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type EvaluationConfig$Outbound = {
  enabled: boolean;
  scorers?:
    | string
    | { [k: string]: any }
    | Array<string | { [k: string]: any }>
    | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const EvaluationConfig$outboundSchema: z.ZodType<
  EvaluationConfig$Outbound,
  z.ZodTypeDef,
  EvaluationConfig
> = z.object({
  enabled: z.boolean().default(true),
  scorers: z.union([
    ScorersEnum1$outboundSchema,
    z.record(z.any()),
    z.array(z.union([ScorersEnum2$outboundSchema, z.record(z.any())])),
  ]).optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvaluationConfig$ {
  /** @deprecated use `EvaluationConfig$inboundSchema` instead. */
  export const inboundSchema = EvaluationConfig$inboundSchema;
  /** @deprecated use `EvaluationConfig$outboundSchema` instead. */
  export const outboundSchema = EvaluationConfig$outboundSchema;
  /** @deprecated use `EvaluationConfig$Outbound` instead. */
  export type Outbound = EvaluationConfig$Outbound;
}

export function evaluationConfigToJSON(
  evaluationConfig: EvaluationConfig,
): string {
  return JSON.stringify(
    EvaluationConfig$outboundSchema.parse(evaluationConfig),
  );
}

export function evaluationConfigFromJSON(
  jsonString: string,
): SafeParseResult<EvaluationConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvaluationConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvaluationConfig' from JSON`,
  );
}
