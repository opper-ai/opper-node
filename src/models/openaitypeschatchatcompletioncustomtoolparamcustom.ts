/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CustomFormatGrammar,
  CustomFormatGrammar$inboundSchema,
  CustomFormatGrammar$Outbound,
  CustomFormatGrammar$outboundSchema,
} from "./customformatgrammar.js";
import {
  CustomFormatText,
  CustomFormatText$inboundSchema,
  CustomFormatText$Outbound,
  CustomFormatText$outboundSchema,
} from "./customformattext.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Format = CustomFormatGrammar | CustomFormatText;

export type OpenaiTypesChatChatCompletionCustomToolParamCustom = {
  name: string;
  description?: string | undefined;
  format?: CustomFormatGrammar | CustomFormatText | undefined;
};

/** @internal */
export const Format$inboundSchema: z.ZodType<Format, z.ZodTypeDef, unknown> = z
  .union([CustomFormatGrammar$inboundSchema, CustomFormatText$inboundSchema]);

/** @internal */
export type Format$Outbound =
  | CustomFormatGrammar$Outbound
  | CustomFormatText$Outbound;

/** @internal */
export const Format$outboundSchema: z.ZodType<
  Format$Outbound,
  z.ZodTypeDef,
  Format
> = z.union([
  CustomFormatGrammar$outboundSchema,
  CustomFormatText$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Format$ {
  /** @deprecated use `Format$inboundSchema` instead. */
  export const inboundSchema = Format$inboundSchema;
  /** @deprecated use `Format$outboundSchema` instead. */
  export const outboundSchema = Format$outboundSchema;
  /** @deprecated use `Format$Outbound` instead. */
  export type Outbound = Format$Outbound;
}

export function formatToJSON(format: Format): string {
  return JSON.stringify(Format$outboundSchema.parse(format));
}

export function formatFromJSON(
  jsonString: string,
): SafeParseResult<Format, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Format$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Format' from JSON`,
  );
}

/** @internal */
export const OpenaiTypesChatChatCompletionCustomToolParamCustom$inboundSchema:
  z.ZodType<
    OpenaiTypesChatChatCompletionCustomToolParamCustom,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    description: z.string().optional(),
    format: z.union([
      CustomFormatGrammar$inboundSchema,
      CustomFormatText$inboundSchema,
    ]).optional(),
  });

/** @internal */
export type OpenaiTypesChatChatCompletionCustomToolParamCustom$Outbound = {
  name: string;
  description?: string | undefined;
  format?: CustomFormatGrammar$Outbound | CustomFormatText$Outbound | undefined;
};

/** @internal */
export const OpenaiTypesChatChatCompletionCustomToolParamCustom$outboundSchema:
  z.ZodType<
    OpenaiTypesChatChatCompletionCustomToolParamCustom$Outbound,
    z.ZodTypeDef,
    OpenaiTypesChatChatCompletionCustomToolParamCustom
  > = z.object({
    name: z.string(),
    description: z.string().optional(),
    format: z.union([
      CustomFormatGrammar$outboundSchema,
      CustomFormatText$outboundSchema,
    ]).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenaiTypesChatChatCompletionCustomToolParamCustom$ {
  /** @deprecated use `OpenaiTypesChatChatCompletionCustomToolParamCustom$inboundSchema` instead. */
  export const inboundSchema =
    OpenaiTypesChatChatCompletionCustomToolParamCustom$inboundSchema;
  /** @deprecated use `OpenaiTypesChatChatCompletionCustomToolParamCustom$outboundSchema` instead. */
  export const outboundSchema =
    OpenaiTypesChatChatCompletionCustomToolParamCustom$outboundSchema;
  /** @deprecated use `OpenaiTypesChatChatCompletionCustomToolParamCustom$Outbound` instead. */
  export type Outbound =
    OpenaiTypesChatChatCompletionCustomToolParamCustom$Outbound;
}

export function openaiTypesChatChatCompletionCustomToolParamCustomToJSON(
  openaiTypesChatChatCompletionCustomToolParamCustom:
    OpenaiTypesChatChatCompletionCustomToolParamCustom,
): string {
  return JSON.stringify(
    OpenaiTypesChatChatCompletionCustomToolParamCustom$outboundSchema.parse(
      openaiTypesChatChatCompletionCustomToolParamCustom,
    ),
  );
}

export function openaiTypesChatChatCompletionCustomToolParamCustomFromJSON(
  jsonString: string,
): SafeParseResult<
  OpenaiTypesChatChatCompletionCustomToolParamCustom,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpenaiTypesChatChatCompletionCustomToolParamCustom$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpenaiTypesChatChatCompletionCustomToolParamCustom' from JSON`,
  );
}
