/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatCompletionMessage,
  ChatCompletionMessage$inboundSchema,
  ChatCompletionMessage$Outbound,
  ChatCompletionMessage$outboundSchema,
} from "./chatcompletionmessage.js";
import {
  ChoiceLogprobs,
  ChoiceLogprobs$inboundSchema,
  ChoiceLogprobs$Outbound,
  ChoiceLogprobs$outboundSchema,
} from "./choicelogprobs.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const FinishReason = {
  Stop: "stop",
  Length: "length",
  ToolCalls: "tool_calls",
  ContentFilter: "content_filter",
  FunctionCall: "function_call",
} as const;
export type FinishReason = ClosedEnum<typeof FinishReason>;

export type Choice = {
  finishReason: FinishReason;
  index: number;
  logprobs?: ChoiceLogprobs | null | undefined;
  message: ChatCompletionMessage;
  additionalProperties?: { [k: string]: any };
};

/** @internal */
export const FinishReason$inboundSchema: z.ZodNativeEnum<typeof FinishReason> =
  z.nativeEnum(FinishReason);

/** @internal */
export const FinishReason$outboundSchema: z.ZodNativeEnum<typeof FinishReason> =
  FinishReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FinishReason$ {
  /** @deprecated use `FinishReason$inboundSchema` instead. */
  export const inboundSchema = FinishReason$inboundSchema;
  /** @deprecated use `FinishReason$outboundSchema` instead. */
  export const outboundSchema = FinishReason$outboundSchema;
}

/** @internal */
export const Choice$inboundSchema: z.ZodType<Choice, z.ZodTypeDef, unknown> =
  collectExtraKeys$(
    z.object({
      finish_reason: FinishReason$inboundSchema,
      index: z.number().int(),
      logprobs: z.nullable(ChoiceLogprobs$inboundSchema).optional(),
      message: ChatCompletionMessage$inboundSchema,
    }).catchall(z.any()),
    "additionalProperties",
    true,
  ).transform((v) => {
    return remap$(v, {
      "finish_reason": "finishReason",
    });
  });

/** @internal */
export type Choice$Outbound = {
  finish_reason: string;
  index: number;
  logprobs?: ChoiceLogprobs$Outbound | null | undefined;
  message: ChatCompletionMessage$Outbound;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const Choice$outboundSchema: z.ZodType<
  Choice$Outbound,
  z.ZodTypeDef,
  Choice
> = z.object({
  finishReason: FinishReason$outboundSchema,
  index: z.number().int(),
  logprobs: z.nullable(ChoiceLogprobs$outboundSchema).optional(),
  message: ChatCompletionMessage$outboundSchema,
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      finishReason: "finish_reason",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Choice$ {
  /** @deprecated use `Choice$inboundSchema` instead. */
  export const inboundSchema = Choice$inboundSchema;
  /** @deprecated use `Choice$outboundSchema` instead. */
  export const outboundSchema = Choice$outboundSchema;
  /** @deprecated use `Choice$Outbound` instead. */
  export type Outbound = Choice$Outbound;
}

export function choiceToJSON(choice: Choice): string {
  return JSON.stringify(Choice$outboundSchema.parse(choice));
}

export function choiceFromJSON(
  jsonString: string,
): SafeParseResult<Choice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Choice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Choice' from JSON`,
  );
}
