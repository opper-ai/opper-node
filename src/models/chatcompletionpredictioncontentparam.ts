/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatCompletionContentPartTextParam,
  ChatCompletionContentPartTextParam$inboundSchema,
  ChatCompletionContentPartTextParam$Outbound,
  ChatCompletionContentPartTextParam$outboundSchema,
} from "./chatcompletioncontentparttextparam.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ChatCompletionPredictionContentParamContent =
  | string
  | Array<ChatCompletionContentPartTextParam>;

export type ChatCompletionPredictionContentParam = {
  content: string | Array<ChatCompletionContentPartTextParam>;
  type?: "content" | undefined;
};

/** @internal */
export const ChatCompletionPredictionContentParamContent$inboundSchema:
  z.ZodType<
    ChatCompletionPredictionContentParamContent,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.array(ChatCompletionContentPartTextParam$inboundSchema),
  ]);

/** @internal */
export type ChatCompletionPredictionContentParamContent$Outbound =
  | string
  | Array<ChatCompletionContentPartTextParam$Outbound>;

/** @internal */
export const ChatCompletionPredictionContentParamContent$outboundSchema:
  z.ZodType<
    ChatCompletionPredictionContentParamContent$Outbound,
    z.ZodTypeDef,
    ChatCompletionPredictionContentParamContent
  > = z.union([
    z.string(),
    z.array(ChatCompletionContentPartTextParam$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionPredictionContentParamContent$ {
  /** @deprecated use `ChatCompletionPredictionContentParamContent$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionPredictionContentParamContent$inboundSchema;
  /** @deprecated use `ChatCompletionPredictionContentParamContent$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionPredictionContentParamContent$outboundSchema;
  /** @deprecated use `ChatCompletionPredictionContentParamContent$Outbound` instead. */
  export type Outbound = ChatCompletionPredictionContentParamContent$Outbound;
}

export function chatCompletionPredictionContentParamContentToJSON(
  chatCompletionPredictionContentParamContent:
    ChatCompletionPredictionContentParamContent,
): string {
  return JSON.stringify(
    ChatCompletionPredictionContentParamContent$outboundSchema.parse(
      chatCompletionPredictionContentParamContent,
    ),
  );
}

export function chatCompletionPredictionContentParamContentFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionPredictionContentParamContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionPredictionContentParamContent$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionPredictionContentParamContent' from JSON`,
  );
}

/** @internal */
export const ChatCompletionPredictionContentParam$inboundSchema: z.ZodType<
  ChatCompletionPredictionContentParam,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.union([
    z.string(),
    z.array(ChatCompletionContentPartTextParam$inboundSchema),
  ]),
  type: z.literal("content").default("content").optional(),
});

/** @internal */
export type ChatCompletionPredictionContentParam$Outbound = {
  content: string | Array<ChatCompletionContentPartTextParam$Outbound>;
  type: "content";
};

/** @internal */
export const ChatCompletionPredictionContentParam$outboundSchema: z.ZodType<
  ChatCompletionPredictionContentParam$Outbound,
  z.ZodTypeDef,
  ChatCompletionPredictionContentParam
> = z.object({
  content: z.union([
    z.string(),
    z.array(ChatCompletionContentPartTextParam$outboundSchema),
  ]),
  type: z.literal("content").default("content" as const),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionPredictionContentParam$ {
  /** @deprecated use `ChatCompletionPredictionContentParam$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionPredictionContentParam$inboundSchema;
  /** @deprecated use `ChatCompletionPredictionContentParam$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionPredictionContentParam$outboundSchema;
  /** @deprecated use `ChatCompletionPredictionContentParam$Outbound` instead. */
  export type Outbound = ChatCompletionPredictionContentParam$Outbound;
}

export function chatCompletionPredictionContentParamToJSON(
  chatCompletionPredictionContentParam: ChatCompletionPredictionContentParam,
): string {
  return JSON.stringify(
    ChatCompletionPredictionContentParam$outboundSchema.parse(
      chatCompletionPredictionContentParam,
    ),
  );
}

export function chatCompletionPredictionContentParamFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionPredictionContentParam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionPredictionContentParam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionPredictionContentParam' from JSON`,
  );
}
