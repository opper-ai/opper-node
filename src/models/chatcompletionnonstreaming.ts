/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatCompletionAllowedToolChoiceParam,
  ChatCompletionAllowedToolChoiceParam$inboundSchema,
  ChatCompletionAllowedToolChoiceParam$Outbound,
  ChatCompletionAllowedToolChoiceParam$outboundSchema,
} from "./chatcompletionallowedtoolchoiceparam.js";
import {
  ChatCompletionAssistantMessageParam,
  ChatCompletionAssistantMessageParam$inboundSchema,
  ChatCompletionAssistantMessageParam$Outbound,
  ChatCompletionAssistantMessageParam$outboundSchema,
} from "./chatcompletionassistantmessageparam.js";
import {
  ChatCompletionAudioParam,
  ChatCompletionAudioParam$inboundSchema,
  ChatCompletionAudioParam$Outbound,
  ChatCompletionAudioParam$outboundSchema,
} from "./chatcompletionaudioparam.js";
import {
  ChatCompletionCustomToolParam,
  ChatCompletionCustomToolParam$inboundSchema,
  ChatCompletionCustomToolParam$Outbound,
  ChatCompletionCustomToolParam$outboundSchema,
} from "./chatcompletioncustomtoolparam.js";
import {
  ChatCompletionDeveloperMessageParam,
  ChatCompletionDeveloperMessageParam$inboundSchema,
  ChatCompletionDeveloperMessageParam$Outbound,
  ChatCompletionDeveloperMessageParam$outboundSchema,
} from "./chatcompletiondevelopermessageparam.js";
import {
  ChatCompletionFunctionCallOptionParam,
  ChatCompletionFunctionCallOptionParam$inboundSchema,
  ChatCompletionFunctionCallOptionParam$Outbound,
  ChatCompletionFunctionCallOptionParam$outboundSchema,
} from "./chatcompletionfunctioncalloptionparam.js";
import {
  ChatCompletionFunctionMessageParam,
  ChatCompletionFunctionMessageParam$inboundSchema,
  ChatCompletionFunctionMessageParam$Outbound,
  ChatCompletionFunctionMessageParam$outboundSchema,
} from "./chatcompletionfunctionmessageparam.js";
import {
  ChatCompletionFunctionToolParam,
  ChatCompletionFunctionToolParam$inboundSchema,
  ChatCompletionFunctionToolParam$Outbound,
  ChatCompletionFunctionToolParam$outboundSchema,
} from "./chatcompletionfunctiontoolparam.js";
import {
  ChatCompletionNamedToolChoiceCustomParam,
  ChatCompletionNamedToolChoiceCustomParam$inboundSchema,
  ChatCompletionNamedToolChoiceCustomParam$Outbound,
  ChatCompletionNamedToolChoiceCustomParam$outboundSchema,
} from "./chatcompletionnamedtoolchoicecustomparam.js";
import {
  ChatCompletionNamedToolChoiceParam,
  ChatCompletionNamedToolChoiceParam$inboundSchema,
  ChatCompletionNamedToolChoiceParam$Outbound,
  ChatCompletionNamedToolChoiceParam$outboundSchema,
} from "./chatcompletionnamedtoolchoiceparam.js";
import {
  ChatCompletionPredictionContentParam,
  ChatCompletionPredictionContentParam$inboundSchema,
  ChatCompletionPredictionContentParam$Outbound,
  ChatCompletionPredictionContentParam$outboundSchema,
} from "./chatcompletionpredictioncontentparam.js";
import {
  ChatCompletionStreamOptionsParam,
  ChatCompletionStreamOptionsParam$inboundSchema,
  ChatCompletionStreamOptionsParam$Outbound,
  ChatCompletionStreamOptionsParam$outboundSchema,
} from "./chatcompletionstreamoptionsparam.js";
import {
  ChatCompletionSystemMessageParam,
  ChatCompletionSystemMessageParam$inboundSchema,
  ChatCompletionSystemMessageParam$Outbound,
  ChatCompletionSystemMessageParam$outboundSchema,
} from "./chatcompletionsystemmessageparam.js";
import {
  ChatCompletionToolMessageParam,
  ChatCompletionToolMessageParam$inboundSchema,
  ChatCompletionToolMessageParam$Outbound,
  ChatCompletionToolMessageParam$outboundSchema,
} from "./chatcompletiontoolmessageparam.js";
import {
  ChatCompletionUserMessageParam,
  ChatCompletionUserMessageParam$inboundSchema,
  ChatCompletionUserMessageParam$Outbound,
  ChatCompletionUserMessageParam$outboundSchema,
} from "./chatcompletionusermessageparam.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  OpenaiTypesChatCompletionCreateParamsFunction,
  OpenaiTypesChatCompletionCreateParamsFunction$inboundSchema,
  OpenaiTypesChatCompletionCreateParamsFunction$Outbound,
  OpenaiTypesChatCompletionCreateParamsFunction$outboundSchema,
} from "./openaitypeschatcompletioncreateparamsfunction.js";
import {
  ResponseFormatJSONObject,
  ResponseFormatJSONObject$inboundSchema,
  ResponseFormatJSONObject$Outbound,
  ResponseFormatJSONObject$outboundSchema,
} from "./responseformatjsonobject.js";
import {
  ResponseFormatJSONSchema,
  ResponseFormatJSONSchema$inboundSchema,
  ResponseFormatJSONSchema$Outbound,
  ResponseFormatJSONSchema$outboundSchema,
} from "./responseformatjsonschema.js";
import {
  ResponseFormatText,
  ResponseFormatText$inboundSchema,
  ResponseFormatText$Outbound,
  ResponseFormatText$outboundSchema,
} from "./responseformattext.js";
import {
  TModel,
  TModel$inboundSchema,
  TModel$Outbound,
  TModel$outboundSchema,
} from "./tmodel.js";
import {
  WebSearchOptions,
  WebSearchOptions$inboundSchema,
  WebSearchOptions$Outbound,
  WebSearchOptions$outboundSchema,
} from "./websearchoptions.js";

export type ChatCompletionNonStreamingMessage =
  | ChatCompletionToolMessageParam
  | ChatCompletionFunctionMessageParam
  | ChatCompletionDeveloperMessageParam
  | ChatCompletionSystemMessageParam
  | ChatCompletionUserMessageParam
  | ChatCompletionAssistantMessageParam;

export const ChatCompletionNonStreamingFunctionCallEnum = {
  None: "none",
  Auto: "auto",
} as const;
export type ChatCompletionNonStreamingFunctionCallEnum = ClosedEnum<
  typeof ChatCompletionNonStreamingFunctionCallEnum
>;

export type ChatCompletionNonStreamingFunctionCallUnion =
  | ChatCompletionFunctionCallOptionParam
  | ChatCompletionNonStreamingFunctionCallEnum;

export const ChatCompletionNonStreamingModality = {
  Text: "text",
  Audio: "audio",
} as const;
export type ChatCompletionNonStreamingModality = ClosedEnum<
  typeof ChatCompletionNonStreamingModality
>;

export const ChatCompletionNonStreamingReasoningEffort = {
  Minimal: "minimal",
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
export type ChatCompletionNonStreamingReasoningEffort = ClosedEnum<
  typeof ChatCompletionNonStreamingReasoningEffort
>;

export type ChatCompletionNonStreamingResponseFormat =
  | ResponseFormatJSONSchema
  | ResponseFormatText
  | ResponseFormatJSONObject;

export const ChatCompletionNonStreamingServiceTier = {
  Auto: "auto",
  Default: "default",
  Flex: "flex",
  Scale: "scale",
  Priority: "priority",
} as const;
export type ChatCompletionNonStreamingServiceTier = ClosedEnum<
  typeof ChatCompletionNonStreamingServiceTier
>;

export type ChatCompletionNonStreamingStop = string | Array<string>;

export const ChatCompletionNonStreamingToolChoiceEnum = {
  None: "none",
  Auto: "auto",
  Required: "required",
} as const;
export type ChatCompletionNonStreamingToolChoiceEnum = ClosedEnum<
  typeof ChatCompletionNonStreamingToolChoiceEnum
>;

export type ChatCompletionNonStreamingToolChoiceUnion =
  | ChatCompletionAllowedToolChoiceParam
  | ChatCompletionNamedToolChoiceParam
  | ChatCompletionNamedToolChoiceCustomParam
  | ChatCompletionNonStreamingToolChoiceEnum;

export type ChatCompletionNonStreamingTool =
  | ChatCompletionFunctionToolParam
  | ChatCompletionCustomToolParam;

export const ChatCompletionNonStreamingVerbosity = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
export type ChatCompletionNonStreamingVerbosity = ClosedEnum<
  typeof ChatCompletionNonStreamingVerbosity
>;

export type ChatCompletionNonStreaming = {
  messages: Array<
    | ChatCompletionToolMessageParam
    | ChatCompletionFunctionMessageParam
    | ChatCompletionDeveloperMessageParam
    | ChatCompletionSystemMessageParam
    | ChatCompletionUserMessageParam
    | ChatCompletionAssistantMessageParam
  >;
  model?: TModel | undefined;
  audio?: ChatCompletionAudioParam | null | undefined;
  frequencyPenalty?: number | null | undefined;
  functionCall?:
    | ChatCompletionFunctionCallOptionParam
    | ChatCompletionNonStreamingFunctionCallEnum
    | undefined;
  functions?: Array<OpenaiTypesChatCompletionCreateParamsFunction> | undefined;
  logitBias?: { [k: string]: number } | null | undefined;
  logprobs?: boolean | null | undefined;
  maxCompletionTokens?: number | null | undefined;
  maxTokens?: number | null | undefined;
  metadata?: { [k: string]: string } | null | undefined;
  modalities?: Array<ChatCompletionNonStreamingModality> | null | undefined;
  n?: number | null | undefined;
  parallelToolCalls?: boolean | undefined;
  prediction?: ChatCompletionPredictionContentParam | null | undefined;
  presencePenalty?: number | null | undefined;
  promptCacheKey?: string | undefined;
  reasoningEffort?:
    | ChatCompletionNonStreamingReasoningEffort
    | null
    | undefined;
  responseFormat?:
    | ResponseFormatJSONSchema
    | ResponseFormatText
    | ResponseFormatJSONObject
    | undefined;
  safetyIdentifier?: string | undefined;
  seed?: number | null | undefined;
  serviceTier?: ChatCompletionNonStreamingServiceTier | null | undefined;
  stop?: string | Array<string> | null | undefined;
  store?: boolean | null | undefined;
  streamOptions?: ChatCompletionStreamOptionsParam | null | undefined;
  temperature?: number | null | undefined;
  toolChoice?:
    | ChatCompletionAllowedToolChoiceParam
    | ChatCompletionNamedToolChoiceParam
    | ChatCompletionNamedToolChoiceCustomParam
    | ChatCompletionNonStreamingToolChoiceEnum
    | undefined;
  tools?:
    | Array<ChatCompletionFunctionToolParam | ChatCompletionCustomToolParam>
    | undefined;
  topLogprobs?: number | null | undefined;
  topP?: number | null | undefined;
  user?: string | undefined;
  verbosity?: ChatCompletionNonStreamingVerbosity | null | undefined;
  webSearchOptions?: WebSearchOptions | undefined;
  stream?: false | null | undefined;
  tags?: { [k: string]: any } | null | undefined;
  parentSpanId?: string | null | undefined;
};

/** @internal */
export const ChatCompletionNonStreamingMessage$inboundSchema: z.ZodType<
  ChatCompletionNonStreamingMessage,
  z.ZodTypeDef,
  unknown
> = z.union([
  ChatCompletionToolMessageParam$inboundSchema,
  ChatCompletionFunctionMessageParam$inboundSchema,
  ChatCompletionDeveloperMessageParam$inboundSchema,
  ChatCompletionSystemMessageParam$inboundSchema,
  ChatCompletionUserMessageParam$inboundSchema,
  ChatCompletionAssistantMessageParam$inboundSchema,
]);

/** @internal */
export type ChatCompletionNonStreamingMessage$Outbound =
  | ChatCompletionToolMessageParam$Outbound
  | ChatCompletionFunctionMessageParam$Outbound
  | ChatCompletionDeveloperMessageParam$Outbound
  | ChatCompletionSystemMessageParam$Outbound
  | ChatCompletionUserMessageParam$Outbound
  | ChatCompletionAssistantMessageParam$Outbound;

/** @internal */
export const ChatCompletionNonStreamingMessage$outboundSchema: z.ZodType<
  ChatCompletionNonStreamingMessage$Outbound,
  z.ZodTypeDef,
  ChatCompletionNonStreamingMessage
> = z.union([
  ChatCompletionToolMessageParam$outboundSchema,
  ChatCompletionFunctionMessageParam$outboundSchema,
  ChatCompletionDeveloperMessageParam$outboundSchema,
  ChatCompletionSystemMessageParam$outboundSchema,
  ChatCompletionUserMessageParam$outboundSchema,
  ChatCompletionAssistantMessageParam$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionNonStreamingMessage$ {
  /** @deprecated use `ChatCompletionNonStreamingMessage$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionNonStreamingMessage$inboundSchema;
  /** @deprecated use `ChatCompletionNonStreamingMessage$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionNonStreamingMessage$outboundSchema;
  /** @deprecated use `ChatCompletionNonStreamingMessage$Outbound` instead. */
  export type Outbound = ChatCompletionNonStreamingMessage$Outbound;
}

export function chatCompletionNonStreamingMessageToJSON(
  chatCompletionNonStreamingMessage: ChatCompletionNonStreamingMessage,
): string {
  return JSON.stringify(
    ChatCompletionNonStreamingMessage$outboundSchema.parse(
      chatCompletionNonStreamingMessage,
    ),
  );
}

export function chatCompletionNonStreamingMessageFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionNonStreamingMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionNonStreamingMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionNonStreamingMessage' from JSON`,
  );
}

/** @internal */
export const ChatCompletionNonStreamingFunctionCallEnum$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionNonStreamingFunctionCallEnum> = z
    .nativeEnum(ChatCompletionNonStreamingFunctionCallEnum);

/** @internal */
export const ChatCompletionNonStreamingFunctionCallEnum$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionNonStreamingFunctionCallEnum> =
    ChatCompletionNonStreamingFunctionCallEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionNonStreamingFunctionCallEnum$ {
  /** @deprecated use `ChatCompletionNonStreamingFunctionCallEnum$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionNonStreamingFunctionCallEnum$inboundSchema;
  /** @deprecated use `ChatCompletionNonStreamingFunctionCallEnum$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionNonStreamingFunctionCallEnum$outboundSchema;
}

/** @internal */
export const ChatCompletionNonStreamingFunctionCallUnion$inboundSchema:
  z.ZodType<
    ChatCompletionNonStreamingFunctionCallUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    ChatCompletionFunctionCallOptionParam$inboundSchema,
    ChatCompletionNonStreamingFunctionCallEnum$inboundSchema,
  ]);

/** @internal */
export type ChatCompletionNonStreamingFunctionCallUnion$Outbound =
  | ChatCompletionFunctionCallOptionParam$Outbound
  | string;

/** @internal */
export const ChatCompletionNonStreamingFunctionCallUnion$outboundSchema:
  z.ZodType<
    ChatCompletionNonStreamingFunctionCallUnion$Outbound,
    z.ZodTypeDef,
    ChatCompletionNonStreamingFunctionCallUnion
  > = z.union([
    ChatCompletionFunctionCallOptionParam$outboundSchema,
    ChatCompletionNonStreamingFunctionCallEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionNonStreamingFunctionCallUnion$ {
  /** @deprecated use `ChatCompletionNonStreamingFunctionCallUnion$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionNonStreamingFunctionCallUnion$inboundSchema;
  /** @deprecated use `ChatCompletionNonStreamingFunctionCallUnion$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionNonStreamingFunctionCallUnion$outboundSchema;
  /** @deprecated use `ChatCompletionNonStreamingFunctionCallUnion$Outbound` instead. */
  export type Outbound = ChatCompletionNonStreamingFunctionCallUnion$Outbound;
}

export function chatCompletionNonStreamingFunctionCallUnionToJSON(
  chatCompletionNonStreamingFunctionCallUnion:
    ChatCompletionNonStreamingFunctionCallUnion,
): string {
  return JSON.stringify(
    ChatCompletionNonStreamingFunctionCallUnion$outboundSchema.parse(
      chatCompletionNonStreamingFunctionCallUnion,
    ),
  );
}

export function chatCompletionNonStreamingFunctionCallUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionNonStreamingFunctionCallUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionNonStreamingFunctionCallUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionNonStreamingFunctionCallUnion' from JSON`,
  );
}

/** @internal */
export const ChatCompletionNonStreamingModality$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionNonStreamingModality
> = z.nativeEnum(ChatCompletionNonStreamingModality);

/** @internal */
export const ChatCompletionNonStreamingModality$outboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionNonStreamingModality
> = ChatCompletionNonStreamingModality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionNonStreamingModality$ {
  /** @deprecated use `ChatCompletionNonStreamingModality$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionNonStreamingModality$inboundSchema;
  /** @deprecated use `ChatCompletionNonStreamingModality$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionNonStreamingModality$outboundSchema;
}

/** @internal */
export const ChatCompletionNonStreamingReasoningEffort$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionNonStreamingReasoningEffort> = z
    .nativeEnum(ChatCompletionNonStreamingReasoningEffort);

/** @internal */
export const ChatCompletionNonStreamingReasoningEffort$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionNonStreamingReasoningEffort> =
    ChatCompletionNonStreamingReasoningEffort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionNonStreamingReasoningEffort$ {
  /** @deprecated use `ChatCompletionNonStreamingReasoningEffort$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionNonStreamingReasoningEffort$inboundSchema;
  /** @deprecated use `ChatCompletionNonStreamingReasoningEffort$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionNonStreamingReasoningEffort$outboundSchema;
}

/** @internal */
export const ChatCompletionNonStreamingResponseFormat$inboundSchema: z.ZodType<
  ChatCompletionNonStreamingResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  ResponseFormatJSONSchema$inboundSchema,
  ResponseFormatText$inboundSchema,
  ResponseFormatJSONObject$inboundSchema,
]);

/** @internal */
export type ChatCompletionNonStreamingResponseFormat$Outbound =
  | ResponseFormatJSONSchema$Outbound
  | ResponseFormatText$Outbound
  | ResponseFormatJSONObject$Outbound;

/** @internal */
export const ChatCompletionNonStreamingResponseFormat$outboundSchema: z.ZodType<
  ChatCompletionNonStreamingResponseFormat$Outbound,
  z.ZodTypeDef,
  ChatCompletionNonStreamingResponseFormat
> = z.union([
  ResponseFormatJSONSchema$outboundSchema,
  ResponseFormatText$outboundSchema,
  ResponseFormatJSONObject$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionNonStreamingResponseFormat$ {
  /** @deprecated use `ChatCompletionNonStreamingResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionNonStreamingResponseFormat$inboundSchema;
  /** @deprecated use `ChatCompletionNonStreamingResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionNonStreamingResponseFormat$outboundSchema;
  /** @deprecated use `ChatCompletionNonStreamingResponseFormat$Outbound` instead. */
  export type Outbound = ChatCompletionNonStreamingResponseFormat$Outbound;
}

export function chatCompletionNonStreamingResponseFormatToJSON(
  chatCompletionNonStreamingResponseFormat:
    ChatCompletionNonStreamingResponseFormat,
): string {
  return JSON.stringify(
    ChatCompletionNonStreamingResponseFormat$outboundSchema.parse(
      chatCompletionNonStreamingResponseFormat,
    ),
  );
}

export function chatCompletionNonStreamingResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionNonStreamingResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionNonStreamingResponseFormat$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionNonStreamingResponseFormat' from JSON`,
  );
}

/** @internal */
export const ChatCompletionNonStreamingServiceTier$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionNonStreamingServiceTier> = z.nativeEnum(
    ChatCompletionNonStreamingServiceTier,
  );

/** @internal */
export const ChatCompletionNonStreamingServiceTier$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionNonStreamingServiceTier> =
    ChatCompletionNonStreamingServiceTier$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionNonStreamingServiceTier$ {
  /** @deprecated use `ChatCompletionNonStreamingServiceTier$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionNonStreamingServiceTier$inboundSchema;
  /** @deprecated use `ChatCompletionNonStreamingServiceTier$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionNonStreamingServiceTier$outboundSchema;
}

/** @internal */
export const ChatCompletionNonStreamingStop$inboundSchema: z.ZodType<
  ChatCompletionNonStreamingStop,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type ChatCompletionNonStreamingStop$Outbound = string | Array<string>;

/** @internal */
export const ChatCompletionNonStreamingStop$outboundSchema: z.ZodType<
  ChatCompletionNonStreamingStop$Outbound,
  z.ZodTypeDef,
  ChatCompletionNonStreamingStop
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionNonStreamingStop$ {
  /** @deprecated use `ChatCompletionNonStreamingStop$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionNonStreamingStop$inboundSchema;
  /** @deprecated use `ChatCompletionNonStreamingStop$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionNonStreamingStop$outboundSchema;
  /** @deprecated use `ChatCompletionNonStreamingStop$Outbound` instead. */
  export type Outbound = ChatCompletionNonStreamingStop$Outbound;
}

export function chatCompletionNonStreamingStopToJSON(
  chatCompletionNonStreamingStop: ChatCompletionNonStreamingStop,
): string {
  return JSON.stringify(
    ChatCompletionNonStreamingStop$outboundSchema.parse(
      chatCompletionNonStreamingStop,
    ),
  );
}

export function chatCompletionNonStreamingStopFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionNonStreamingStop, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionNonStreamingStop$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionNonStreamingStop' from JSON`,
  );
}

/** @internal */
export const ChatCompletionNonStreamingToolChoiceEnum$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionNonStreamingToolChoiceEnum> = z
    .nativeEnum(ChatCompletionNonStreamingToolChoiceEnum);

/** @internal */
export const ChatCompletionNonStreamingToolChoiceEnum$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionNonStreamingToolChoiceEnum> =
    ChatCompletionNonStreamingToolChoiceEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionNonStreamingToolChoiceEnum$ {
  /** @deprecated use `ChatCompletionNonStreamingToolChoiceEnum$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionNonStreamingToolChoiceEnum$inboundSchema;
  /** @deprecated use `ChatCompletionNonStreamingToolChoiceEnum$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionNonStreamingToolChoiceEnum$outboundSchema;
}

/** @internal */
export const ChatCompletionNonStreamingToolChoiceUnion$inboundSchema: z.ZodType<
  ChatCompletionNonStreamingToolChoiceUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  ChatCompletionAllowedToolChoiceParam$inboundSchema,
  ChatCompletionNamedToolChoiceParam$inboundSchema,
  ChatCompletionNamedToolChoiceCustomParam$inboundSchema,
  ChatCompletionNonStreamingToolChoiceEnum$inboundSchema,
]);

/** @internal */
export type ChatCompletionNonStreamingToolChoiceUnion$Outbound =
  | ChatCompletionAllowedToolChoiceParam$Outbound
  | ChatCompletionNamedToolChoiceParam$Outbound
  | ChatCompletionNamedToolChoiceCustomParam$Outbound
  | string;

/** @internal */
export const ChatCompletionNonStreamingToolChoiceUnion$outboundSchema:
  z.ZodType<
    ChatCompletionNonStreamingToolChoiceUnion$Outbound,
    z.ZodTypeDef,
    ChatCompletionNonStreamingToolChoiceUnion
  > = z.union([
    ChatCompletionAllowedToolChoiceParam$outboundSchema,
    ChatCompletionNamedToolChoiceParam$outboundSchema,
    ChatCompletionNamedToolChoiceCustomParam$outboundSchema,
    ChatCompletionNonStreamingToolChoiceEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionNonStreamingToolChoiceUnion$ {
  /** @deprecated use `ChatCompletionNonStreamingToolChoiceUnion$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionNonStreamingToolChoiceUnion$inboundSchema;
  /** @deprecated use `ChatCompletionNonStreamingToolChoiceUnion$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionNonStreamingToolChoiceUnion$outboundSchema;
  /** @deprecated use `ChatCompletionNonStreamingToolChoiceUnion$Outbound` instead. */
  export type Outbound = ChatCompletionNonStreamingToolChoiceUnion$Outbound;
}

export function chatCompletionNonStreamingToolChoiceUnionToJSON(
  chatCompletionNonStreamingToolChoiceUnion:
    ChatCompletionNonStreamingToolChoiceUnion,
): string {
  return JSON.stringify(
    ChatCompletionNonStreamingToolChoiceUnion$outboundSchema.parse(
      chatCompletionNonStreamingToolChoiceUnion,
    ),
  );
}

export function chatCompletionNonStreamingToolChoiceUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionNonStreamingToolChoiceUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionNonStreamingToolChoiceUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionNonStreamingToolChoiceUnion' from JSON`,
  );
}

/** @internal */
export const ChatCompletionNonStreamingTool$inboundSchema: z.ZodType<
  ChatCompletionNonStreamingTool,
  z.ZodTypeDef,
  unknown
> = z.union([
  ChatCompletionFunctionToolParam$inboundSchema,
  ChatCompletionCustomToolParam$inboundSchema,
]);

/** @internal */
export type ChatCompletionNonStreamingTool$Outbound =
  | ChatCompletionFunctionToolParam$Outbound
  | ChatCompletionCustomToolParam$Outbound;

/** @internal */
export const ChatCompletionNonStreamingTool$outboundSchema: z.ZodType<
  ChatCompletionNonStreamingTool$Outbound,
  z.ZodTypeDef,
  ChatCompletionNonStreamingTool
> = z.union([
  ChatCompletionFunctionToolParam$outboundSchema,
  ChatCompletionCustomToolParam$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionNonStreamingTool$ {
  /** @deprecated use `ChatCompletionNonStreamingTool$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionNonStreamingTool$inboundSchema;
  /** @deprecated use `ChatCompletionNonStreamingTool$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionNonStreamingTool$outboundSchema;
  /** @deprecated use `ChatCompletionNonStreamingTool$Outbound` instead. */
  export type Outbound = ChatCompletionNonStreamingTool$Outbound;
}

export function chatCompletionNonStreamingToolToJSON(
  chatCompletionNonStreamingTool: ChatCompletionNonStreamingTool,
): string {
  return JSON.stringify(
    ChatCompletionNonStreamingTool$outboundSchema.parse(
      chatCompletionNonStreamingTool,
    ),
  );
}

export function chatCompletionNonStreamingToolFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionNonStreamingTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionNonStreamingTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionNonStreamingTool' from JSON`,
  );
}

/** @internal */
export const ChatCompletionNonStreamingVerbosity$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionNonStreamingVerbosity
> = z.nativeEnum(ChatCompletionNonStreamingVerbosity);

/** @internal */
export const ChatCompletionNonStreamingVerbosity$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionNonStreamingVerbosity> =
    ChatCompletionNonStreamingVerbosity$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionNonStreamingVerbosity$ {
  /** @deprecated use `ChatCompletionNonStreamingVerbosity$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionNonStreamingVerbosity$inboundSchema;
  /** @deprecated use `ChatCompletionNonStreamingVerbosity$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionNonStreamingVerbosity$outboundSchema;
}

/** @internal */
export const ChatCompletionNonStreaming$inboundSchema: z.ZodType<
  ChatCompletionNonStreaming,
  z.ZodTypeDef,
  unknown
> = z.object({
  messages: z.array(
    z.union([
      ChatCompletionToolMessageParam$inboundSchema,
      ChatCompletionFunctionMessageParam$inboundSchema,
      ChatCompletionDeveloperMessageParam$inboundSchema,
      ChatCompletionSystemMessageParam$inboundSchema,
      ChatCompletionUserMessageParam$inboundSchema,
      ChatCompletionAssistantMessageParam$inboundSchema,
    ]),
  ),
  model: TModel$inboundSchema.optional(),
  audio: z.nullable(ChatCompletionAudioParam$inboundSchema).optional(),
  frequency_penalty: z.nullable(z.number()).optional(),
  function_call: z.union([
    ChatCompletionFunctionCallOptionParam$inboundSchema,
    ChatCompletionNonStreamingFunctionCallEnum$inboundSchema,
  ]).optional(),
  functions: z.array(
    OpenaiTypesChatCompletionCreateParamsFunction$inboundSchema,
  ).optional(),
  logit_bias: z.nullable(z.record(z.number().int())).optional(),
  logprobs: z.nullable(z.boolean()).optional(),
  max_completion_tokens: z.nullable(z.number().int()).optional(),
  max_tokens: z.nullable(z.number().int()).optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  modalities: z.nullable(
    z.array(ChatCompletionNonStreamingModality$inboundSchema),
  ).optional(),
  n: z.nullable(z.number().int()).optional(),
  parallel_tool_calls: z.boolean().optional(),
  prediction: z.nullable(ChatCompletionPredictionContentParam$inboundSchema)
    .optional(),
  presence_penalty: z.nullable(z.number()).optional(),
  prompt_cache_key: z.string().optional(),
  reasoning_effort: z.nullable(
    ChatCompletionNonStreamingReasoningEffort$inboundSchema,
  ).optional(),
  response_format: z.union([
    ResponseFormatJSONSchema$inboundSchema,
    ResponseFormatText$inboundSchema,
    ResponseFormatJSONObject$inboundSchema,
  ]).optional(),
  safety_identifier: z.string().optional(),
  seed: z.nullable(z.number().int()).optional(),
  service_tier: z.nullable(ChatCompletionNonStreamingServiceTier$inboundSchema)
    .optional(),
  stop: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  store: z.nullable(z.boolean()).optional(),
  stream_options: z.nullable(ChatCompletionStreamOptionsParam$inboundSchema)
    .optional(),
  temperature: z.nullable(z.number()).optional(),
  tool_choice: z.union([
    ChatCompletionAllowedToolChoiceParam$inboundSchema,
    ChatCompletionNamedToolChoiceParam$inboundSchema,
    ChatCompletionNamedToolChoiceCustomParam$inboundSchema,
    ChatCompletionNonStreamingToolChoiceEnum$inboundSchema,
  ]).optional(),
  tools: z.array(
    z.union([
      ChatCompletionFunctionToolParam$inboundSchema,
      ChatCompletionCustomToolParam$inboundSchema,
    ]),
  ).optional(),
  top_logprobs: z.nullable(z.number().int()).optional(),
  top_p: z.nullable(z.number()).optional(),
  user: z.string().optional(),
  verbosity: z.nullable(ChatCompletionNonStreamingVerbosity$inboundSchema)
    .optional(),
  web_search_options: WebSearchOptions$inboundSchema.optional(),
  stream: z.nullable(z.literal(false).default(false)).optional(),
  tags: z.nullable(z.record(z.any())).optional(),
  parent_span_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "frequency_penalty": "frequencyPenalty",
    "function_call": "functionCall",
    "logit_bias": "logitBias",
    "max_completion_tokens": "maxCompletionTokens",
    "max_tokens": "maxTokens",
    "parallel_tool_calls": "parallelToolCalls",
    "presence_penalty": "presencePenalty",
    "prompt_cache_key": "promptCacheKey",
    "reasoning_effort": "reasoningEffort",
    "response_format": "responseFormat",
    "safety_identifier": "safetyIdentifier",
    "service_tier": "serviceTier",
    "stream_options": "streamOptions",
    "tool_choice": "toolChoice",
    "top_logprobs": "topLogprobs",
    "top_p": "topP",
    "web_search_options": "webSearchOptions",
    "parent_span_id": "parentSpanId",
  });
});

/** @internal */
export type ChatCompletionNonStreaming$Outbound = {
  messages: Array<
    | ChatCompletionToolMessageParam$Outbound
    | ChatCompletionFunctionMessageParam$Outbound
    | ChatCompletionDeveloperMessageParam$Outbound
    | ChatCompletionSystemMessageParam$Outbound
    | ChatCompletionUserMessageParam$Outbound
    | ChatCompletionAssistantMessageParam$Outbound
  >;
  model?: TModel$Outbound | undefined;
  audio?: ChatCompletionAudioParam$Outbound | null | undefined;
  frequency_penalty?: number | null | undefined;
  function_call?:
    | ChatCompletionFunctionCallOptionParam$Outbound
    | string
    | undefined;
  functions?:
    | Array<OpenaiTypesChatCompletionCreateParamsFunction$Outbound>
    | undefined;
  logit_bias?: { [k: string]: number } | null | undefined;
  logprobs?: boolean | null | undefined;
  max_completion_tokens?: number | null | undefined;
  max_tokens?: number | null | undefined;
  metadata?: { [k: string]: string } | null | undefined;
  modalities?: Array<string> | null | undefined;
  n?: number | null | undefined;
  parallel_tool_calls?: boolean | undefined;
  prediction?: ChatCompletionPredictionContentParam$Outbound | null | undefined;
  presence_penalty?: number | null | undefined;
  prompt_cache_key?: string | undefined;
  reasoning_effort?: string | null | undefined;
  response_format?:
    | ResponseFormatJSONSchema$Outbound
    | ResponseFormatText$Outbound
    | ResponseFormatJSONObject$Outbound
    | undefined;
  safety_identifier?: string | undefined;
  seed?: number | null | undefined;
  service_tier?: string | null | undefined;
  stop?: string | Array<string> | null | undefined;
  store?: boolean | null | undefined;
  stream_options?: ChatCompletionStreamOptionsParam$Outbound | null | undefined;
  temperature?: number | null | undefined;
  tool_choice?:
    | ChatCompletionAllowedToolChoiceParam$Outbound
    | ChatCompletionNamedToolChoiceParam$Outbound
    | ChatCompletionNamedToolChoiceCustomParam$Outbound
    | string
    | undefined;
  tools?:
    | Array<
      | ChatCompletionFunctionToolParam$Outbound
      | ChatCompletionCustomToolParam$Outbound
    >
    | undefined;
  top_logprobs?: number | null | undefined;
  top_p?: number | null | undefined;
  user?: string | undefined;
  verbosity?: string | null | undefined;
  web_search_options?: WebSearchOptions$Outbound | undefined;
  stream: false | null;
  tags?: { [k: string]: any } | null | undefined;
  parent_span_id?: string | null | undefined;
};

/** @internal */
export const ChatCompletionNonStreaming$outboundSchema: z.ZodType<
  ChatCompletionNonStreaming$Outbound,
  z.ZodTypeDef,
  ChatCompletionNonStreaming
> = z.object({
  messages: z.array(
    z.union([
      ChatCompletionToolMessageParam$outboundSchema,
      ChatCompletionFunctionMessageParam$outboundSchema,
      ChatCompletionDeveloperMessageParam$outboundSchema,
      ChatCompletionSystemMessageParam$outboundSchema,
      ChatCompletionUserMessageParam$outboundSchema,
      ChatCompletionAssistantMessageParam$outboundSchema,
    ]),
  ),
  model: TModel$outboundSchema.optional(),
  audio: z.nullable(ChatCompletionAudioParam$outboundSchema).optional(),
  frequencyPenalty: z.nullable(z.number()).optional(),
  functionCall: z.union([
    ChatCompletionFunctionCallOptionParam$outboundSchema,
    ChatCompletionNonStreamingFunctionCallEnum$outboundSchema,
  ]).optional(),
  functions: z.array(
    OpenaiTypesChatCompletionCreateParamsFunction$outboundSchema,
  ).optional(),
  logitBias: z.nullable(z.record(z.number().int())).optional(),
  logprobs: z.nullable(z.boolean()).optional(),
  maxCompletionTokens: z.nullable(z.number().int()).optional(),
  maxTokens: z.nullable(z.number().int()).optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  modalities: z.nullable(
    z.array(ChatCompletionNonStreamingModality$outboundSchema),
  ).optional(),
  n: z.nullable(z.number().int()).optional(),
  parallelToolCalls: z.boolean().optional(),
  prediction: z.nullable(ChatCompletionPredictionContentParam$outboundSchema)
    .optional(),
  presencePenalty: z.nullable(z.number()).optional(),
  promptCacheKey: z.string().optional(),
  reasoningEffort: z.nullable(
    ChatCompletionNonStreamingReasoningEffort$outboundSchema,
  ).optional(),
  responseFormat: z.union([
    ResponseFormatJSONSchema$outboundSchema,
    ResponseFormatText$outboundSchema,
    ResponseFormatJSONObject$outboundSchema,
  ]).optional(),
  safetyIdentifier: z.string().optional(),
  seed: z.nullable(z.number().int()).optional(),
  serviceTier: z.nullable(ChatCompletionNonStreamingServiceTier$outboundSchema)
    .optional(),
  stop: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  store: z.nullable(z.boolean()).optional(),
  streamOptions: z.nullable(ChatCompletionStreamOptionsParam$outboundSchema)
    .optional(),
  temperature: z.nullable(z.number()).optional(),
  toolChoice: z.union([
    ChatCompletionAllowedToolChoiceParam$outboundSchema,
    ChatCompletionNamedToolChoiceParam$outboundSchema,
    ChatCompletionNamedToolChoiceCustomParam$outboundSchema,
    ChatCompletionNonStreamingToolChoiceEnum$outboundSchema,
  ]).optional(),
  tools: z.array(
    z.union([
      ChatCompletionFunctionToolParam$outboundSchema,
      ChatCompletionCustomToolParam$outboundSchema,
    ]),
  ).optional(),
  topLogprobs: z.nullable(z.number().int()).optional(),
  topP: z.nullable(z.number()).optional(),
  user: z.string().optional(),
  verbosity: z.nullable(ChatCompletionNonStreamingVerbosity$outboundSchema)
    .optional(),
  webSearchOptions: WebSearchOptions$outboundSchema.optional(),
  stream: z.nullable(z.literal(false).default(false as const)),
  tags: z.nullable(z.record(z.any())).optional(),
  parentSpanId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    frequencyPenalty: "frequency_penalty",
    functionCall: "function_call",
    logitBias: "logit_bias",
    maxCompletionTokens: "max_completion_tokens",
    maxTokens: "max_tokens",
    parallelToolCalls: "parallel_tool_calls",
    presencePenalty: "presence_penalty",
    promptCacheKey: "prompt_cache_key",
    reasoningEffort: "reasoning_effort",
    responseFormat: "response_format",
    safetyIdentifier: "safety_identifier",
    serviceTier: "service_tier",
    streamOptions: "stream_options",
    toolChoice: "tool_choice",
    topLogprobs: "top_logprobs",
    topP: "top_p",
    webSearchOptions: "web_search_options",
    parentSpanId: "parent_span_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionNonStreaming$ {
  /** @deprecated use `ChatCompletionNonStreaming$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionNonStreaming$inboundSchema;
  /** @deprecated use `ChatCompletionNonStreaming$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionNonStreaming$outboundSchema;
  /** @deprecated use `ChatCompletionNonStreaming$Outbound` instead. */
  export type Outbound = ChatCompletionNonStreaming$Outbound;
}

export function chatCompletionNonStreamingToJSON(
  chatCompletionNonStreaming: ChatCompletionNonStreaming,
): string {
  return JSON.stringify(
    ChatCompletionNonStreaming$outboundSchema.parse(chatCompletionNonStreaming),
  );
}

export function chatCompletionNonStreamingFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionNonStreaming, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionNonStreaming$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionNonStreaming' from JSON`,
  );
}
