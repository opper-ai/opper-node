/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SaveToDatasetResponse = {
  /**
   * The ID of the dataset
   */
  datasetId: string;
  /**
   * The ID of the dataset entry
   */
  datasetEntryId: string;
  /**
   * The input of the dataset entry
   */
  input?: string | null | undefined;
  /**
   * The output of the dataset entry
   */
  output?: string | null | undefined;
  /**
   * The expected output of the dataset entry
   */
  expected?: string | null | undefined;
  /**
   * The comment of the dataset entry
   */
  comment?: string | null | undefined;
};

/** @internal */
export const SaveToDatasetResponse$inboundSchema: z.ZodType<
  SaveToDatasetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  dataset_id: z.string(),
  dataset_entry_id: z.string(),
  input: z.nullable(z.string()).optional(),
  output: z.nullable(z.string()).optional(),
  expected: z.nullable(z.string()).optional(),
  comment: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "dataset_id": "datasetId",
    "dataset_entry_id": "datasetEntryId",
  });
});

/** @internal */
export type SaveToDatasetResponse$Outbound = {
  dataset_id: string;
  dataset_entry_id: string;
  input?: string | null | undefined;
  output?: string | null | undefined;
  expected?: string | null | undefined;
  comment?: string | null | undefined;
};

/** @internal */
export const SaveToDatasetResponse$outboundSchema: z.ZodType<
  SaveToDatasetResponse$Outbound,
  z.ZodTypeDef,
  SaveToDatasetResponse
> = z.object({
  datasetId: z.string(),
  datasetEntryId: z.string(),
  input: z.nullable(z.string()).optional(),
  output: z.nullable(z.string()).optional(),
  expected: z.nullable(z.string()).optional(),
  comment: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    datasetId: "dataset_id",
    datasetEntryId: "dataset_entry_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SaveToDatasetResponse$ {
  /** @deprecated use `SaveToDatasetResponse$inboundSchema` instead. */
  export const inboundSchema = SaveToDatasetResponse$inboundSchema;
  /** @deprecated use `SaveToDatasetResponse$outboundSchema` instead. */
  export const outboundSchema = SaveToDatasetResponse$outboundSchema;
  /** @deprecated use `SaveToDatasetResponse$Outbound` instead. */
  export type Outbound = SaveToDatasetResponse$Outbound;
}

export function saveToDatasetResponseToJSON(
  saveToDatasetResponse: SaveToDatasetResponse,
): string {
  return JSON.stringify(
    SaveToDatasetResponse$outboundSchema.parse(saveToDatasetResponse),
  );
}

export function saveToDatasetResponseFromJSON(
  jsonString: string,
): SafeParseResult<SaveToDatasetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SaveToDatasetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SaveToDatasetResponse' from JSON`,
  );
}
