/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SpanData = {
  /**
   * The input of the span
   */
  input?: string | null | undefined;
  /**
   * The output of the span
   */
  output?: string | null | undefined;
  /**
   * The total tokens of the span
   */
  totalTokens?: number | null | undefined;
  /**
   * The model of the span
   */
  model?: string | null | undefined;
  /**
   * The instructions of the span in case of a generation span
   */
  instructions?: string | null | undefined;
  /**
   * The function of the span
   */
  function?: string | null | undefined;
  /**
   * The tags of the span
   */
  tags?: Array<string> | null | undefined;
  /**
   * The score of the span, by default set to the evaluation score of the generation of the span
   */
  score?: number | null | undefined;
  /**
   * The id of the generation of the span
   */
  generationId?: string | null | undefined;
  /**
   * The observations of the span in case of a generation span
   */
  observations?: string | null | undefined;
};

/** @internal */
export const SpanData$inboundSchema: z.ZodType<
  SpanData,
  z.ZodTypeDef,
  unknown
> = z.object({
  input: z.nullable(z.string()).optional(),
  output: z.nullable(z.string()).optional(),
  total_tokens: z.nullable(z.number().int()).optional(),
  model: z.nullable(z.string()).optional(),
  instructions: z.nullable(z.string()).optional(),
  function: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  score: z.nullable(z.number().int()).optional(),
  generation_id: z.nullable(z.string()).optional(),
  observations: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "total_tokens": "totalTokens",
    "generation_id": "generationId",
  });
});

/** @internal */
export type SpanData$Outbound = {
  input?: string | null | undefined;
  output?: string | null | undefined;
  total_tokens?: number | null | undefined;
  model?: string | null | undefined;
  instructions?: string | null | undefined;
  function?: string | null | undefined;
  tags?: Array<string> | null | undefined;
  score?: number | null | undefined;
  generation_id?: string | null | undefined;
  observations?: string | null | undefined;
};

/** @internal */
export const SpanData$outboundSchema: z.ZodType<
  SpanData$Outbound,
  z.ZodTypeDef,
  SpanData
> = z.object({
  input: z.nullable(z.string()).optional(),
  output: z.nullable(z.string()).optional(),
  totalTokens: z.nullable(z.number().int()).optional(),
  model: z.nullable(z.string()).optional(),
  instructions: z.nullable(z.string()).optional(),
  function: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  score: z.nullable(z.number().int()).optional(),
  generationId: z.nullable(z.string()).optional(),
  observations: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    totalTokens: "total_tokens",
    generationId: "generation_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SpanData$ {
  /** @deprecated use `SpanData$inboundSchema` instead. */
  export const inboundSchema = SpanData$inboundSchema;
  /** @deprecated use `SpanData$outboundSchema` instead. */
  export const outboundSchema = SpanData$outboundSchema;
  /** @deprecated use `SpanData$Outbound` instead. */
  export type Outbound = SpanData$Outbound;
}

export function spanDataToJSON(spanData: SpanData): string {
  return JSON.stringify(SpanData$outboundSchema.parse(spanData));
}

export function spanDataFromJSON(
  jsonString: string,
): SafeParseResult<SpanData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SpanData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SpanData' from JSON`,
  );
}
