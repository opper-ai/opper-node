/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CreateKnowledgeBaseRequest = {
  name: string;
  /**
   * The embedding model to use for the knowledge base
   */
  embeddingModel?: string | undefined;
};

/** @internal */
export const CreateKnowledgeBaseRequest$inboundSchema: z.ZodType<
  CreateKnowledgeBaseRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  embedding_model: z.string().default("azure/text-embedding-3-large"),
}).transform((v) => {
  return remap$(v, {
    "embedding_model": "embeddingModel",
  });
});

/** @internal */
export type CreateKnowledgeBaseRequest$Outbound = {
  name: string;
  embedding_model: string;
};

/** @internal */
export const CreateKnowledgeBaseRequest$outboundSchema: z.ZodType<
  CreateKnowledgeBaseRequest$Outbound,
  z.ZodTypeDef,
  CreateKnowledgeBaseRequest
> = z.object({
  name: z.string(),
  embeddingModel: z.string().default("azure/text-embedding-3-large"),
}).transform((v) => {
  return remap$(v, {
    embeddingModel: "embedding_model",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateKnowledgeBaseRequest$ {
  /** @deprecated use `CreateKnowledgeBaseRequest$inboundSchema` instead. */
  export const inboundSchema = CreateKnowledgeBaseRequest$inboundSchema;
  /** @deprecated use `CreateKnowledgeBaseRequest$outboundSchema` instead. */
  export const outboundSchema = CreateKnowledgeBaseRequest$outboundSchema;
  /** @deprecated use `CreateKnowledgeBaseRequest$Outbound` instead. */
  export type Outbound = CreateKnowledgeBaseRequest$Outbound;
}

export function createKnowledgeBaseRequestToJSON(
  createKnowledgeBaseRequest: CreateKnowledgeBaseRequest,
): string {
  return JSON.stringify(
    CreateKnowledgeBaseRequest$outboundSchema.parse(createKnowledgeBaseRequest),
  );
}

export function createKnowledgeBaseRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateKnowledgeBaseRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateKnowledgeBaseRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateKnowledgeBaseRequest' from JSON`,
  );
}
