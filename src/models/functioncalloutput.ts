/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type FunctionCallOutput = {
  arguments: string;
  name: string;
  additionalProperties?: { [k: string]: any };
};

/** @internal */
export const FunctionCallOutput$inboundSchema: z.ZodType<
  FunctionCallOutput,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    arguments: z.string(),
    name: z.string(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type FunctionCallOutput$Outbound = {
  arguments: string;
  name: string;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const FunctionCallOutput$outboundSchema: z.ZodType<
  FunctionCallOutput$Outbound,
  z.ZodTypeDef,
  FunctionCallOutput
> = z.object({
  arguments: z.string(),
  name: z.string(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionCallOutput$ {
  /** @deprecated use `FunctionCallOutput$inboundSchema` instead. */
  export const inboundSchema = FunctionCallOutput$inboundSchema;
  /** @deprecated use `FunctionCallOutput$outboundSchema` instead. */
  export const outboundSchema = FunctionCallOutput$outboundSchema;
  /** @deprecated use `FunctionCallOutput$Outbound` instead. */
  export type Outbound = FunctionCallOutput$Outbound;
}

export function functionCallOutputToJSON(
  functionCallOutput: FunctionCallOutput,
): string {
  return JSON.stringify(
    FunctionCallOutput$outboundSchema.parse(functionCallOutput),
  );
}

export function functionCallOutputFromJSON(
  jsonString: string,
): SafeParseResult<FunctionCallOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionCallOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionCallOutput' from JSON`,
  );
}
