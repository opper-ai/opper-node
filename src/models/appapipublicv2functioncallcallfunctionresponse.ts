/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Result of the task if the call uses an output schema
 */
export type JsonPayload = { [k: string]: any } | Array<any> | any;

export type AppApiPublicV2FunctionCallCallFunctionResponse = {
  /**
   * The ID of the span of the call
   */
  spanId: string;
  /**
   * Result of the task if the call does not use an output schema
   */
  message?: string | null | undefined;
  /**
   * Result of the task if the call uses an output schema
   */
  jsonPayload?: { [k: string]: any } | Array<any> | any | null | undefined;
  audio?: { [k: string]: any } | null | undefined;
  /**
   * True if the result was returned from a cached results
   */
  cached?: boolean | null | undefined;
  /**
   * The images generated by the call. Only available for image models. Depending on the configuration, the response can either be a list of image urls or a base64 encoded images.
   */
  images?: Array<string> | null | undefined;
};

/** @internal */
export const JsonPayload$inboundSchema: z.ZodType<
  JsonPayload,
  z.ZodTypeDef,
  unknown
> = z.union([z.record(z.any()), z.array(z.any()), z.any()]);

/** @internal */
export type JsonPayload$Outbound = { [k: string]: any } | Array<any> | any;

/** @internal */
export const JsonPayload$outboundSchema: z.ZodType<
  JsonPayload$Outbound,
  z.ZodTypeDef,
  JsonPayload
> = z.union([z.record(z.any()), z.array(z.any()), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JsonPayload$ {
  /** @deprecated use `JsonPayload$inboundSchema` instead. */
  export const inboundSchema = JsonPayload$inboundSchema;
  /** @deprecated use `JsonPayload$outboundSchema` instead. */
  export const outboundSchema = JsonPayload$outboundSchema;
  /** @deprecated use `JsonPayload$Outbound` instead. */
  export type Outbound = JsonPayload$Outbound;
}

export function jsonPayloadToJSON(jsonPayload: JsonPayload): string {
  return JSON.stringify(JsonPayload$outboundSchema.parse(jsonPayload));
}

export function jsonPayloadFromJSON(
  jsonString: string,
): SafeParseResult<JsonPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JsonPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JsonPayload' from JSON`,
  );
}

/** @internal */
export const AppApiPublicV2FunctionCallCallFunctionResponse$inboundSchema:
  z.ZodType<
    AppApiPublicV2FunctionCallCallFunctionResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    span_id: z.string(),
    message: z.nullable(z.string()).optional(),
    json_payload: z.nullable(
      z.union([z.record(z.any()), z.array(z.any()), z.any()]),
    ).optional(),
    audio: z.nullable(z.record(z.any())).optional(),
    cached: z.nullable(z.boolean()).optional(),
    images: z.nullable(z.array(z.string())).optional(),
  }).transform((v) => {
    return remap$(v, {
      "span_id": "spanId",
      "json_payload": "jsonPayload",
    });
  });

/** @internal */
export type AppApiPublicV2FunctionCallCallFunctionResponse$Outbound = {
  span_id: string;
  message?: string | null | undefined;
  json_payload?: { [k: string]: any } | Array<any> | any | null | undefined;
  audio?: { [k: string]: any } | null | undefined;
  cached?: boolean | null | undefined;
  images?: Array<string> | null | undefined;
};

/** @internal */
export const AppApiPublicV2FunctionCallCallFunctionResponse$outboundSchema:
  z.ZodType<
    AppApiPublicV2FunctionCallCallFunctionResponse$Outbound,
    z.ZodTypeDef,
    AppApiPublicV2FunctionCallCallFunctionResponse
  > = z.object({
    spanId: z.string(),
    message: z.nullable(z.string()).optional(),
    jsonPayload: z.nullable(
      z.union([z.record(z.any()), z.array(z.any()), z.any()]),
    ).optional(),
    audio: z.nullable(z.record(z.any())).optional(),
    cached: z.nullable(z.boolean()).optional(),
    images: z.nullable(z.array(z.string())).optional(),
  }).transform((v) => {
    return remap$(v, {
      spanId: "span_id",
      jsonPayload: "json_payload",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppApiPublicV2FunctionCallCallFunctionResponse$ {
  /** @deprecated use `AppApiPublicV2FunctionCallCallFunctionResponse$inboundSchema` instead. */
  export const inboundSchema =
    AppApiPublicV2FunctionCallCallFunctionResponse$inboundSchema;
  /** @deprecated use `AppApiPublicV2FunctionCallCallFunctionResponse$outboundSchema` instead. */
  export const outboundSchema =
    AppApiPublicV2FunctionCallCallFunctionResponse$outboundSchema;
  /** @deprecated use `AppApiPublicV2FunctionCallCallFunctionResponse$Outbound` instead. */
  export type Outbound =
    AppApiPublicV2FunctionCallCallFunctionResponse$Outbound;
}

export function appApiPublicV2FunctionCallCallFunctionResponseToJSON(
  appApiPublicV2FunctionCallCallFunctionResponse:
    AppApiPublicV2FunctionCallCallFunctionResponse,
): string {
  return JSON.stringify(
    AppApiPublicV2FunctionCallCallFunctionResponse$outboundSchema.parse(
      appApiPublicV2FunctionCallCallFunctionResponse,
    ),
  );
}

export function appApiPublicV2FunctionCallCallFunctionResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  AppApiPublicV2FunctionCallCallFunctionResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AppApiPublicV2FunctionCallCallFunctionResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AppApiPublicV2FunctionCallCallFunctionResponse' from JSON`,
  );
}
