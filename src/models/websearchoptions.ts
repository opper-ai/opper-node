/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  WebSearchOptionsUserLocation,
  WebSearchOptionsUserLocation$inboundSchema,
  WebSearchOptionsUserLocation$Outbound,
  WebSearchOptionsUserLocation$outboundSchema,
} from "./websearchoptionsuserlocation.js";

export const SearchContextSize = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
export type SearchContextSize = ClosedEnum<typeof SearchContextSize>;

export type WebSearchOptions = {
  searchContextSize?: SearchContextSize | undefined;
  userLocation?: WebSearchOptionsUserLocation | null | undefined;
};

/** @internal */
export const SearchContextSize$inboundSchema: z.ZodNativeEnum<
  typeof SearchContextSize
> = z.nativeEnum(SearchContextSize);

/** @internal */
export const SearchContextSize$outboundSchema: z.ZodNativeEnum<
  typeof SearchContextSize
> = SearchContextSize$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchContextSize$ {
  /** @deprecated use `SearchContextSize$inboundSchema` instead. */
  export const inboundSchema = SearchContextSize$inboundSchema;
  /** @deprecated use `SearchContextSize$outboundSchema` instead. */
  export const outboundSchema = SearchContextSize$outboundSchema;
}

/** @internal */
export const WebSearchOptions$inboundSchema: z.ZodType<
  WebSearchOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  search_context_size: SearchContextSize$inboundSchema.optional(),
  user_location: z.nullable(WebSearchOptionsUserLocation$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "search_context_size": "searchContextSize",
    "user_location": "userLocation",
  });
});

/** @internal */
export type WebSearchOptions$Outbound = {
  search_context_size?: string | undefined;
  user_location?: WebSearchOptionsUserLocation$Outbound | null | undefined;
};

/** @internal */
export const WebSearchOptions$outboundSchema: z.ZodType<
  WebSearchOptions$Outbound,
  z.ZodTypeDef,
  WebSearchOptions
> = z.object({
  searchContextSize: SearchContextSize$outboundSchema.optional(),
  userLocation: z.nullable(WebSearchOptionsUserLocation$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    searchContextSize: "search_context_size",
    userLocation: "user_location",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebSearchOptions$ {
  /** @deprecated use `WebSearchOptions$inboundSchema` instead. */
  export const inboundSchema = WebSearchOptions$inboundSchema;
  /** @deprecated use `WebSearchOptions$outboundSchema` instead. */
  export const outboundSchema = WebSearchOptions$outboundSchema;
  /** @deprecated use `WebSearchOptions$Outbound` instead. */
  export type Outbound = WebSearchOptions$Outbound;
}

export function webSearchOptionsToJSON(
  webSearchOptions: WebSearchOptions,
): string {
  return JSON.stringify(
    WebSearchOptions$outboundSchema.parse(webSearchOptions),
  );
}

export function webSearchOptionsFromJSON(
  jsonString: string,
): SafeParseResult<WebSearchOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebSearchOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebSearchOptions' from JSON`,
  );
}
