/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type FunctionCallInput = {
  arguments: string;
  name: string;
};

/** @internal */
export const FunctionCallInput$inboundSchema: z.ZodType<
  FunctionCallInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  arguments: z.string(),
  name: z.string(),
});

/** @internal */
export type FunctionCallInput$Outbound = {
  arguments: string;
  name: string;
};

/** @internal */
export const FunctionCallInput$outboundSchema: z.ZodType<
  FunctionCallInput$Outbound,
  z.ZodTypeDef,
  FunctionCallInput
> = z.object({
  arguments: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionCallInput$ {
  /** @deprecated use `FunctionCallInput$inboundSchema` instead. */
  export const inboundSchema = FunctionCallInput$inboundSchema;
  /** @deprecated use `FunctionCallInput$outboundSchema` instead. */
  export const outboundSchema = FunctionCallInput$outboundSchema;
  /** @deprecated use `FunctionCallInput$Outbound` instead. */
  export type Outbound = FunctionCallInput$Outbound;
}

export function functionCallInputToJSON(
  functionCallInput: FunctionCallInput,
): string {
  return JSON.stringify(
    FunctionCallInput$outboundSchema.parse(functionCallInput),
  );
}

export function functionCallInputFromJSON(
  jsonString: string,
): SafeParseResult<FunctionCallInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionCallInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionCallInput' from JSON`,
  );
}
