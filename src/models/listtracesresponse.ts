/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ListTracesResponse = {
  /**
   * The id of the trace
   */
  id: string;
  /**
   * The start time of the trace
   */
  startTime?: Date | null | undefined;
  /**
   * The end time of the trace
   */
  endTime?: Date | null | undefined;
  /**
   * The duration of the trace
   */
  durationMs?: number | null | undefined;
  /**
   * The status of the trace
   */
  status?: string | null | undefined;
  /**
   * The name of the trace, set to the name of the root span of the trace
   */
  name?: string | null | undefined;
  /**
   * The input of the trace, set to the input of the root span of the trace
   */
  input?: string | null | undefined;
  /**
   * The output of the trace, set to the output of the root span of the trace
   */
  output?: string | null | undefined;
  /**
   * The total tokens of the trace
   */
  totalTokens?: number | null | undefined;
};

/** @internal */
export const ListTracesResponse$inboundSchema: z.ZodType<
  ListTracesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  start_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  end_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  duration_ms: z.nullable(z.number().int()).optional(),
  status: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  input: z.nullable(z.string()).optional(),
  output: z.nullable(z.string()).optional(),
  total_tokens: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "start_time": "startTime",
    "end_time": "endTime",
    "duration_ms": "durationMs",
    "total_tokens": "totalTokens",
  });
});

/** @internal */
export type ListTracesResponse$Outbound = {
  id: string;
  start_time?: string | null | undefined;
  end_time?: string | null | undefined;
  duration_ms?: number | null | undefined;
  status?: string | null | undefined;
  name?: string | null | undefined;
  input?: string | null | undefined;
  output?: string | null | undefined;
  total_tokens?: number | null | undefined;
};

/** @internal */
export const ListTracesResponse$outboundSchema: z.ZodType<
  ListTracesResponse$Outbound,
  z.ZodTypeDef,
  ListTracesResponse
> = z.object({
  id: z.string(),
  startTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  endTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  durationMs: z.nullable(z.number().int()).optional(),
  status: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  input: z.nullable(z.string()).optional(),
  output: z.nullable(z.string()).optional(),
  totalTokens: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    startTime: "start_time",
    endTime: "end_time",
    durationMs: "duration_ms",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTracesResponse$ {
  /** @deprecated use `ListTracesResponse$inboundSchema` instead. */
  export const inboundSchema = ListTracesResponse$inboundSchema;
  /** @deprecated use `ListTracesResponse$outboundSchema` instead. */
  export const outboundSchema = ListTracesResponse$outboundSchema;
  /** @deprecated use `ListTracesResponse$Outbound` instead. */
  export type Outbound = ListTracesResponse$Outbound;
}

export function listTracesResponseToJSON(
  listTracesResponse: ListTracesResponse,
): string {
  return JSON.stringify(
    ListTracesResponse$outboundSchema.parse(listTracesResponse),
  );
}

export function listTracesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListTracesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTracesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTracesResponse' from JSON`,
  );
}
