/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  TModel,
  TModel$inboundSchema,
  TModel$Outbound,
  TModel$outboundSchema,
} from "./tmodel.js";

/**
 * The input to embed, can be a single string or a list of strings
 */
export type Input = string | Array<string>;

export type CreateEmbeddingRequest = {
  /**
   * The model to use for the embedding, if not provided, `EmbeddingModel(hosting_provider='Azure', location='EU', identifier='azure/text-embedding-3-large', name='azure/text-embedding-3-large-1536', dimensions=1536, max_tokens=8191, credentials='azure-se', is_default=True, is_public=True, extra={'api_base': 'https://opperopenaiservice.openai.azure.com', 'api_version': '2023-05-15', 'dimensions': 1536})` will be used
   */
  model?: TModel | null | undefined;
  /**
   * The input to embed, can be a single string or a list of strings
   */
  input: string | Array<string>;
};

/** @internal */
export const Input$inboundSchema: z.ZodType<Input, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.array(z.string())]);

/** @internal */
export type Input$Outbound = string | Array<string>;

/** @internal */
export const Input$outboundSchema: z.ZodType<
  Input$Outbound,
  z.ZodTypeDef,
  Input
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Input$ {
  /** @deprecated use `Input$inboundSchema` instead. */
  export const inboundSchema = Input$inboundSchema;
  /** @deprecated use `Input$outboundSchema` instead. */
  export const outboundSchema = Input$outboundSchema;
  /** @deprecated use `Input$Outbound` instead. */
  export type Outbound = Input$Outbound;
}

export function inputToJSON(input: Input): string {
  return JSON.stringify(Input$outboundSchema.parse(input));
}

export function inputFromJSON(
  jsonString: string,
): SafeParseResult<Input, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Input$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Input' from JSON`,
  );
}

/** @internal */
export const CreateEmbeddingRequest$inboundSchema: z.ZodType<
  CreateEmbeddingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.nullable(TModel$inboundSchema).optional(),
  input: z.union([z.string(), z.array(z.string())]),
});

/** @internal */
export type CreateEmbeddingRequest$Outbound = {
  model?: TModel$Outbound | null | undefined;
  input: string | Array<string>;
};

/** @internal */
export const CreateEmbeddingRequest$outboundSchema: z.ZodType<
  CreateEmbeddingRequest$Outbound,
  z.ZodTypeDef,
  CreateEmbeddingRequest
> = z.object({
  model: z.nullable(TModel$outboundSchema).optional(),
  input: z.union([z.string(), z.array(z.string())]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEmbeddingRequest$ {
  /** @deprecated use `CreateEmbeddingRequest$inboundSchema` instead. */
  export const inboundSchema = CreateEmbeddingRequest$inboundSchema;
  /** @deprecated use `CreateEmbeddingRequest$outboundSchema` instead. */
  export const outboundSchema = CreateEmbeddingRequest$outboundSchema;
  /** @deprecated use `CreateEmbeddingRequest$Outbound` instead. */
  export type Outbound = CreateEmbeddingRequest$Outbound;
}

export function createEmbeddingRequestToJSON(
  createEmbeddingRequest: CreateEmbeddingRequest,
): string {
  return JSON.stringify(
    CreateEmbeddingRequest$outboundSchema.parse(createEmbeddingRequest),
  );
}

export function createEmbeddingRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateEmbeddingRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEmbeddingRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEmbeddingRequest' from JSON`,
  );
}
