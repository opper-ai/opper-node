/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { OpperCore } from "../core.js";
import { encodeJSON } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { OpperError } from "../models/errors/oppererror.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Function Stream
 *
 * @remarks
 * Stream a function call execution in real-time using Server-Sent Events (SSE).
 *
 * This endpoint provides continuous streaming of function execution results, supporting both
 * unstructured text streaming and structured JSON streaming with precise field tracking.
 *
 * ## Streaming Modes
 *
 * **Text Mode (no output_schema):**
 * - Streams incremental text content via the `delta` field
 * - `chunk_type` will be "text"
 * - Best for conversational AI, creative writing, open-ended responses
 *
 * **Structured Mode (with output_schema):**
 * - Streams structured JSON with precise field tracking via `json_path`
 * - `chunk_type` will be "json"
 * - Enables real-time UI updates by showing which schema field is being populated
 * - Perfect for forms, dashboards, structured data display
 *
 * ## JSON Path Feature
 *
 * When using `output_schema`, each streaming chunk includes a `json_path` field showing exactly
 * which field in your schema is being populated:
 *
 * - `response.summary` → Top-level string field
 * - `response.people[0].name` → Name of first person in array
 * - `response.people[1].role` → Role of second person
 * - `response.metadata.created_at` → Nested object field
 *
 * This enables precise UI updates where you can route streaming content to specific components
 * based on the path, creating responsive real-time interfaces.
 *
 * ## Response Structure
 *
 * Each Server-Sent Event contains:
 * - `id`: Optional event identifier
 * - `event`: Optional event type (typically "message")
 * - `data`: StreamingChunk with the actual streaming content
 * - `retry`: Optional retry interval for reconnection
 *
 * The StreamingChunk data payload varies by mode:
 *
 * **Text Mode:**
 * - `delta`: Incremental text content
 * - `span_id`: Execution span ID (first chunk)
 * - `chunk_type`: "text"
 *
 * **Structured Mode:**
 * - `delta`: Actual field values being streamed
 * - `json_path`: Dot-notation path to current field
 * - `span_id`: Execution span ID (first chunk)
 * - `chunk_type`: "json"
 *
 * ## Examples
 *
 * Text streaming events:
 * ```
 * data: {"span_id": "123e4567-e89b-12d3-a456-426614174000"}
 * data: {"delta": "Hello", "chunk_type": "text"}
 * data: {"delta": " world", "chunk_type": "text"}
 * ```
 *
 * Structured streaming events:
 * ```
 * data: {"span_id": "123e4567-e89b-12d3-a456-426614174000"}
 * data: {"delta": "John", "json_path": "response.name", "chunk_type": "json"}
 * data: {"delta": " Doe", "json_path": "response.name", "chunk_type": "json"}
 * data: {"delta": "Engineer", "json_path": "response.role", "chunk_type": "json"}
 * ```
 */
export function stream(
  client: OpperCore,
  request: models.AppApiPublicV2FunctionCallCallFunctionRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    operations.FunctionStreamCallStreamPostResponse,
    | errors.BadRequestError
    | errors.UnauthorizedError
    | errors.NotFoundError
    | errors.RequestValidationError
    | OpperError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: OpperCore,
  request: models.AppApiPublicV2FunctionCallCallFunctionRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      operations.FunctionStreamCallStreamPostResponse,
      | errors.BadRequestError
      | errors.UnauthorizedError
      | errors.NotFoundError
      | errors.RequestValidationError
      | OpperError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      models.AppApiPublicV2FunctionCallCallFunctionRequest$outboundSchema.parse(
        value,
      ),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = encodeJSON("body", payload, { explode: true });

  const path = pathToFunc("/call/stream")();

  const headers = new Headers(compactMap({
    "Content-Type": "application/json",
    Accept: "text/event-stream",
  }));

  const secConfig = await extractSecurity(client._options.httpBearer);
  const securityInput = secConfig == null ? {} : { httpBearer: secConfig };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "function_stream_call_stream_post",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.httpBearer,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "404", "422", "4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    operations.FunctionStreamCallStreamPostResponse,
    | errors.BadRequestError
    | errors.UnauthorizedError
    | errors.NotFoundError
    | errors.RequestValidationError
    | OpperError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.sse(200, operations.FunctionStreamCallStreamPostResponse$inboundSchema, {
      hdrs: true,
      key: "Result",
    }),
    M.jsonErr(400, errors.BadRequestError$inboundSchema),
    M.jsonErr(401, errors.UnauthorizedError$inboundSchema),
    M.jsonErr(404, errors.NotFoundError$inboundSchema),
    M.jsonErr(422, errors.RequestValidationError$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
