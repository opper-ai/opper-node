/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { functionsCall } from "../funcs/functionsCall.js";
import { functionsCallRevision } from "../funcs/functionsCallRevision.js";
import { functionsCreate } from "../funcs/functionsCreate.js";
import { functionsDelete } from "../funcs/functionsDelete.js";
import { functionsGet } from "../funcs/functionsGet.js";
import { functionsGetByName } from "../funcs/functionsGetByName.js";
import { functionsGetByRevision } from "../funcs/functionsGetByRevision.js";
import { functionsList } from "../funcs/functionsList.js";
import { functionsStream } from "../funcs/functionsStream.js";
import { functionsStreamRevision } from "../funcs/functionsStreamRevision.js";
import { functionsUpdate } from "../funcs/functionsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Revisions } from "./revisions.js";

export class Functions extends ClientSDK {
  private _revisions?: Revisions;
  get revisions(): Revisions {
    return (this._revisions ??= new Revisions(this._options));
  }

  /**
   * Create Function
   *
   * @remarks
   * Create a function
   */
  async create(
    request: models.CreateFunctionRequest,
    options?: RequestOptions,
  ): Promise<models.CreateFunctionResponse> {
    return unwrapAsync(functionsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List Functions
   *
   * @remarks
   * List existing functions with the most recent revision in the current project
   */
  async list(
    name?: string | null | undefined,
    sort?: string | null | undefined,
    offset?: number | null | undefined,
    limit?: number | null | undefined,
    options?: RequestOptions,
  ): Promise<models.PaginatedResponseListFunctionsResponseItem> {
    return unwrapAsync(functionsList(
      this,
      name,
      sort,
      offset,
      limit,
      options,
    ));
  }

  /**
   * Get Function
   *
   * @remarks
   * Get the latest revision of a function by ID
   */
  async get(
    functionId: string,
    options?: RequestOptions,
  ): Promise<models.GetFunctionResponse> {
    return unwrapAsync(functionsGet(
      this,
      functionId,
      options,
    ));
  }

  /**
   * Update Function
   *
   * @remarks
   * Update a function, this will create a new revision of the function
   */
  async update(
    functionId: string,
    updateFunctionRequest: models.UpdateFunctionRequest,
    options?: RequestOptions,
  ): Promise<models.UpdateFunctionResponse> {
    return unwrapAsync(functionsUpdate(
      this,
      functionId,
      updateFunctionRequest,
      options,
    ));
  }

  /**
   * Delete Function
   *
   * @remarks
   * Delete a function by ID
   */
  async delete(
    functionId: string,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(functionsDelete(
      this,
      functionId,
      options,
    ));
  }

  /**
   * Get Function By Name
   *
   * @remarks
   * Get the latest revision of a function by name
   */
  async getByName(
    name: string,
    options?: RequestOptions,
  ): Promise<models.GetFunctionResponse> {
    return unwrapAsync(functionsGetByName(
      this,
      name,
      options,
    ));
  }

  /**
   * Get Function By Revision
   *
   * @remarks
   * Get a function by ID with a specific revision
   */
  async getByRevision(
    functionId: string,
    revisionId: string,
    options?: RequestOptions,
  ): Promise<models.GetFunctionResponse> {
    return unwrapAsync(functionsGetByRevision(
      this,
      functionId,
      revisionId,
      options,
    ));
  }

  /**
   * Call Function
   *
   * @remarks
   * Call a function
   */
  async call(
    functionId: string,
    appApiPublicV2FunctionsCallFunctionRequest:
      models.AppApiPublicV2FunctionsCallFunctionRequest,
    options?: RequestOptions,
  ): Promise<models.AppApiPublicV2FunctionsCallFunctionResponse> {
    return unwrapAsync(functionsCall(
      this,
      functionId,
      appApiPublicV2FunctionsCallFunctionRequest,
      options,
    ));
  }

  /**
   * Stream Function
   *
   * @remarks
   * Stream a function call execution in real-time using Server-Sent Events (SSE).
   *
   * This endpoint returns a continuous stream of Server-Sent Event objects as the function executes,
   * allowing for real-time streaming of responses. The response follows the Server-Sent Events
   * specification with proper event structure for SDK compatibility.
   *
   * Each Server-Sent Event contains:
   * - `id`: Optional event identifier
   * - `event`: Optional event type
   * - `data`: JSON payload with streaming chunk information
   * - `retry`: Optional retry interval
   *
   * The data payload includes:
   * - `delta`: Incremental text content (if any)
   * - `span_id`: Unique identifier for the execution span (when available)
   */
  async stream(
    functionId: string,
    appApiPublicV2FunctionsCallFunctionRequest:
      models.AppApiPublicV2FunctionsCallFunctionRequest,
    options?: RequestOptions,
  ): Promise<
    operations.StreamFunctionFunctionsFunctionIdCallStreamPostResponse
  > {
    return unwrapAsync(functionsStream(
      this,
      functionId,
      appApiPublicV2FunctionsCallFunctionRequest,
      options,
    ));
  }

  /**
   * Call Function Revision
   *
   * @remarks
   * Call a function
   */
  async callRevision(
    functionId: string,
    revisionId: string,
    appApiPublicV2FunctionsCallFunctionRequest:
      models.AppApiPublicV2FunctionsCallFunctionRequest,
    options?: RequestOptions,
  ): Promise<models.AppApiPublicV2FunctionsCallFunctionResponse> {
    return unwrapAsync(functionsCallRevision(
      this,
      functionId,
      revisionId,
      appApiPublicV2FunctionsCallFunctionRequest,
      options,
    ));
  }

  /**
   * Stream Function Revision
   *
   * @remarks
   * Stream a function revision call execution in real-time using Server-Sent Events (SSE).
   *
   * This endpoint returns a continuous stream of Server-Sent Event objects as the function executes,
   * allowing for real-time streaming of responses. The response follows the Server-Sent Events
   * specification with proper event structure for SDK compatibility.
   *
   * Each Server-Sent Event contains:
   * - `id`: Optional event identifier
   * - `event`: Optional event type
   * - `data`: JSON payload with streaming chunk information
   * - `retry`: Optional retry interval
   *
   * The data payload includes:
   * - `delta`: Incremental text content (if any)
   * - `span_id`: Unique identifier for the execution span (when available)
   */
  async streamRevision(
    functionId: string,
    revisionId: string,
    appApiPublicV2FunctionsCallFunctionRequest:
      models.AppApiPublicV2FunctionsCallFunctionRequest,
    options?: RequestOptions,
  ): Promise<
    operations.StreamFunctionRevisionFunctionsFunctionIdCallStreamRevisionIdPostResponse
  > {
    return unwrapAsync(functionsStreamRevision(
      this,
      functionId,
      revisionId,
      appApiPublicV2FunctionsCallFunctionRequest,
      options,
    ));
  }
}
