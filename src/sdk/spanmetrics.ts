/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { spanMetricsCreateMetric } from "../funcs/spanMetricsCreateMetric.js";
import { spanMetricsDelete } from "../funcs/spanMetricsDelete.js";
import { spanMetricsGet } from "../funcs/spanMetricsGet.js";
import { spanMetricsList } from "../funcs/spanMetricsList.js";
import { spanMetricsUpdateMetric } from "../funcs/spanMetricsUpdateMetric.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import { unwrapAsync } from "../types/fp.js";

export class SpanMetrics extends ClientSDK {
  /**
   * Create Metric
   *
   * @remarks
   * Create a new metric for a span
   */
  async createMetric(
    spanId: string,
    createSpanMetricRequest: models.CreateSpanMetricRequest,
    options?: RequestOptions,
  ): Promise<models.CreateSpanMetricResponse> {
    return unwrapAsync(spanMetricsCreateMetric(
      this,
      spanId,
      createSpanMetricRequest,
      options,
    ));
  }

  /**
   * List Metrics
   *
   * @remarks
   * List metrics for a span
   */
  async list(
    spanId: string,
    offset?: number | undefined,
    limit?: number | undefined,
    options?: RequestOptions,
  ): Promise<models.PaginatedResponseListSpanMetricsResponse> {
    return unwrapAsync(spanMetricsList(
      this,
      spanId,
      offset,
      limit,
      options,
    ));
  }

  /**
   * Get Metric
   *
   * @remarks
   * Get a metric for a span
   */
  async get(
    spanId: string,
    metricId: string,
    options?: RequestOptions,
  ): Promise<models.GetSpanMetricResponse> {
    return unwrapAsync(spanMetricsGet(
      this,
      spanId,
      metricId,
      options,
    ));
  }

  /**
   * Update Metric
   *
   * @remarks
   * Update a metric for a span
   */
  async updateMetric(
    spanId: string,
    metricId: string,
    updateSpanMetricRequest: models.UpdateSpanMetricRequest,
    options?: RequestOptions,
  ): Promise<models.UpdateSpanMetricResponse> {
    return unwrapAsync(spanMetricsUpdateMetric(
      this,
      spanId,
      metricId,
      updateSpanMetricRequest,
      options,
    ));
  }

  /**
   * Delete Metric
   *
   * @remarks
   * Delete a metric for a span
   */
  async delete(
    spanId: string,
    metricId: string,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(spanMetricsDelete(
      this,
      spanId,
      metricId,
      options,
    ));
  }
}
