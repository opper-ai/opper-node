/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { knowledgeAdd } from "../funcs/knowledgeAdd.js";
import { knowledgeCreate } from "../funcs/knowledgeCreate.js";
import { knowledgeDelete } from "../funcs/knowledgeDelete.js";
import { knowledgeDeleteDocumentsKnowledgeKnowledgeBaseIdQueryDelete } from "../funcs/knowledgeDeleteDocumentsKnowledgeKnowledgeBaseIdQueryDelete.js";
import { knowledgeDeleteFile } from "../funcs/knowledgeDeleteFile.js";
import { knowledgeGet } from "../funcs/knowledgeGet.js";
import { knowledgeGetByName } from "../funcs/knowledgeGetByName.js";
import { knowledgeGetUploadUrl } from "../funcs/knowledgeGetUploadUrl.js";
import { knowledgeList } from "../funcs/knowledgeList.js";
import { knowledgeQuery } from "../funcs/knowledgeQuery.js";
import { knowledgeRegisterFileUpload } from "../funcs/knowledgeRegisterFileUpload.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Knowledge extends ClientSDK {
  /**
   * Create Knowledge Base
   *
   * @remarks
   * Create a knowledge base
   */
  async create(
    request: models.CreateKnowledgeBaseRequest,
    options?: RequestOptions,
  ): Promise<models.CreateKnowledgeBaseResponse> {
    return unwrapAsync(knowledgeCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List Knowledge Bases
   *
   * @remarks
   * List all knowledge bases for the current project
   */
  async list(
    offset?: number | undefined,
    limit?: number | undefined,
    options?: RequestOptions,
  ): Promise<models.PaginatedResponseListKnowledgeBasesResponse> {
    return unwrapAsync(knowledgeList(
      this,
      offset,
      limit,
      options,
    ));
  }

  /**
   * Get Knowledge Base
   *
   * @remarks
   * Get a knowledge base by its id
   */
  async get(
    knowledgeBaseId: string,
    options?: RequestOptions,
  ): Promise<models.GetKnowledgeBaseResponse> {
    return unwrapAsync(knowledgeGet(
      this,
      knowledgeBaseId,
      options,
    ));
  }

  /**
   * Delete Knowledge Base
   *
   * @remarks
   * Delete a knowledge base
   */
  async delete(
    knowledgeBaseId: string,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(knowledgeDelete(
      this,
      knowledgeBaseId,
      options,
    ));
  }

  /**
   * Get Knowledge Base By Name
   *
   * @remarks
   * Get a knowledge base by its name
   */
  async getByName(
    knowledgeBaseName: string,
    options?: RequestOptions,
  ): Promise<models.GetKnowledgeBaseResponse> {
    return unwrapAsync(knowledgeGetByName(
      this,
      knowledgeBaseName,
      options,
    ));
  }

  /**
   * Get Upload Url
   *
   * @remarks
   * Get upload URL for a knowledge base by its id
   *
   * Uploading files is a three step process:
   * 1. Get upload URL (GET /v2/knowledge/{knowledge_base_id}/upload_url)
   * 2. Upload file to the URL
   * 3. Register file (POST /v2/knowledge/{knowledge_base_id}/register_file)
   */
  async getUploadUrl(
    knowledgeBaseId: string,
    filename: string,
    options?: RequestOptions,
  ): Promise<models.GetUploadUrlResponse> {
    return unwrapAsync(knowledgeGetUploadUrl(
      this,
      knowledgeBaseId,
      filename,
      options,
    ));
  }

  /**
   * Register File Upload
   *
   * @remarks
   * Register a file upload for a knowledge base by its id
   *
   * Registering a file upload is a three step process:
   * 1. Get upload URL (GET /v2/knowledge/{knowledge_base_id}/upload_url)
   * 2. Upload file to the URL
   * 3. Register file (POST /v2/knowledge/{knowledge_base_id}/register_file)
   */
  async registerFileUpload(
    knowledgeBaseId: string,
    registerFileUploadRequest: models.RegisterFileUploadRequest,
    options?: RequestOptions,
  ): Promise<models.RegisterFileUploadResponse> {
    return unwrapAsync(knowledgeRegisterFileUpload(
      this,
      knowledgeBaseId,
      registerFileUploadRequest,
      options,
    ));
  }

  /**
   * Delete File From Knowledge Base
   *
   * @remarks
   * Delete a file from a knowledge base by its id
   */
  async deleteFile(
    knowledgeBaseId: string,
    fileId: string,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(knowledgeDeleteFile(
      this,
      knowledgeBaseId,
      fileId,
      options,
    ));
  }

  /**
   * Query Knowledge Base
   *
   * @remarks
   * Query a knowledge base by its id
   */
  async query(
    knowledgeBaseId: string,
    queryKnowledgeBaseRequest: models.QueryKnowledgeBaseRequest,
    options?: RequestOptions,
  ): Promise<Array<models.QueryKnowledgeBaseResponse>> {
    return unwrapAsync(knowledgeQuery(
      this,
      knowledgeBaseId,
      queryKnowledgeBaseRequest,
      options,
    ));
  }

  /**
   * Delete Documents
   *
   * @remarks
   * Delete documents from a knowledge base based on filters
   */
  async deleteDocumentsKnowledgeKnowledgeBaseIdQueryDelete(
    knowledgeBaseId: string,
    deleteKnowledgeBaseRequest?:
      | models.DeleteKnowledgeBaseRequest
      | null
      | undefined,
    options?: RequestOptions,
  ): Promise<models.DeleteKnowledgeBaseResponse> {
    return unwrapAsync(
      knowledgeDeleteDocumentsKnowledgeKnowledgeBaseIdQueryDelete(
        this,
        knowledgeBaseId,
        deleteKnowledgeBaseRequest,
        options,
      ),
    );
  }

  /**
   * Add
   *
   * @remarks
   * Add data to a knowledge base
   */
  async add(
    knowledgeBaseId: string,
    addRequest: models.AddRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(knowledgeAdd(
      this,
      knowledgeBaseId,
      addRequest,
      options,
    ));
  }
}
