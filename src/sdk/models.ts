/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { modelsCreateModelAliasModelsAliasesPost } from "../funcs/modelsCreateModelAliasModelsAliasesPost.js";
import { modelsDeleteModelAliasModelsAliasesAliasIdDelete } from "../funcs/modelsDeleteModelAliasModelsAliasesAliasIdDelete.js";
import { modelsGetModelAliasByNameModelsAliasesByNameNameGet } from "../funcs/modelsGetModelAliasByNameModelsAliasesByNameNameGet.js";
import { modelsGetModelAliasModelsAliasesAliasIdGet } from "../funcs/modelsGetModelAliasModelsAliasesAliasIdGet.js";
import { modelsListModelAliasesModelsAliasesGet } from "../funcs/modelsListModelAliasesModelsAliasesGet.js";
import { modelsUpdateModelAliasModelsAliasesAliasIdPatch } from "../funcs/modelsUpdateModelAliasModelsAliasesAliasIdPatch.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Models extends ClientSDK {
  /**
   * Create Model Alias
   *
   * @remarks
   * Create a model alias with fallback models for the organization that owns the API key.
   *
   * A model alias allows you to define a name that resolves to an ordered list of fallback models.
   * For example, you could create an alias called "sonnet-4" that falls back to
   * ["anthropic/claude-3-5-sonnet-latest", "anthropic/claude-3-5-sonnet-20241022"].
   */
  async createModelAliasModelsAliasesPost(
    request: models.CreateModelAliasRequest,
    options?: RequestOptions,
  ): Promise<models.CreateModelAliasResponse> {
    return unwrapAsync(modelsCreateModelAliasModelsAliasesPost(
      this,
      request,
      options,
    ));
  }

  /**
   * List Model Aliases
   *
   * @remarks
   * List all model aliases for the organization that owns the API key.
   */
  async listModelAliasesModelsAliasesGet(
    offset?: number | undefined,
    limit?: number | undefined,
    options?: RequestOptions,
  ): Promise<models.PaginatedResponseListModelAliasesResponseItem> {
    return unwrapAsync(modelsListModelAliasesModelsAliasesGet(
      this,
      offset,
      limit,
      options,
    ));
  }

  /**
   * Get Model Alias
   *
   * @remarks
   * Get a model alias by its ID.
   */
  async getModelAliasModelsAliasesAliasIdGet(
    aliasId: string,
    options?: RequestOptions,
  ): Promise<models.GetModelAliasResponse> {
    return unwrapAsync(modelsGetModelAliasModelsAliasesAliasIdGet(
      this,
      aliasId,
      options,
    ));
  }

  /**
   * Update Model Alias
   *
   * @remarks
   * Update a model alias.
   */
  async updateModelAliasModelsAliasesAliasIdPatch(
    aliasId: string,
    updateModelAliasRequest: models.UpdateModelAliasRequest,
    options?: RequestOptions,
  ): Promise<models.UpdateModelAliasResponse> {
    return unwrapAsync(modelsUpdateModelAliasModelsAliasesAliasIdPatch(
      this,
      aliasId,
      updateModelAliasRequest,
      options,
    ));
  }

  /**
   * Delete Model Alias
   *
   * @remarks
   * Delete a model alias.
   */
  async deleteModelAliasModelsAliasesAliasIdDelete(
    aliasId: string,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(modelsDeleteModelAliasModelsAliasesAliasIdDelete(
      this,
      aliasId,
      options,
    ));
  }

  /**
   * Get Model Alias By Name
   *
   * @remarks
   * Get a model alias by its name.
   */
  async getModelAliasByNameModelsAliasesByNameNameGet(
    name: string,
    options?: RequestOptions,
  ): Promise<models.GetModelAliasResponse> {
    return unwrapAsync(modelsGetModelAliasByNameModelsAliasesByNameNameGet(
      this,
      name,
      options,
    ));
  }
}
