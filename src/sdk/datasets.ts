/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { datasetsCreateEntry } from "../funcs/datasetsCreateEntry.js";
import { datasetsDeleteEntry } from "../funcs/datasetsDeleteEntry.js";
import { datasetsGetEntry } from "../funcs/datasetsGetEntry.js";
import { datasetsListEntries } from "../funcs/datasetsListEntries.js";
import { datasetsQueryEntries } from "../funcs/datasetsQueryEntries.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Entries } from "./entries.js";

export class Datasets extends ClientSDK {
  private _entries?: Entries;
  get entries(): Entries {
    return (this._entries ??= new Entries(this._options));
  }

  /**
   * Create Dataset Entry
   */
  async createEntry(
    datasetId: string,
    createDatasetEntryRequest: models.CreateDatasetEntryRequest,
    options?: RequestOptions,
  ): Promise<models.CreateDatasetEntryResponse> {
    return unwrapAsync(datasetsCreateEntry(
      this,
      datasetId,
      createDatasetEntryRequest,
      options,
    ));
  }

  /**
   * List Dataset Entries
   */
  async listEntries(
    datasetId: string,
    offset?: number | undefined,
    limit?: number | undefined,
    options?: RequestOptions,
  ): Promise<models.PaginatedResponseGetDatasetEntriesResponse> {
    return unwrapAsync(datasetsListEntries(
      this,
      datasetId,
      offset,
      limit,
      options,
    ));
  }

  /**
   * Get Dataset Entry
   */
  async getEntry(
    datasetId: string,
    entryId: string,
    options?: RequestOptions,
  ): Promise<models.GetDatasetEntryResponse> {
    return unwrapAsync(datasetsGetEntry(
      this,
      datasetId,
      entryId,
      options,
    ));
  }

  /**
   * Delete Dataset Entry
   */
  async deleteEntry(
    datasetId: string,
    entryId: string,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(datasetsDeleteEntry(
      this,
      datasetId,
      entryId,
      options,
    ));
  }

  /**
   * Query Dataset Entries
   */
  async queryEntries(
    datasetId: string,
    query: string,
    limit?: number | undefined,
    options?: RequestOptions,
  ): Promise<Array<models.QueryDatasetEntriesResponse>> {
    return unwrapAsync(datasetsQueryEntries(
      this,
      datasetId,
      query,
      limit,
      options,
    ));
  }
}
